
USB_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e428  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eff8  0800eff8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800eff8  0800eff8  0001eff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f000  0800f000  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f000  0800f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f004  0800f004  0001f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800f008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001030  2000009c  0800f0a4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010cc  0800f0a4  000210cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032881  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005768  00000000  00000000  0005294d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  000580b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00059770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c328  00000000  00000000  0005ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022112  00000000  00000000  00086f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a56  00000000  00000000  000a909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019aaf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006204  00000000  00000000  0019ab44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5a0 	.word	0x0800e5a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800e5a0 	.word	0x0800e5a0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fb19 	bl	80001e4 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Send_Uart+0x28>)
 8000bbe:	f004 fe87 	bl	80058d0 <HAL_UART_Transmit>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000484 	.word	0x20000484

08000bd0 <Mount_USB>:



void Mount_USB (void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	490a      	ldr	r1, [pc, #40]	; (8000c00 <Mount_USB+0x30>)
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <Mount_USB+0x34>)
 8000bda:	f00b fd31 	bl	800c640 <f_mount>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <Mount_USB+0x38>)
 8000be4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\r");
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <Mount_USB+0x38>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <Mount_USB+0x26>
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <Mount_USB+0x3c>)
 8000bf0:	f7ff ffd8 	bl	8000ba4 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n\r");
}
 8000bf4:	e002      	b.n	8000bfc <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n\r");
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <Mount_USB+0x40>)
 8000bf8:	f7ff ffd4 	bl	8000ba4 <Send_Uart>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000050c 	.word	0x2000050c
 8000c04:	20000740 	.word	0x20000740
 8000c08:	20000310 	.word	0x20000310
 8000c0c:	0800e5b8 	.word	0x0800e5b8
 8000c10:	0800e5d8 	.word	0x0800e5d8

08000c14 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	490a      	ldr	r1, [pc, #40]	; (8000c44 <Unmount_USB+0x30>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f00b fd0f 	bl	800c640 <f_mount>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <Unmount_USB+0x34>)
 8000c28:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\r");
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <Unmount_USB+0x34>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <Unmount_USB+0x26>
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <Unmount_USB+0x38>)
 8000c34:	f7ff ffb6 	bl	8000ba4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\r");
}
 8000c38:	e002      	b.n	8000c40 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\r");
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <Unmount_USB+0x3c>)
 8000c3c:	f7ff ffb2 	bl	8000ba4 <Send_Uart>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000050c 	.word	0x2000050c
 8000c48:	20000310 	.word	0x20000310
 8000c4c:	0800e5f8 	.word	0x0800e5f8
 8000c50:	0800e618 	.word	0x0800e618

08000c54 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f00d f859 	bl	800dd14 <malloc>
 8000c62:	4603      	mov	r3, r0
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
    sprintf (path, "%s",pat);
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4944      	ldr	r1, [pc, #272]	; (8000d7c <Scan_USB+0x128>)
 8000c6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c6c:	f00d f932 	bl	800ded4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00c f903 	bl	800ce82 <f_opendir>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <Scan_USB+0x12c>)
 8000c82:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <Scan_USB+0x12c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d16e      	bne.n	8000d6a <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	493c      	ldr	r1, [pc, #240]	; (8000d84 <Scan_USB+0x130>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00c f98e 	bl	800cfb4 <f_readdir>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <Scan_USB+0x12c>)
 8000c9e:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <Scan_USB+0x12c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d15b      	bne.n	8000d60 <Scan_USB+0x10c>
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <Scan_USB+0x130>)
 8000caa:	7d9b      	ldrb	r3, [r3, #22]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d057      	beq.n	8000d60 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cb0:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <Scan_USB+0x130>)
 8000cb2:	7a1b      	ldrb	r3, [r3, #8]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d03a      	beq.n	8000d32 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cbc:	4932      	ldr	r1, [pc, #200]	; (8000d88 <Scan_USB+0x134>)
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <Scan_USB+0x138>)
 8000cc0:	f7ff fa86 	bl	80001d0 <strcmp>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d045      	beq.n	8000d56 <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000cca:	492f      	ldr	r1, [pc, #188]	; (8000d88 <Scan_USB+0x134>)
 8000ccc:	4830      	ldr	r0, [pc, #192]	; (8000d90 <Scan_USB+0x13c>)
 8000cce:	f7ff fa7f 	bl	80001d0 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d040      	beq.n	8000d5a <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000cd8:	201e      	movs	r0, #30
 8000cda:	f00d f81b 	bl	800dd14 <malloc>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000ce2:	4a29      	ldr	r2, [pc, #164]	; (8000d88 <Scan_USB+0x134>)
 8000ce4:	492b      	ldr	r1, [pc, #172]	; (8000d94 <Scan_USB+0x140>)
 8000ce6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000ce8:	f00d f8f4 	bl	800ded4 <siprintf>
            	Send_Uart(buf);
 8000cec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000cee:	f7ff ff59 	bl	8000ba4 <Send_Uart>
            	free(buf);
 8000cf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000cf4:	f00d f816 	bl	800dd24 <free>
                i = strlen(path);
 8000cf8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000cfa:	f7ff fa73 	bl	80001e4 <strlen>
 8000cfe:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d04:	4413      	add	r3, r2
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <Scan_USB+0x134>)
 8000d08:	4923      	ldr	r1, [pc, #140]	; (8000d98 <Scan_USB+0x144>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00d f8e2 	bl	800ded4 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d12:	f7ff ff9f 	bl	8000c54 <Scan_USB>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <Scan_USB+0x12c>)
 8000d1c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <Scan_USB+0x12c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d11b      	bne.n	8000d5e <Scan_USB+0x10a>
                path[i] = 0;
 8000d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e7ac      	b.n	8000c8c <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d32:	201e      	movs	r0, #30
 8000d34:	f00c ffee 	bl	800dd14 <malloc>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
               sprintf(buf,"File: %s/%s\n\r", path, USBHfno.fname);
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <Scan_USB+0x134>)
 8000d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d40:	4916      	ldr	r1, [pc, #88]	; (8000d9c <Scan_USB+0x148>)
 8000d42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d44:	f00d f8c6 	bl	800ded4 <siprintf>
               Send_Uart(buf);
 8000d48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d4a:	f7ff ff2b 	bl	8000ba4 <Send_Uart>
               free(buf);
 8000d4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d50:	f00c ffe8 	bl	800dd24 <free>
 8000d54:	e79a      	b.n	8000c8c <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d56:	bf00      	nop
 8000d58:	e798      	b.n	8000c8c <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d5a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d5c:	e796      	b.n	8000c8c <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d5e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00c f8ff 	bl	800cf68 <f_closedir>
    }
    free(path);
 8000d6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d6c:	f00c ffda 	bl	800dd24 <free>
    return fresult;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <Scan_USB+0x12c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	0800e638 	.word	0x0800e638
 8000d80:	20000310 	.word	0x20000310
 8000d84:	20000314 	.word	0x20000314
 8000d88:	2000032a 	.word	0x2000032a
 8000d8c:	0800e63c 	.word	0x0800e63c
 8000d90:	0800e648 	.word	0x0800e648
 8000d94:	0800e664 	.word	0x0800e664
 8000d98:	0800e670 	.word	0x0800e670
 8000d9c:	0800e674 	.word	0x0800e674

08000da0 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000daa:	4955      	ldr	r1, [pc, #340]	; (8000f00 <Write_File+0x160>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f00c f93e 	bl	800d02e <f_stat>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <Write_File+0x164>)
 8000db8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000dba:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <Write_File+0x164>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f00c ffa6 	bl	800dd14 <malloc>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\r", name);
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	494e      	ldr	r1, [pc, #312]	; (8000f08 <Write_File+0x168>)
 8000dd0:	68b8      	ldr	r0, [r7, #8]
 8000dd2:	f00d f87f 	bl	800ded4 <siprintf>
		Send_Uart (buf);
 8000dd6:	68b8      	ldr	r0, [r7, #8]
 8000dd8:	f7ff fee4 	bl	8000ba4 <Send_Uart>
	    free(buf);
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f00c ffa1 	bl	800dd24 <free>
	    return fresult;
 8000de2:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <Write_File+0x164>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	e087      	b.n	8000ef8 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000de8:	2202      	movs	r2, #2
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4847      	ldr	r0, [pc, #284]	; (8000f0c <Write_File+0x16c>)
 8000dee:	f00b fc6d 	bl	800c6cc <f_open>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <Write_File+0x164>)
 8000df8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <Write_File+0x164>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d015      	beq.n	8000e2e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f00c ff86 	bl	800dd14 <malloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\r", fresult, name);
 8000e0c:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <Write_File+0x164>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	493e      	ldr	r1, [pc, #248]	; (8000f10 <Write_File+0x170>)
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f00d f85c 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff fec1 	bl	8000ba4 <Send_Uart>
	        free(buf);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f00c ff7e 	bl	800dd24 <free>
	        return fresult;
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <Write_File+0x164>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	e064      	b.n	8000ef8 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f00c ff70 	bl	800dd14 <malloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it \n\r", name);
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4936      	ldr	r1, [pc, #216]	; (8000f14 <Write_File+0x174>)
 8000e3c:	69f8      	ldr	r0, [r7, #28]
 8000e3e:	f00d f849 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 8000e42:	69f8      	ldr	r0, [r7, #28]
 8000e44:	f7ff feae 	bl	8000ba4 <Send_Uart>
	        free(buf);
 8000e48:	69f8      	ldr	r0, [r7, #28]
 8000e4a:	f00c ff6b 	bl	800dd24 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff f9c8 	bl	80001e4 <strlen>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <Write_File+0x178>)
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	482c      	ldr	r0, [pc, #176]	; (8000f0c <Write_File+0x16c>)
 8000e5c:	f00b fdf4 	bl	800ca48 <f_write>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <Write_File+0x164>)
 8000e66:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <Write_File+0x164>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d012      	beq.n	8000e96 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000e70:	2064      	movs	r0, #100	; 0x64
 8000e72:	f00c ff4f 	bl	800dd14 <malloc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\r", fresult, name);
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <Write_File+0x164>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4926      	ldr	r1, [pc, #152]	; (8000f1c <Write_File+0x17c>)
 8000e84:	69b8      	ldr	r0, [r7, #24]
 8000e86:	f00d f825 	bl	800ded4 <siprintf>
	    		Send_Uart(buf);
 8000e8a:	69b8      	ldr	r0, [r7, #24]
 8000e8c:	f7ff fe8a 	bl	8000ba4 <Send_Uart>
	    		free(buf);
 8000e90:	69b8      	ldr	r0, [r7, #24]
 8000e92:	f00c ff47 	bl	800dd24 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000e96:	481d      	ldr	r0, [pc, #116]	; (8000f0c <Write_File+0x16c>)
 8000e98:	f00b ffc9 	bl	800ce2e <f_close>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <Write_File+0x164>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <Write_File+0x164>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d013      	beq.n	8000ed4 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000eac:	2064      	movs	r0, #100	; 0x64
 8000eae:	f00c ff31 	bl	800dd14 <malloc>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\r", fresult, name);
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <Write_File+0x164>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4918      	ldr	r1, [pc, #96]	; (8000f20 <Write_File+0x180>)
 8000ec0:	6938      	ldr	r0, [r7, #16]
 8000ec2:	f00d f807 	bl	800ded4 <siprintf>
	    		Send_Uart(buf);
 8000ec6:	6938      	ldr	r0, [r7, #16]
 8000ec8:	f7ff fe6c 	bl	8000ba4 <Send_Uart>
	    		free(buf);
 8000ecc:	6938      	ldr	r0, [r7, #16]
 8000ece:	f00c ff29 	bl	800dd24 <free>
 8000ed2:	e00f      	b.n	8000ef4 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f00c ff1d 	bl	800dd14 <malloc>
 8000eda:	4603      	mov	r3, r0
 8000edc:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully \n\r", name);
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4910      	ldr	r1, [pc, #64]	; (8000f24 <Write_File+0x184>)
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f00c fff6 	bl	800ded4 <siprintf>
	    		Send_Uart(buf);
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff fe5b 	bl	8000ba4 <Send_Uart>
	    		free(buf);
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f00c ff18 	bl	800dd24 <free>
	    	}
	    }
	    return fresult;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <Write_File+0x164>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000314 	.word	0x20000314
 8000f04:	20000310 	.word	0x20000310
 8000f08:	0800e688 	.word	0x0800e688
 8000f0c:	20000510 	.word	0x20000510
 8000f10:	0800e6a8 	.word	0x0800e6a8
 8000f14:	0800e6d0 	.word	0x0800e6d0
 8000f18:	2000030c 	.word	0x2000030c
 8000f1c:	0800e700 	.word	0x0800e700
 8000f20:	0800e734 	.word	0x0800e734
 8000f24:	0800e76c 	.word	0x0800e76c

08000f28 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000f30:	4943      	ldr	r1, [pc, #268]	; (8001040 <Create_File+0x118>)
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f00c f87b 	bl	800d02e <f_stat>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b41      	ldr	r3, [pc, #260]	; (8001044 <Create_File+0x11c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f40:	4b40      	ldr	r3, [pc, #256]	; (8001044 <Create_File+0x11c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d112      	bne.n	8000f6e <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f00c fee3 	bl	800dd14 <malloc>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\r",name);
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	493c      	ldr	r1, [pc, #240]	; (8001048 <Create_File+0x120>)
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f00c ffbc 	bl	800ded4 <siprintf>
		Send_Uart(buf);
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff fe21 	bl	8000ba4 <Send_Uart>
		free(buf);
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f00c fede 	bl	800dd24 <free>
	    return fresult;
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <Create_File+0x11c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	e063      	b.n	8001036 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000f6e:	220b      	movs	r2, #11
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4836      	ldr	r0, [pc, #216]	; (800104c <Create_File+0x124>)
 8000f74:	f00b fbaa 	bl	800c6cc <f_open>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b31      	ldr	r3, [pc, #196]	; (8001044 <Create_File+0x11c>)
 8000f7e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <Create_File+0x11c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d015      	beq.n	8000fb4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f00c fec3 	bl	800dd14 <malloc>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\r", fresult, name);
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <Create_File+0x11c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	492d      	ldr	r1, [pc, #180]	; (8001050 <Create_File+0x128>)
 8000f9c:	6938      	ldr	r0, [r7, #16]
 8000f9e:	f00c ff99 	bl	800ded4 <siprintf>
			Send_Uart(buf);
 8000fa2:	6938      	ldr	r0, [r7, #16]
 8000fa4:	f7ff fdfe 	bl	8000ba4 <Send_Uart>
			free(buf);
 8000fa8:	6938      	ldr	r0, [r7, #16]
 8000faa:	f00c febb 	bl	800dd24 <free>
		    return fresult;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <Create_File+0x11c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	e040      	b.n	8001036 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f00c fead 	bl	800dd14 <malloc>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n\r Now use Write_File to write data\n\r",name);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4924      	ldr	r1, [pc, #144]	; (8001054 <Create_File+0x12c>)
 8000fc2:	69f8      	ldr	r0, [r7, #28]
 8000fc4:	f00c ff86 	bl	800ded4 <siprintf>
			Send_Uart(buf);
 8000fc8:	69f8      	ldr	r0, [r7, #28]
 8000fca:	f7ff fdeb 	bl	8000ba4 <Send_Uart>
			free(buf);
 8000fce:	69f8      	ldr	r0, [r7, #28]
 8000fd0:	f00c fea8 	bl	800dd24 <free>
		}

		fresult = f_close(&USBHFile);
 8000fd4:	481d      	ldr	r0, [pc, #116]	; (800104c <Create_File+0x124>)
 8000fd6:	f00b ff2a 	bl	800ce2e <f_close>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <Create_File+0x11c>)
 8000fe0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <Create_File+0x11c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d013      	beq.n	8001012 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f00c fe92 	bl	800dd14 <malloc>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\r", fresult, name);
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <Create_File+0x11c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4916      	ldr	r1, [pc, #88]	; (8001058 <Create_File+0x130>)
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f00c ff68 	bl	800ded4 <siprintf>
			Send_Uart(buf);
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff fdcd 	bl	8000ba4 <Send_Uart>
			free(buf);
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f00c fe8a 	bl	800dd24 <free>
 8001010:	e00f      	b.n	8001032 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	f00c fe7e 	bl	800dd14 <malloc>
 8001018:	4603      	mov	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\r", name);
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	490f      	ldr	r1, [pc, #60]	; (800105c <Create_File+0x134>)
 8001020:	69b8      	ldr	r0, [r7, #24]
 8001022:	f00c ff57 	bl	800ded4 <siprintf>
			Send_Uart(buf);
 8001026:	69b8      	ldr	r0, [r7, #24]
 8001028:	f7ff fdbc 	bl	8000ba4 <Send_Uart>
			free(buf);
 800102c:	69b8      	ldr	r0, [r7, #24]
 800102e:	f00c fe79 	bl	800dd24 <free>
		}
	}
    return fresult;
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <Create_File+0x11c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000314 	.word	0x20000314
 8001044:	20000310 	.word	0x20000310
 8001048:	0800e864 	.word	0x0800e864
 800104c:	20000510 	.word	0x20000510
 8001050:	0800e89c 	.word	0x0800e89c
 8001054:	0800e8c4 	.word	0x0800e8c4
 8001058:	0800e904 	.word	0x0800e904
 800105c:	0800e928 	.word	0x0800e928

08001060 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800106a:	495e      	ldr	r1, [pc, #376]	; (80011e4 <Update_File+0x184>)
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f00b ffde 	bl	800d02e <f_stat>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <Update_File+0x188>)
 8001078:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <Update_File+0x188>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f00c fe46 	bl	800dd14 <malloc>
 8001088:	4603      	mov	r3, r0
 800108a:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\r", name);
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4957      	ldr	r1, [pc, #348]	; (80011ec <Update_File+0x18c>)
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f00c ff1f 	bl	800ded4 <siprintf>
		Send_Uart (buf);
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fd84 	bl	8000ba4 <Send_Uart>
		free(buf);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f00c fe41 	bl	800dd24 <free>
	    return fresult;
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <Update_File+0x188>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	e098      	b.n	80011da <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 80010a8:	2232      	movs	r2, #50	; 0x32
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4850      	ldr	r0, [pc, #320]	; (80011f0 <Update_File+0x190>)
 80010ae:	f00b fb0d 	bl	800c6cc <f_open>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <Update_File+0x188>)
 80010b8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010ba:	4b4b      	ldr	r3, [pc, #300]	; (80011e8 <Update_File+0x188>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f00c fe26 	bl	800dd14 <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\r", fresult, name);
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <Update_File+0x188>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4947      	ldr	r1, [pc, #284]	; (80011f4 <Update_File+0x194>)
 80010d6:	6938      	ldr	r0, [r7, #16]
 80010d8:	f00c fefc 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f7ff fd61 	bl	8000ba4 <Send_Uart>
	        free(buf);
 80010e2:	6938      	ldr	r0, [r7, #16]
 80010e4:	f00c fe1e 	bl	800dd24 <free>
	        return fresult;
 80010e8:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <Update_File+0x188>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	e075      	b.n	80011da <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f00c fe10 	bl	800dd14 <malloc>
 80010f4:	4603      	mov	r3, r0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it \n\r", name);
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	493f      	ldr	r1, [pc, #252]	; (80011f8 <Update_File+0x198>)
 80010fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010fe:	f00c fee9 	bl	800ded4 <siprintf>
    	Send_Uart(buf);
 8001102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001104:	f7ff fd4e 	bl	8000ba4 <Send_Uart>
        free(buf);
 8001108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800110a:	f00c fe0b 	bl	800dd24 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff f868 	bl	80001e4 <strlen>
 8001114:	4602      	mov	r2, r0
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <Update_File+0x19c>)
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	4835      	ldr	r0, [pc, #212]	; (80011f0 <Update_File+0x190>)
 800111c:	f00b fc94 	bl	800ca48 <f_write>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <Update_File+0x188>)
 8001126:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <Update_File+0x188>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f00c fdef 	bl	800dd14 <malloc>
 8001136:	4603      	mov	r3, r0
 8001138:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s* \n\r", fresult, name);
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <Update_File+0x188>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	492f      	ldr	r1, [pc, #188]	; (8001200 <Update_File+0x1a0>)
 8001144:	69f8      	ldr	r0, [r7, #28]
 8001146:	f00c fec5 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 800114a:	69f8      	ldr	r0, [r7, #28]
 800114c:	f7ff fd2a 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 8001150:	69f8      	ldr	r0, [r7, #28]
 8001152:	f00c fde7 	bl	800dd24 <free>
 8001156:	e00f      	b.n	8001178 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f00c fddb 	bl	800dd14 <malloc>
 800115e:	4603      	mov	r3, r0
 8001160:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully \n\r", name);
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4927      	ldr	r1, [pc, #156]	; (8001204 <Update_File+0x1a4>)
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f00c feb4 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 800116c:	6a38      	ldr	r0, [r7, #32]
 800116e:	f7ff fd19 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 8001172:	6a38      	ldr	r0, [r7, #32]
 8001174:	f00c fdd6 	bl	800dd24 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001178:	481d      	ldr	r0, [pc, #116]	; (80011f0 <Update_File+0x190>)
 800117a:	f00b fe58 	bl	800ce2e <f_close>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <Update_File+0x188>)
 8001184:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <Update_File+0x188>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f00c fdc0 	bl	800dd14 <malloc>
 8001194:	4603      	mov	r3, r0
 8001196:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\r", fresult, name);
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <Update_File+0x188>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4919      	ldr	r1, [pc, #100]	; (8001208 <Update_File+0x1a8>)
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f00c fe96 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff fcfb 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f00c fdb8 	bl	800dd24 <free>
 80011b4:	e00f      	b.n	80011d6 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f00c fdac 	bl	800dd14 <malloc>
 80011bc:	4603      	mov	r3, r0
 80011be:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\r", name);
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4912      	ldr	r1, [pc, #72]	; (800120c <Update_File+0x1ac>)
 80011c4:	69b8      	ldr	r0, [r7, #24]
 80011c6:	f00c fe85 	bl	800ded4 <siprintf>
	    	Send_Uart(buf);
 80011ca:	69b8      	ldr	r0, [r7, #24]
 80011cc:	f7ff fcea 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 80011d0:	69b8      	ldr	r0, [r7, #24]
 80011d2:	f00c fda7 	bl	800dd24 <free>
	     }
	}
    return fresult;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <Update_File+0x188>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000314 	.word	0x20000314
 80011e8:	20000310 	.word	0x20000310
 80011ec:	0800e688 	.word	0x0800e688
 80011f0:	20000510 	.word	0x20000510
 80011f4:	0800e6a8 	.word	0x0800e6a8
 80011f8:	0800e948 	.word	0x0800e948
 80011fc:	2000030c 	.word	0x2000030c
 8001200:	0800e978 	.word	0x0800e978
 8001204:	0800e9a0 	.word	0x0800e9a0
 8001208:	0800e818 	.word	0x0800e818
 800120c:	0800e928 	.word	0x0800e928

08001210 <Check_USB_Details>:
    }
    return fresult;
}

void Check_USB_Details (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001216:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <Check_USB_Details+0xc8>)
 8001218:	4930      	ldr	r1, [pc, #192]	; (80012dc <Check_USB_Details+0xcc>)
 800121a:	4831      	ldr	r0, [pc, #196]	; (80012e0 <Check_USB_Details+0xd0>)
 800121c:	f00b ff40 	bl	800d0a0 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <Check_USB_Details+0xc8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	3b02      	subs	r3, #2
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <Check_USB_Details+0xc8>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	8952      	ldrh	r2, [r2, #10]
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff faa0 	bl	8000778 <__aeabi_ui2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <Check_USB_Details+0xd4>)
 800123e:	f7ff f82f 	bl	80002a0 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fb0f 	bl	800086c <__aeabi_d2uiz>
 800124e:	4603      	mov	r3, r0
 8001250:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <Check_USB_Details+0xd8>)
 8001252:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001254:	201e      	movs	r0, #30
 8001256:	f00c fd5d 	bl	800dd14 <malloc>
 800125a:	4603      	mov	r3, r0
 800125c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: %lu\n\r",total);
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <Check_USB_Details+0xd8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4921      	ldr	r1, [pc, #132]	; (80012ec <Check_USB_Details+0xdc>)
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f00c fe34 	bl	800ded4 <siprintf>
    Send_Uart(buf);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fc99 	bl	8000ba4 <Send_Uart>
    free(buf);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f00c fd56 	bl	800dd24 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <Check_USB_Details+0xc8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	895b      	ldrh	r3, [r3, #10]
 800127e:	461a      	mov	r2, r3
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <Check_USB_Details+0xcc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	fb03 f302 	mul.w	r3, r3, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa75 	bl	8000778 <__aeabi_ui2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <Check_USB_Details+0xd4>)
 8001294:	f7ff f804 	bl	80002a0 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fae4 	bl	800086c <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <Check_USB_Details+0xe0>)
 80012a8:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80012aa:	201e      	movs	r0, #30
 80012ac:	f00c fd32 	bl	800dd14 <malloc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: %lu\n\r",free_space);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <Check_USB_Details+0xe0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	490e      	ldr	r1, [pc, #56]	; (80012f4 <Check_USB_Details+0xe4>)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f00c fe09 	bl	800ded4 <siprintf>
    Send_Uart(buf);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fc6e 	bl	8000ba4 <Send_Uart>
    free(buf);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f00c fd2b 	bl	800dd24 <free>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000304 	.word	0x20000304
 80012dc:	200002fc 	.word	0x200002fc
 80012e0:	0800ea5c 	.word	0x0800ea5c
 80012e4:	3fe00000 	.word	0x3fe00000
 80012e8:	2000042c 	.word	0x2000042c
 80012ec:	0800ea60 	.word	0x0800ea60
 80012f0:	20000308 	.word	0x20000308
 80012f4:	0800ea78 	.word	0x0800ea78

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f000 fad2 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f80e 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f000 f8de 	bl	80014c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001308:	f000 f8ac 	bl	8001464 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800130c:	f000 f86a 	bl	80013e4 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001310:	f005 fe7e 	bl	8007010 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001314:	f00c f89c 	bl	800d450 <MX_USB_HOST_Init>
  while (1)
  {


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001318:	f00c f8c0 	bl	800d49c <MX_USB_HOST_Process>
 800131c:	e7fc      	b.n	8001318 <main+0x20>
	...

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b096      	sub	sp, #88	; 0x58
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2244      	movs	r2, #68	; 0x44
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f00c fd0e 	bl	800dd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001346:	f002 ff45 	bl	80041d4 <HAL_PWREx_ControlVoltageScaling>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001350:	f000 f91e 	bl	8001590 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001354:	f002 ff20 	bl	8004198 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <SystemClock_Config+0xc0>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <SystemClock_Config+0xc0>)
 8001360:	f023 0318 	bic.w	r3, r3, #24
 8001364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001368:	2314      	movs	r3, #20
 800136a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001380:	2301      	movs	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001388:	2310      	movs	r3, #16
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800138c:	2307      	movs	r3, #7
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4618      	mov	r0, r3
 800139e:	f002 ff7f 	bl	80042a0 <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013a8:	f000 f8f2 	bl	8001590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b0:	2303      	movs	r3, #3
 80013b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2101      	movs	r1, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fb45 	bl	8004a54 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013d0:	f000 f8de 	bl	8001590 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013d4:	f004 f84c 	bl	8005470 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013d8:	bf00      	nop
 80013da:	3758      	adds	r7, #88	; 0x58
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_I2C1_Init+0x74>)
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <MX_I2C1_Init+0x78>)
 80013ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_I2C1_Init+0x74>)
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <MX_I2C1_Init+0x7c>)
 80013f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_I2C1_Init+0x74>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_I2C1_Init+0x74>)
 8001420:	f002 f931 	bl	8003686 <HAL_I2C_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800142a:	f000 f8b1 	bl	8001590 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_I2C1_Init+0x74>)
 8001432:	f002 fe19 	bl	8004068 <HAL_I2CEx_ConfigAnalogFilter>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800143c:	f000 f8a8 	bl	8001590 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_I2C1_Init+0x74>)
 8001444:	f002 fe5b 	bl	80040fe <HAL_I2CEx_ConfigDigitalFilter>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800144e:	f000 f89f 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000430 	.word	0x20000430
 800145c:	40005400 	.word	0x40005400
 8001460:	00300f38 	.word	0x00300f38

08001464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <MX_USART2_UART_Init+0x5c>)
 800146c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001470:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART2_UART_Init+0x58>)
 80014a8:	f004 f9c4 	bl	8005834 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014b2:	f000 f86d 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000484 	.word	0x20000484
 80014c0:	40004400 	.word	0x40004400

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_GPIO_Init+0xc4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <MX_GPIO_Init+0xc4>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_GPIO_Init+0xc4>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_GPIO_Init+0xc4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <MX_GPIO_Init+0xc4>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_GPIO_Init+0xc4>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_GPIO_Init+0xc4>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <MX_GPIO_Init+0xc4>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_GPIO_Init+0xc4>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_GPIO_Init+0xc4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <MX_GPIO_Init+0xc4>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_GPIO_Init+0xc4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2120      	movs	r1, #32
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f000 fd0b 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <MX_GPIO_Init+0xc8>)
 800155e:	f000 fb53 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001562:	2320      	movs	r3, #32
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 fb44 	bl	8001c08 <HAL_GPIO_Init>

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	48000800 	.word	0x48000800

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_MspInit+0x44>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_MspInit+0x44>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x44>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x44>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0ac      	sub	sp, #176	; 0xb0
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2288      	movs	r2, #136	; 0x88
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00c fba3 	bl	800dd50 <memset>
  if(hi2c->Instance==I2C1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_I2C_MspInit+0xb0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d13b      	bne.n	800168c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001614:	2340      	movs	r3, #64	; 0x40
 8001616:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001618:	2300      	movs	r3, #0
 800161a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fc3b 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800162c:	f7ff ffb0 	bl	8001590 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_I2C_MspInit+0xb4>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_I2C_MspInit+0xb4>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_I2C_MspInit+0xb4>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001648:	f44f 7340 	mov.w	r3, #768	; 0x300
 800164c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001650:	2312      	movs	r3, #18
 8001652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001662:	2304      	movs	r3, #4
 8001664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800166c:	4619      	mov	r1, r3
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <HAL_I2C_MspInit+0xb8>)
 8001670:	f000 faca 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_I2C_MspInit+0xb4>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_I2C_MspInit+0xb4>)
 800167a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167e:	6593      	str	r3, [r2, #88]	; 0x58
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_I2C_MspInit+0xb4>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	37b0      	adds	r7, #176	; 0xb0
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40005400 	.word	0x40005400
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0ac      	sub	sp, #176	; 0xb0
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2288      	movs	r2, #136	; 0x88
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00c fb45 	bl	800dd50 <memset>
  if(huart->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <HAL_UART_MspInit+0xb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13b      	bne.n	8001748 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fbdd 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e8:	f7ff ff52 	bl	8001590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_UART_MspInit+0xb4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_UART_MspInit+0xb4>)
 80016f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f6:	6593      	str	r3, [r2, #88]	; 0x58
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_UART_MspInit+0xb4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_UART_MspInit+0xb4>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_UART_MspInit+0xb4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_UART_MspInit+0xb4>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171c:	230c      	movs	r3, #12
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001734:	2307      	movs	r3, #7
 8001736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f000 fa60 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	37b0      	adds	r7, #176	; 0xb0
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40004400 	.word	0x40004400
 8001754:	40021000 	.word	0x40021000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f8da 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <OTG_FS_IRQHandler+0x10>)
 80017b2:	f000 fe51 	bl	8002458 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000db8 	.word	0x20000db8

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f00c fa66 	bl	800dcc0 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20018000 	.word	0x20018000
 8001820:	00000400 	.word	0x00000400
 8001824:	200000b8 	.word	0x200000b8
 8001828:	200010d0 	.word	0x200010d0

0800182c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001854:	f7ff ffea 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <LoopForever+0x6>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	; (8001890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <LoopForever+0xe>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	; (800189c <LoopForever+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f00c fa25 	bl	800dccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001882:	f7ff fd39 	bl	80012f8 <main>

08001886 <LoopForever>:

LoopForever:
    b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001888:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001894:	0800f008 	.word	0x0800f008
  ldr r2, =_sbss
 8001898:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800189c:	200010cc 	.word	0x200010cc

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_Init+0x3c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_Init+0x3c>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ba:	2003      	movs	r0, #3
 80018bc:	f000 f962 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 f80f 	bl	80018e4 <HAL_InitTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	e001      	b.n	80018d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d2:	f7ff fe63 	bl	800159c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_InitTick+0x6c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d023      	beq.n	8001940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_InitTick+0x70>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f96d 	bl	8001bee <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d809      	bhi.n	8001934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f937 	bl	8001b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_InitTick+0x74>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e007      	b.n	8001944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e004      	b.n	8001944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e001      	b.n	8001944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008
 8001980:	20000508 	.word	0x20000508

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000508 	.word	0x20000508

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e17f      	b.n	8001f18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8171 	beq.w	8001f12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x40>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d118      	bne.n	8001ce8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ac 	beq.w	8001f12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_GPIO_Init+0x330>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	4a5e      	ldr	r2, [pc, #376]	; (8001f38 <HAL_GPIO_Init+0x330>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_GPIO_Init+0x330>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd2:	4a5a      	ldr	r2, [pc, #360]	; (8001f3c <HAL_GPIO_Init+0x334>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x242>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4f      	ldr	r2, [pc, #316]	; (8001f40 <HAL_GPIO_Init+0x338>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x23e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <HAL_GPIO_Init+0x33c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x23a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4d      	ldr	r2, [pc, #308]	; (8001f48 <HAL_GPIO_Init+0x340>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x236>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	; (8001f4c <HAL_GPIO_Init+0x344>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x232>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4b      	ldr	r2, [pc, #300]	; (8001f50 <HAL_GPIO_Init+0x348>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x22e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4a      	ldr	r2, [pc, #296]	; (8001f54 <HAL_GPIO_Init+0x34c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x22a>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5c:	4937      	ldr	r1, [pc, #220]	; (8001f3c <HAL_GPIO_Init+0x334>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f47f ae78 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00
 8001f4c:	48001000 	.word	0x48001000
 8001f50:	48001400 	.word	0x48001400
 8001f54:	48001800 	.word	0x48001800
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b08f      	sub	sp, #60	; 0x3c
 8001f90:	af0a      	add	r7, sp, #40	; 0x28
 8001f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e054      	b.n	8002048 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f00b fb9d 	bl	800d6f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 f981 	bl	80062e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	687e      	ldr	r6, [r7, #4]
 8001fea:	466d      	mov	r5, sp
 8001fec:	f106 0410 	add.w	r4, r6, #16
 8001ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002000:	1d33      	adds	r3, r6, #4
 8002002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002004:	6838      	ldr	r0, [r7, #0]
 8002006:	f004 f930 	bl	800626a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f004 f978 	bl	8006306 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	687e      	ldr	r6, [r7, #4]
 800201e:	466d      	mov	r5, sp
 8002020:	f106 0410 	add.w	r4, r6, #16
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002030:	e885 0003 	stmia.w	r5, {r0, r1}
 8002034:	1d33      	adds	r3, r6, #4
 8002036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002038:	6838      	ldr	r0, [r7, #0]
 800203a:	f004 fafd 	bl	8006638 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002050 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af04      	add	r7, sp, #16
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	70fb      	strb	r3, [r7, #3]
 8002062:	460b      	mov	r3, r1
 8002064:	70bb      	strb	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_HCD_HC_Init+0x28>
 8002074:	2302      	movs	r3, #2
 8002076:	e076      	b.n	8002166 <HAL_HCD_HC_Init+0x116>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	333d      	adds	r3, #61	; 0x3d
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	787a      	ldrb	r2, [r7, #1]
 80020a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	3340      	adds	r3, #64	; 0x40
 80020b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020b4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3339      	adds	r3, #57	; 0x39
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	333f      	adds	r3, #63	; 0x3f
 80020d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	78ba      	ldrb	r2, [r7, #2]
 80020e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e4:	b2d0      	uxtb	r0, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	333a      	adds	r3, #58	; 0x3a
 80020f2:	4602      	mov	r2, r0
 80020f4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da09      	bge.n	8002112 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	333b      	adds	r3, #59	; 0x3b
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e008      	b.n	8002124 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	333b      	adds	r3, #59	; 0x3b
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	333c      	adds	r3, #60	; 0x3c
 8002132:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002136:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	787c      	ldrb	r4, [r7, #1]
 800213e:	78ba      	ldrb	r2, [r7, #2]
 8002140:	78f9      	ldrb	r1, [r7, #3]
 8002142:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	4623      	mov	r3, r4
 8002154:	f004 fbb8 	bl	80068c8 <USB_HC_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}

0800216e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_HCD_HC_Halt+0x1e>
 8002188:	2302      	movs	r3, #2
 800218a:	e00f      	b.n	80021ac <HAL_HCD_HC_Halt+0x3e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fda8 	bl	8006cf2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70bb      	strb	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333b      	adds	r3, #59	; 0x3b
 80021dc:	78ba      	ldrb	r2, [r7, #2]
 80021de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	333f      	adds	r3, #63	; 0x3f
 80021ee:	787a      	ldrb	r2, [r7, #1]
 80021f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021f2:	7c3b      	ldrb	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d112      	bne.n	800221e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3342      	adds	r3, #66	; 0x42
 8002206:	2203      	movs	r2, #3
 8002208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333d      	adds	r3, #61	; 0x3d
 8002218:	7f3a      	ldrb	r2, [r7, #28]
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e008      	b.n	8002230 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3342      	adds	r3, #66	; 0x42
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b03      	cmp	r3, #3
 8002234:	f200 80c6 	bhi.w	80023c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002251 	.word	0x08002251
 8002244:	080023b1 	.word	0x080023b1
 8002248:	080022b5 	.word	0x080022b5
 800224c:	08002333 	.word	0x08002333
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002250:	7c3b      	ldrb	r3, [r7, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 80b8 	bne.w	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002258:	78bb      	ldrb	r3, [r7, #2]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 80b4 	bne.w	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002260:	8b3b      	ldrh	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d108      	bne.n	8002278 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3355      	adds	r3, #85	; 0x55
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3355      	adds	r3, #85	; 0x55
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3342      	adds	r3, #66	; 0x42
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229e:	e093      	b.n	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3342      	adds	r3, #66	; 0x42
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
      break;
 80022b2:	e089      	b.n	80023c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022b4:	78bb      	ldrb	r3, [r7, #2]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11d      	bne.n	80022f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3355      	adds	r3, #85	; 0x55
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3342      	adds	r3, #66	; 0x42
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022e0:	e073      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3342      	adds	r3, #66	; 0x42
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
      break;
 80022f4:	e069      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3342      	adds	r3, #66	; 0x42
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
      break;
 800231c:	e055      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3342      	adds	r3, #66	; 0x42
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
      break;
 8002330:	e04b      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002332:	78bb      	ldrb	r3, [r7, #2]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11d      	bne.n	8002374 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3355      	adds	r3, #85	; 0x55
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3342      	adds	r3, #66	; 0x42
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800235e:	e034      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3342      	adds	r3, #66	; 0x42
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
      break;
 8002372:	e02a      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3354      	adds	r3, #84	; 0x54
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3342      	adds	r3, #66	; 0x42
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
      break;
 800239a:	e016      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3342      	adds	r3, #66	; 0x42
 80023aa:	2202      	movs	r2, #2
 80023ac:	701a      	strb	r2, [r3, #0]
      break;
 80023ae:	e00c      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3342      	adds	r3, #66	; 0x42
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023c4:	bf00      	nop
 80023c6:	e000      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3344      	adds	r3, #68	; 0x44
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	8b3a      	ldrh	r2, [r7, #24]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	202c      	movs	r0, #44	; 0x2c
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	440b      	add	r3, r1
 80023ea:	334c      	adds	r3, #76	; 0x4c
 80023ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3360      	adds	r3, #96	; 0x60
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3350      	adds	r3, #80	; 0x50
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3339      	adds	r3, #57	; 0x39
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3361      	adds	r3, #97	; 0x61
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	222c      	movs	r2, #44	; 0x2c
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	3338      	adds	r3, #56	; 0x38
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f004 fb49 	bl	8006ae0 <USB_HC_StartXfer>
 800244e:	4603      	mov	r3, r0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f89f 	bl	80065b2 <USB_GetMode>
 8002474:	4603      	mov	r3, r0
 8002476:	2b01      	cmp	r3, #1
 8002478:	f040 80f6 	bne.w	8002668 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f004 f883 	bl	800658c <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ec 	beq.w	8002666 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 f87a 	bl	800658c <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024a2:	d104      	bne.n	80024ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 f86a 	bl	800658c <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c2:	d104      	bne.n	80024ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 f85a 	bl	800658c <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e2:	d104      	bne.n	80024ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f004 f84a 	bl	800658c <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d103      	bne.n	800250a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f004 f83c 	bl	800658c <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800251a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251e:	d11c      	bne.n	800255a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002528:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800253a:	2110      	movs	r1, #16
 800253c:	6938      	ldr	r0, [r7, #16]
 800253e:	f003 ff2f 	bl	80063a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f003 ff60 	bl	8006408 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f004 f8f4 	bl	800673c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f00b f97d 	bl	800d854 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f004 f814 	bl	800658c <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256e:	d102      	bne.n	8002576 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 f815 	bl	80035a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f004 f806 	bl	800658c <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d106      	bne.n	8002598 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f00b f946 	bl	800d81c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fff5 	bl	800658c <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d101      	bne.n	80025b0 <HAL_HCD_IRQHandler+0x158>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_HCD_IRQHandler+0x15a>
 80025b0:	2300      	movs	r3, #0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0210 	bic.w	r2, r2, #16
 80025c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 ff18 	bl	80033fc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0210 	orr.w	r2, r2, #16
 80025da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 ffd3 	bl	800658c <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025f0:	d13a      	bne.n	8002668 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 fb6a 	bl	8006cd0 <USB_HC_ReadInterrupt>
 80025fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e025      	b.n	8002650 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d018      	beq.n	800264a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262e:	d106      	bne.n	800263e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8ab 	bl	8002792 <HCD_HC_IN_IRQHandler>
 800263c:	e005      	b.n	800264a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fbd7 	bl	8002df8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3d4      	bcc.n	8002604 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	e000      	b.n	8002668 <HAL_HCD_IRQHandler+0x210>
      return;
 8002666:	bf00      	nop
    }
  }
}
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_HCD_Start+0x16>
 8002680:	2302      	movs	r3, #2
 8002682:	e013      	b.n	80026ac <HAL_HCD_Start+0x3e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f004 f8b6 	bl	8006804 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fe10 	bl	80062c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_HCD_Stop+0x16>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e00d      	b.n	80026e6 <HAL_HCD_Stop+0x32>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fc07 	bl	8006eea <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 f858 	bl	80067b0 <USB_ResetPort>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3360      	adds	r3, #96	; 0x60
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3350      	adds	r3, #80	; 0x50
 800274c:	681b      	ldr	r3, [r3, #0]
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f004 f89c 	bl	80068a4 <USB_GetCurrentFrame>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 f877 	bl	8006876 <USB_GetHostSpeed>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d11a      	bne.n	80027f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	2304      	movs	r3, #4
 80027d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3361      	adds	r3, #97	; 0x61
 80027e2:	2206      	movs	r2, #6
 80027e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fa7e 	bl	8006cf2 <USB_HC_Halt>
 80027f6:	e0af      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d11b      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3361      	adds	r3, #97	; 0x61
 8002832:	2207      	movs	r2, #7
 8002834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fa56 	bl	8006cf2 <USB_HC_Halt>
 8002846:	e087      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d109      	bne.n	8002872 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	2320      	movs	r3, #32
 800286e:	6093      	str	r3, [r2, #8]
 8002870:	e072      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d11a      	bne.n	80028be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	2205      	movs	r2, #5
 80028aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 fa1b 	bl	8006cf2 <USB_HC_Halt>
 80028bc:	e04c      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d4:	d11b      	bne.n	800290e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3361      	adds	r3, #97	; 0x61
 80028f8:	2208      	movs	r2, #8
 80028fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f004 f9f3 	bl	8006cf2 <USB_HC_Halt>
 800290c:	e024      	b.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d119      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3361      	adds	r3, #97	; 0x61
 8002944:	2206      	movs	r2, #6
 8002946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f004 f9cd 	bl	8006cf2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296e:	d112      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f004 f9b9 	bl	8006cf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002992:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002994:	e22c      	b.n	8002df0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 80c1 	bne.w	8002b30 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	335c      	adds	r3, #92	; 0x5c
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	461a      	mov	r2, r3
 80029e0:	2301      	movs	r3, #1
 80029e2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	333f      	adds	r3, #63	; 0x3f
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	333f      	adds	r3, #63	; 0x3f
 8002a06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d111      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f96b 	bl	8006cf2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	6093      	str	r3, [r2, #8]
 8002a2e:	e03a      	b.n	8002aa6 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	333f      	adds	r3, #63	; 0x3f
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d009      	beq.n	8002a58 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	333f      	adds	r3, #63	; 0x3f
 8002a52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d126      	bne.n	8002aa6 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a76:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	b2d9      	uxtb	r1, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	202c      	movs	r0, #44	; 0x2c
 8002a94:	fb00 f303 	mul.w	r3, r0, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f00a fee5 	bl	800d870 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d12b      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3348      	adds	r3, #72	; 0x48
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	fb00 f202 	mul.w	r2, r0, r2
 8002ac8:	440a      	add	r2, r1
 8002aca:	3240      	adds	r2, #64	; 0x40
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 818a 	beq.w	8002df0 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3354      	adds	r3, #84	; 0x54
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2d8      	uxtb	r0, r3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3354      	adds	r3, #84	; 0x54
 8002b00:	4602      	mov	r2, r0
 8002b02:	701a      	strb	r2, [r3, #0]
}
 8002b04:	e174      	b.n	8002df0 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	3354      	adds	r3, #84	; 0x54
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2d8      	uxtb	r0, r3
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3354      	adds	r3, #84	; 0x54
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	701a      	strb	r2, [r3, #0]
}
 8002b2e:	e15f      	b.n	8002df0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	f040 80f6 	bne.w	8002d34 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d109      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e0c9      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d109      	bne.n	8002b98 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2205      	movs	r2, #5
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e0b5      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	d009      	beq.n	8002bc0 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d150      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	335c      	adds	r3, #92	; 0x5c
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	202c      	movs	r0, #44	; 0x2c
 8002bd8:	fb00 f303 	mul.w	r3, r0, r3
 8002bdc:	440b      	add	r3, r1
 8002bde:	335c      	adds	r3, #92	; 0x5c
 8002be0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	335c      	adds	r3, #92	; 0x5c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d912      	bls.n	8002c1c <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3360      	adds	r3, #96	; 0x60
 8002c16:	2204      	movs	r2, #4
 8002c18:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c1a:	e073      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3360      	adds	r3, #96	; 0x60
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c44:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c60:	e050      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3361      	adds	r3, #97	; 0x61
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d122      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3360      	adds	r3, #96	; 0x60
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e023      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3361      	adds	r3, #97	; 0x61
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b07      	cmp	r3, #7
 8002cce:	d119      	bne.n	8002d04 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	202c      	movs	r0, #44	; 0x2c
 8002ce8:	fb00 f303 	mul.w	r3, r0, r3
 8002cec:	440b      	add	r3, r1
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	2204      	movs	r2, #4
 8002d02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	461a      	mov	r2, r3
 8002d12:	2302      	movs	r3, #2
 8002d14:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	b2d9      	uxtb	r1, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	fb00 f303 	mul.w	r3, r0, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f00a fd9f 	bl	800d870 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d32:	e05d      	b.n	8002df0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d152      	bne.n	8002df0 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	333f      	adds	r3, #63	; 0x3f
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d111      	bne.n	8002d82 <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	335c      	adds	r3, #92	; 0x5c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 ffb9 	bl	8006cf2 <USB_HC_Halt>
 8002d80:	e02d      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	333f      	adds	r3, #63	; 0x3f
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	333f      	adds	r3, #63	; 0x3f
 8002da4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d119      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	335c      	adds	r3, #92	; 0x5c
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	2203      	movs	r2, #3
 8002dcc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 ff8a 	bl	8006cf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	2310      	movs	r3, #16
 8002dee:	6093      	str	r3, [r2, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d11a      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2304      	movs	r3, #4
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3361      	adds	r3, #97	; 0x61
 8002e48:	2206      	movs	r2, #6
 8002e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 ff4b 	bl	8006cf2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002e5c:	e2ca      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d12e      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2320      	movs	r3, #32
 8002e84:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	333d      	adds	r3, #61	; 0x3d
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 82ac 	bne.w	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	333d      	adds	r3, #61	; 0x3d
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3360      	adds	r3, #96	; 0x60
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 ff11 	bl	8006cf2 <USB_HC_Halt>
}
 8002ed0:	e290      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee8:	d112      	bne.n	8002f10 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fef2 	bl	8006cf2 <USB_HC_Halt>
}
 8002f0e:	e271      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d140      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d111      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333d      	adds	r3, #61	; 0x3d
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2340      	movs	r3, #64	; 0x40
 8002f70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2301      	movs	r3, #1
 8002f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3361      	adds	r3, #97	; 0x61
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fea6 	bl	8006cf2 <USB_HC_Halt>
}
 8002fa6:	e225      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d12c      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3361      	adds	r3, #97	; 0x61
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333d      	adds	r3, #61	; 0x3d
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fe77 	bl	8006cf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2340      	movs	r3, #64	; 0x40
 8003014:	6093      	str	r3, [r2, #8]
}
 8003016:	e1ed      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d11a      	bne.n	8003064 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	461a      	mov	r2, r3
 800303c:	2308      	movs	r3, #8
 800303e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3361      	adds	r3, #97	; 0x61
 800304e:	2205      	movs	r2, #5
 8003050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fe48 	bl	8006cf2 <USB_HC_Halt>
}
 8003062:	e1c7      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b10      	cmp	r3, #16
 8003078:	d123      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	335c      	adds	r3, #92	; 0x5c
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3361      	adds	r3, #97	; 0x61
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fe22 	bl	8006cf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	461a      	mov	r2, r3
 80030bc:	2310      	movs	r3, #16
 80030be:	6093      	str	r3, [r2, #8]
}
 80030c0:	e198      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d11a      	bne.n	800310e <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3361      	adds	r3, #97	; 0x61
 80030e6:	2206      	movs	r2, #6
 80030e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fdfc 	bl	8006cf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	6093      	str	r3, [r2, #8]
}
 800310c:	e172      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d11b      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3361      	adds	r3, #97	; 0x61
 8003134:	2208      	movs	r2, #8
 8003136:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f003 fdd5 	bl	8006cf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800315a:	6093      	str	r3, [r2, #8]
}
 800315c:	e14a      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	f040 813f 	bne.w	80033f4 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3361      	adds	r3, #97	; 0x61
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d17d      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	3360      	adds	r3, #96	; 0x60
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	333f      	adds	r3, #63	; 0x3f
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d00a      	beq.n	80031c6 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	333f      	adds	r3, #63	; 0x3f
 80031be:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	f040 8100 	bne.w	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d113      	bne.n	80031f6 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3355      	adds	r3, #85	; 0x55
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f083 0301 	eor.w	r3, r3, #1
 80031e2:	b2d8      	uxtb	r0, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3355      	adds	r3, #85	; 0x55
 80031f2:	4602      	mov	r2, r0
 80031f4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	f040 80e3 	bne.w	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	334c      	adds	r3, #76	; 0x4c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80d8 	beq.w	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	334c      	adds	r3, #76	; 0x4c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	202c      	movs	r0, #44	; 0x2c
 800322c:	fb00 f202 	mul.w	r2, r0, r2
 8003230:	440a      	add	r2, r1
 8003232:	3240      	adds	r2, #64	; 0x40
 8003234:	8812      	ldrh	r2, [r2, #0]
 8003236:	4413      	add	r3, r2
 8003238:	3b01      	subs	r3, #1
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	202c      	movs	r0, #44	; 0x2c
 8003240:	fb00 f202 	mul.w	r2, r0, r2
 8003244:	440a      	add	r2, r1
 8003246:	3240      	adds	r2, #64	; 0x40
 8003248:	8812      	ldrh	r2, [r2, #0]
 800324a:	fbb3 f3f2 	udiv	r3, r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80b5 	beq.w	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3355      	adds	r3, #85	; 0x55
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f083 0301 	eor.w	r3, r3, #1
 8003270:	b2d8      	uxtb	r0, r3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3355      	adds	r3, #85	; 0x55
 8003280:	4602      	mov	r2, r0
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e09f      	b.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3361      	adds	r3, #97	; 0x61
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d109      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e08b      	b.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3361      	adds	r3, #97	; 0x61
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d109      	bne.n	80032d6 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	2202      	movs	r2, #2
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e077      	b.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3361      	adds	r3, #97	; 0x61
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d109      	bne.n	80032fe <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3360      	adds	r3, #96	; 0x60
 80032f8:	2205      	movs	r2, #5
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e063      	b.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3361      	adds	r3, #97	; 0x61
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d009      	beq.n	8003326 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3361      	adds	r3, #97	; 0x61
 8003320:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003322:	2b08      	cmp	r3, #8
 8003324:	d14f      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	335c      	adds	r3, #92	; 0x5c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	202c      	movs	r0, #44	; 0x2c
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	440b      	add	r3, r1
 8003344:	335c      	adds	r3, #92	; 0x5c
 8003346:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	335c      	adds	r3, #92	; 0x5c
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d912      	bls.n	8003382 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	335c      	adds	r3, #92	; 0x5c
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3360      	adds	r3, #96	; 0x60
 800337c:	2204      	movs	r2, #4
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e021      	b.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3360      	adds	r3, #96	; 0x60
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033aa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033b2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	2302      	movs	r3, #2
 80033d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	b2d9      	uxtb	r1, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	202c      	movs	r0, #44	; 0x2c
 80033e2:	fb00 f303 	mul.w	r3, r0, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3360      	adds	r3, #96	; 0x60
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f00a fa3e 	bl	800d870 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	0c5b      	lsrs	r3, r3, #17
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003430:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d004      	beq.n	8003442 <HCD_RXQLVL_IRQHandler+0x46>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b05      	cmp	r3, #5
 800343c:	f000 80a9 	beq.w	8003592 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003440:	e0aa      	b.n	8003598 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a6 	beq.w	8003596 <HCD_RXQLVL_IRQHandler+0x19a>
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	3344      	adds	r3, #68	; 0x44
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 809b 	beq.w	8003596 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3350      	adds	r3, #80	; 0x50
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	441a      	add	r2, r3
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	202c      	movs	r0, #44	; 0x2c
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	440b      	add	r3, r1
 8003480:	334c      	adds	r3, #76	; 0x4c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d87a      	bhi.n	800357e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3344      	adds	r3, #68	; 0x44
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	b292      	uxth	r2, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f003 f81b 	bl	80064dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	212c      	movs	r1, #44	; 0x2c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	3344      	adds	r3, #68	; 0x44
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	441a      	add	r2, r3
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	202c      	movs	r0, #44	; 0x2c
 80034c0:	fb00 f303 	mul.w	r3, r0, r3
 80034c4:	440b      	add	r3, r1
 80034c6:	3344      	adds	r3, #68	; 0x44
 80034c8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3350      	adds	r3, #80	; 0x50
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	441a      	add	r2, r3
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	202c      	movs	r0, #44	; 0x2c
 80034e4:	fb00 f303 	mul.w	r3, r0, r3
 80034e8:	440b      	add	r3, r1
 80034ea:	3350      	adds	r3, #80	; 0x50
 80034ec:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	0cdb      	lsrs	r3, r3, #19
 80034fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003502:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	3340      	adds	r3, #64	; 0x40
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4293      	cmp	r3, r2
 800351a:	d13c      	bne.n	8003596 <HCD_RXQLVL_IRQHandler+0x19a>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d039      	beq.n	8003596 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003538:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003540:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3354      	adds	r3, #84	; 0x54
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f083 0301 	eor.w	r3, r3, #1
 8003568:	b2d8      	uxtb	r0, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3354      	adds	r3, #84	; 0x54
 8003578:	4602      	mov	r2, r0
 800357a:	701a      	strb	r2, [r3, #0]
      break;
 800357c:	e00b      	b.n	8003596 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3360      	adds	r3, #96	; 0x60
 800358c:	2204      	movs	r2, #4
 800358e:	701a      	strb	r2, [r3, #0]
      break;
 8003590:	e001      	b.n	8003596 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003596:	bf00      	nop
  }
}
 8003598:	bf00      	nop
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d10b      	bne.n	80035f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f00a f928 	bl	800d838 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d132      	bne.n	8003660 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f043 0308 	orr.w	r3, r3, #8
 8003600:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d126      	bne.n	800365a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d113      	bne.n	800363c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800361a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800361e:	d106      	bne.n	800362e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f003 f888 	bl	800673c <USB_InitFSLSPClkSel>
 800362c:	e011      	b.n	8003652 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f003 f881 	bl	800673c <USB_InitFSLSPClkSel>
 800363a:	e00a      	b.n	8003652 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364a:	461a      	mov	r2, r3
 800364c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003650:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f00a f91a 	bl	800d88c <HAL_HCD_PortEnabled_Callback>
 8003658:	e002      	b.n	8003660 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f00a f924 	bl	800d8a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b20      	cmp	r3, #32
 8003668:	d103      	bne.n	8003672 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0320 	orr.w	r3, r3, #32
 8003670:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6013      	str	r3, [r2, #0]
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e081      	b.n	800379c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fd ff99 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2224      	movs	r2, #36	; 0x24
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	e006      	b.n	800370e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800370c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d104      	bne.n	8003720 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800371e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003742:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69d9      	ldr	r1, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	461a      	mov	r2, r3
 80037b0:	460b      	mov	r3, r1
 80037b2:	817b      	strh	r3, [r7, #10]
 80037b4:	4613      	mov	r3, r2
 80037b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	f040 80da 	bne.w	800397a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2C_Master_Transmit+0x30>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0d3      	b.n	800397c <HAL_I2C_Master_Transmit+0x1d8>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037dc:	f7fe f8d2 	bl	8001984 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2319      	movs	r3, #25
 80037e8:	2201      	movs	r2, #1
 80037ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f9e6 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0be      	b.n	800397c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2221      	movs	r2, #33	; 0x21
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2210      	movs	r2, #16
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2bff      	cmp	r3, #255	; 0xff
 800382e:	d90e      	bls.n	800384e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	22ff      	movs	r2, #255	; 0xff
 8003834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	b2da      	uxtb	r2, r3
 800383c:	8979      	ldrh	r1, [r7, #10]
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_I2C_Master_Transmit+0x1e0>)
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fbdc 	bl	8004004 <I2C_TransferConfig>
 800384c:	e06c      	b.n	8003928 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	b2da      	uxtb	r2, r3
 800385e:	8979      	ldrh	r1, [r7, #10]
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_I2C_Master_Transmit+0x1e0>)
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fbcb 	bl	8004004 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800386e:	e05b      	b.n	8003928 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	6a39      	ldr	r1, [r7, #32]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f9e3 	bl	8003c40 <I2C_WaitOnTXISFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e07b      	b.n	800397c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d034      	beq.n	8003928 <HAL_I2C_Master_Transmit+0x184>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d130      	bne.n	8003928 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f975 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04d      	b.n	800397c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2bff      	cmp	r3, #255	; 0xff
 80038e8:	d90e      	bls.n	8003908 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	22ff      	movs	r2, #255	; 0xff
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fb7f 	bl	8004004 <I2C_TransferConfig>
 8003906:	e00f      	b.n	8003928 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	b2da      	uxtb	r2, r3
 8003918:	8979      	ldrh	r1, [r7, #10]
 800391a:	2300      	movs	r3, #0
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fb6e 	bl	8004004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d19e      	bne.n	8003870 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	6a39      	ldr	r1, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f9c2 	bl	8003cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e01a      	b.n	800397c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2220      	movs	r2, #32
 800394c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_I2C_Master_Transmit+0x1e4>)
 800395a:	400b      	ands	r3, r1
 800395c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	80002000 	.word	0x80002000
 8003988:	fe00e800 	.word	0xfe00e800

0800398c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	461a      	mov	r2, r3
 8003998:	460b      	mov	r3, r1
 800399a:	817b      	strh	r3, [r7, #10]
 800399c:	4613      	mov	r3, r2
 800399e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	f040 80db 	bne.w	8003b64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_I2C_Master_Receive+0x30>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0d4      	b.n	8003b66 <HAL_I2C_Master_Receive+0x1da>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039c4:	f7fd ffde 	bl	8001984 <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	2319      	movs	r3, #25
 80039d0:	2201      	movs	r2, #1
 80039d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f8f2 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0bf      	b.n	8003b66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2222      	movs	r2, #34	; 0x22
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2210      	movs	r2, #16
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	893a      	ldrh	r2, [r7, #8]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	d90e      	bls.n	8003a36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	22ff      	movs	r2, #255	; 0xff
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	8979      	ldrh	r1, [r7, #10]
 8003a26:	4b52      	ldr	r3, [pc, #328]	; (8003b70 <HAL_I2C_Master_Receive+0x1e4>)
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fae8 	bl	8004004 <I2C_TransferConfig>
 8003a34:	e06d      	b.n	8003b12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8979      	ldrh	r1, [r7, #10]
 8003a48:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_I2C_Master_Receive+0x1e4>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fad7 	bl	8004004 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a56:	e05c      	b.n	8003b12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f96b 	bl	8003d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e07c      	b.n	8003b66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d034      	beq.n	8003b12 <HAL_I2C_Master_Receive+0x186>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d130      	bne.n	8003b12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f880 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e04d      	b.n	8003b66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2bff      	cmp	r3, #255	; 0xff
 8003ad2:	d90e      	bls.n	8003af2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fa8a 	bl	8004004 <I2C_TransferConfig>
 8003af0:	e00f      	b.n	8003b12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	8979      	ldrh	r1, [r7, #10]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fa79 	bl	8004004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d19d      	bne.n	8003a58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f8cd 	bl	8003cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e01a      	b.n	8003b66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_I2C_Master_Receive+0x1e8>)
 8003b44:	400b      	ands	r3, r1
 8003b46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	80002400 	.word	0x80002400
 8003b74:	fe00e800 	.word	0xfe00e800

08003b78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d103      	bne.n	8003b96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d007      	beq.n	8003bb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	619a      	str	r2, [r3, #24]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd0:	e022      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d01e      	beq.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fd fed3 	bl	8001984 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d113      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e00f      	b.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d0cd      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4c:	e02c      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f8ea 	bl	8003e2c <I2C_IsErrorOccurred>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e02a      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d01e      	beq.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fd fe8b 	bl	8001984 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d113      	bne.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e007      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d1cb      	bne.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ccc:	e028      	b.n	8003d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f8aa 	bl	8003e2c <I2C_IsErrorOccurred>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e026      	b.n	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fd fe4f 	bl	8001984 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d113      	bne.n	8003d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d1cf      	bne.n	8003cce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d44:	e064      	b.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f86e 	bl	8003e2c <I2C_IsErrorOccurred>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e062      	b.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d138      	bne.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d105      	bne.n	8003d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e04e      	b.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d107      	bne.n	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d9e:	e002      	b.n	8003da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e022      	b.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fd fdd3 	bl	8001984 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10f      	bne.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e007      	b.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d193      	bne.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	fe00e800 	.word	0xfe00e800

08003e2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d075      	beq.n	8003f44 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e60:	e056      	b.n	8003f10 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d052      	beq.n	8003f10 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7fd fd8b 	bl	8001984 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <I2C_IsErrorOccurred+0x54>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d147      	bne.n	8003f10 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	d12e      	bne.n	8003f02 <I2C_IsErrorOccurred+0xd6>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eaa:	d02a      	beq.n	8003f02 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d027      	beq.n	8003f02 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ec2:	f7fd fd5f 	bl	8001984 <HAL_GetTick>
 8003ec6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec8:	e01b      	b.n	8003f02 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003eca:	f7fd fd5b 	bl	8001984 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b19      	cmp	r3, #25
 8003ed6:	d914      	bls.n	8003f02 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d1dc      	bne.n	8003eca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d003      	beq.n	8003f26 <I2C_IsErrorOccurred+0xfa>
 8003f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d09d      	beq.n	8003e62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2220      	movs	r2, #32
 8003f34:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	f043 0308 	orr.w	r3, r3, #8
 8003f7e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003faa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01c      	beq.n	8003ff4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff fddc 	bl	8003b78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <I2C_IsErrorOccurred+0x1d4>)
 8003fcc:	400b      	ands	r3, r1
 8003fce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	; 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	fe00e800 	.word	0xfe00e800

08004004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	817b      	strh	r3, [r7, #10]
 8004012:	4613      	mov	r3, r2
 8004014:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004016:	897b      	ldrh	r3, [r7, #10]
 8004018:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800401c:	7a7b      	ldrb	r3, [r7, #9]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004024:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	4313      	orrs	r3, r2
 800402e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004032:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	0d5b      	lsrs	r3, r3, #21
 800403e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <I2C_TransferConfig+0x60>)
 8004044:	430b      	orrs	r3, r1
 8004046:	43db      	mvns	r3, r3
 8004048:	ea02 0103 	and.w	r1, r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	03ff63ff 	.word	0x03ff63ff

08004068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	d138      	bne.n	80040f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004088:	2302      	movs	r3, #2
 800408a:	e032      	b.n	80040f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	; 0x24
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b20      	cmp	r3, #32
 8004112:	d139      	bne.n	8004188 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800411e:	2302      	movs	r3, #2
 8004120:	e033      	b.n	800418a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2224      	movs	r2, #36	; 0x24
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004150:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40007000 	.word	0x40007000

080041b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	d130      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d038      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2232      	movs	r2, #50	; 0x32
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004218:	e002      	b.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b01      	subs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d102      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f2      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004240:	d110      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d007      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000
 8004278:	20000000 	.word	0x20000000
 800427c:	431bde83 	.word	0x431bde83

08004280 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_PWREx_EnableVddUSB+0x1c>)
 800428a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428e:	6053      	str	r3, [r2, #4]
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e3c6      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b2:	4ba1      	ldr	r3, [pc, #644]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042bc:	4b9e      	ldr	r3, [pc, #632]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80e4 	beq.w	800449c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <HAL_RCC_OscConfig+0x4a>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	f040 808b 	bne.w	80043f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	f040 8087 	bne.w	80043f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ea:	4b93      	ldr	r3, [pc, #588]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_RCC_OscConfig+0x62>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e39e      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <HAL_RCC_OscConfig+0x7c>
 8004312:	4b89      	ldr	r3, [pc, #548]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431a:	e005      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
 800431c:	4b86      	ldr	r3, [pc, #536]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004328:	4293      	cmp	r3, r2
 800432a:	d223      	bcs.n	8004374 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fd53 	bl	8004ddc <RCC_SetFlashLatencyFromMSIRange>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e37f      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004340:	4b7d      	ldr	r3, [pc, #500]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004346:	f043 0308 	orr.w	r3, r3, #8
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b7a      	ldr	r3, [pc, #488]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4977      	ldr	r1, [pc, #476]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800435e:	4b76      	ldr	r3, [pc, #472]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	4972      	ldr	r1, [pc, #456]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
 8004372:	e025      	b.n	80043c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004374:	4b70      	ldr	r3, [pc, #448]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6f      	ldr	r2, [pc, #444]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b6d      	ldr	r3, [pc, #436]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	496a      	ldr	r1, [pc, #424]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004392:	4b69      	ldr	r3, [pc, #420]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	4965      	ldr	r1, [pc, #404]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fd13 	bl	8004ddc <RCC_SetFlashLatencyFromMSIRange>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e33f      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c0:	f000 fc48 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b5c      	ldr	r3, [pc, #368]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	495a      	ldr	r1, [pc, #360]	; (800453c <HAL_RCC_OscConfig+0x29c>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	4a58      	ldr	r2, [pc, #352]	; (8004540 <HAL_RCC_OscConfig+0x2a0>)
 80043de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043e0:	4b58      	ldr	r3, [pc, #352]	; (8004544 <HAL_RCC_OscConfig+0x2a4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fd fa7d 	bl	80018e4 <HAL_InitTick>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d052      	beq.n	800449a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	e323      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d032      	beq.n	8004466 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004400:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a4c      	ldr	r2, [pc, #304]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800440c:	f7fd faba 	bl	8001984 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004414:	f7fd fab6 	bl	8001984 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e30c      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004426:	4b44      	ldr	r3, [pc, #272]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004432:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a40      	ldr	r2, [pc, #256]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004438:	f043 0308 	orr.w	r3, r3, #8
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	493b      	ldr	r1, [pc, #236]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800444c:	4313      	orrs	r3, r2
 800444e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	4936      	ldr	r1, [pc, #216]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
 8004464:	e01a      	b.n	800449c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a33      	ldr	r2, [pc, #204]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004472:	f7fd fa87 	bl	8001984 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800447a:	f7fd fa83 	bl	8001984 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e2d9      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x1da>
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800449a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d074      	beq.n	8004592 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d005      	beq.n	80044ba <HAL_RCC_OscConfig+0x21a>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d10e      	bne.n	80044d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d10b      	bne.n	80044d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d064      	beq.n	8004590 <HAL_RCC_OscConfig+0x2f0>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d160      	bne.n	8004590 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e2b6      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x24a>
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e01d      	b.n	8004526 <HAL_RCC_OscConfig+0x286>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f2:	d10c      	bne.n	800450e <HAL_RCC_OscConfig+0x26e>
 80044f4:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 80044fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0x286>
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a06      	ldr	r2, [pc, #24]	; (8004538 <HAL_RCC_OscConfig+0x298>)
 8004520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004524:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01c      	beq.n	8004568 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fa29 	bl	8001984 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004534:	e011      	b.n	800455a <HAL_RCC_OscConfig+0x2ba>
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	0800eb28 	.word	0x0800eb28
 8004540:	20000000 	.word	0x20000000
 8004544:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd fa1c 	bl	8001984 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e272      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800455a:	4baf      	ldr	r3, [pc, #700]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x2a8>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fa0c 	bl	8001984 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fd fa08 	bl	8001984 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e25e      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004582:	4ba5      	ldr	r3, [pc, #660]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x2d0>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d060      	beq.n	8004660 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_OscConfig+0x310>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d119      	bne.n	80045de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d116      	bne.n	80045de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b0:	4b99      	ldr	r3, [pc, #612]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_OscConfig+0x328>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e23b      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b93      	ldr	r3, [pc, #588]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	4990      	ldr	r1, [pc, #576]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	e040      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d023      	beq.n	800462e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e6:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a8b      	ldr	r2, [pc, #556]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd f9c7 	bl	8001984 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fd f9c3 	bl	8001984 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e219      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460c:	4b82      	ldr	r3, [pc, #520]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	497c      	ldr	r1, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
 800462c:	e018      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a79      	ldr	r2, [pc, #484]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fd f9a3 	bl	8001984 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7fd f99f 	bl	8001984 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e1f5      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004654:	4b70      	ldr	r3, [pc, #448]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d03c      	beq.n	80046e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01c      	beq.n	80046ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004674:	4b68      	ldr	r3, [pc, #416]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	4a67      	ldr	r2, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd f97e 	bl	8001984 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fd f97a 	bl	8001984 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1d0      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469e:	4b5e      	ldr	r3, [pc, #376]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <HAL_RCC_OscConfig+0x3ec>
 80046ac:	e01b      	b.n	80046e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	4b5a      	ldr	r3, [pc, #360]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b4:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fd f961 	bl	8001984 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fd f95d 	bl	8001984 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e1b3      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d8:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80a6 	beq.w	8004840 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f4:	2300      	movs	r3, #0
 80046f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046f8:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10d      	bne.n	8004720 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6593      	str	r3, [r2, #88]	; 0x58
 8004710:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004720:	4b3e      	ldr	r3, [pc, #248]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d118      	bne.n	800475e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3a      	ldr	r2, [pc, #232]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 8004732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004738:	f7fd f924 	bl	8001984 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004740:	f7fd f920 	bl	8001984 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e176      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004752:	4b32      	ldr	r3, [pc, #200]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d108      	bne.n	8004778 <HAL_RCC_OscConfig+0x4d8>
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004776:	e024      	b.n	80047c2 <HAL_RCC_OscConfig+0x522>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d110      	bne.n	80047a2 <HAL_RCC_OscConfig+0x502>
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a24      	ldr	r2, [pc, #144]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a0:	e00f      	b.n	80047c2 <HAL_RCC_OscConfig+0x522>
 80047a2:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd f8db 	bl	8001984 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd f8d7 	bl	8001984 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e12b      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ed      	beq.n	80047d2 <HAL_RCC_OscConfig+0x532>
 80047f6:	e01a      	b.n	800482e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd f8c4 	bl	8001984 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047fe:	e00f      	b.n	8004820 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fd f8c0 	bl	8001984 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d906      	bls.n	8004820 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e114      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004820:	4b89      	ldr	r3, [pc, #548]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e8      	bne.n	8004800 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004834:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	4a83      	ldr	r2, [pc, #524]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 800483a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80fa 	beq.w	8004a3e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	2b02      	cmp	r3, #2
 8004850:	f040 80d0 	bne.w	80049f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004854:	4b7c      	ldr	r3, [pc, #496]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0203 	and.w	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	429a      	cmp	r2, r3
 8004866:	d130      	bne.n	80048ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	3b01      	subs	r3, #1
 8004874:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d127      	bne.n	80048ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d11f      	bne.n	80048ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004894:	2a07      	cmp	r2, #7
 8004896:	bf14      	ite	ne
 8004898:	2201      	movne	r2, #1
 800489a:	2200      	moveq	r2, #0
 800489c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489e:	4293      	cmp	r3, r2
 80048a0:	d113      	bne.n	80048ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d109      	bne.n	80048ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d06e      	beq.n	80049a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d069      	beq.n	80049a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048d0:	4b5d      	ldr	r3, [pc, #372]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048dc:	4b5a      	ldr	r3, [pc, #360]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0a9      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048ec:	4b56      	ldr	r3, [pc, #344]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a55      	ldr	r2, [pc, #340]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80048f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048f8:	f7fd f844 	bl	8001984 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fd f840 	bl	8001984 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e096      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004912:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <HAL_RCC_OscConfig+0x7ac>)
 8004924:	4013      	ands	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800492e:	3a01      	subs	r2, #1
 8004930:	0112      	lsls	r2, r2, #4
 8004932:	4311      	orrs	r1, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004938:	0212      	lsls	r2, r2, #8
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	3a01      	subs	r2, #1
 8004944:	0552      	lsls	r2, r2, #21
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800494c:	0852      	lsrs	r2, r2, #1
 800494e:	3a01      	subs	r2, #1
 8004950:	0652      	lsls	r2, r2, #25
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004958:	0912      	lsrs	r2, r2, #4
 800495a:	0452      	lsls	r2, r2, #17
 800495c:	430a      	orrs	r2, r1
 800495e:	493a      	ldr	r1, [pc, #232]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004964:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a37      	ldr	r2, [pc, #220]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004970:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800497c:	f7fd f802 	bl	8001984 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fc fffe 	bl	8001984 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e054      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a2:	e04c      	b.n	8004a3e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e04b      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d144      	bne.n	8004a3e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049b4:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049cc:	f7fc ffda 	bl	8001984 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fc ffd6 	bl	8001984 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e02c      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x734>
 80049f2:	e024      	b.n	8004a3e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d01f      	beq.n	8004a3a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fc ffbd 	bl	8001984 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fc ffb9 	bl	8001984 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e00f      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	4905      	ldr	r1, [pc, #20]	; (8004a48 <HAL_RCC_OscConfig+0x7a8>)
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <HAL_RCC_OscConfig+0x7b0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	60cb      	str	r3, [r1, #12]
 8004a38:	e001      	b.n	8004a3e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	f99d808c 	.word	0xf99d808c
 8004a50:	feeefffc 	.word	0xfeeefffc

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0e7      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b72      	ldr	r3, [pc, #456]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4970      	ldr	r1, [pc, #448]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b6e      	ldr	r3, [pc, #440]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0cf      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d010      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d908      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4960      	ldr	r1, [pc, #384]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d04c      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	4b5a      	ldr	r3, [pc, #360]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d121      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0a6      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af2:	4b54      	ldr	r3, [pc, #336]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d115      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e09a      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e08e      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e086      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b2a:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 0203 	bic.w	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4943      	ldr	r1, [pc, #268]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fc ff22 	bl	8001984 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b44:	f7fc ff1e 	bl	8001984 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e06e      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5a:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 020c 	and.w	r2, r3, #12
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d1eb      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d208      	bcs.n	8004b9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b88:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	492b      	ldr	r1, [pc, #172]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9a:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d210      	bcs.n	8004bca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba8:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 0207 	bic.w	r2, r3, #7
 8004bb0:	4923      	ldr	r1, [pc, #140]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCC_ClockConfig+0x1ec>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e036      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4918      	ldr	r1, [pc, #96]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4910      	ldr	r1, [pc, #64]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c08:	f000 f824 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	490b      	ldr	r1, [pc, #44]	; (8004c48 <HAL_RCC_ClockConfig+0x1f4>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <HAL_RCC_ClockConfig+0x1f8>)
 8004c26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_ClockConfig+0x1fc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fc fe59 	bl	80018e4 <HAL_InitTick>
 8004c32:	4603      	mov	r3, r0
 8004c34:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c36:	7afb      	ldrb	r3, [r7, #11]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40021000 	.word	0x40021000
 8004c48:	0800eb28 	.word	0x0800eb28
 8004c4c:	20000000 	.word	0x20000000
 8004c50:	20000004 	.word	0x20000004

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b089      	sub	sp, #36	; 0x24
 8004c58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c62:	4b3e      	ldr	r3, [pc, #248]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d121      	bne.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d11e      	bne.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c88:	4b34      	ldr	r3, [pc, #208]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c94:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cb0:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d102      	bne.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ccc:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e004      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cd8:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d134      	bne.n	8004d4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCC_GetSysClockFreq+0xa6>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d003      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0xac>
 8004cf8:	e005      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cfc:	617b      	str	r3, [r7, #20]
      break;
 8004cfe:	e005      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d02:	617b      	str	r3, [r7, #20]
      break;
 8004d04:	e002      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	617b      	str	r3, [r7, #20]
      break;
 8004d0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	3301      	adds	r3, #1
 8004d18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	fb02 f203 	mul.w	r2, r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	0e5b      	lsrs	r3, r3, #25
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3724      	adds	r7, #36	; 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800eb40 	.word	0x0800eb40
 8004d64:	00f42400 	.word	0x00f42400
 8004d68:	007a1200 	.word	0x007a1200

08004d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000000 	.word	0x20000000

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d88:	f7ff fff0 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4904      	ldr	r1, [pc, #16]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021000 	.word	0x40021000
 8004dac:	0800eb38 	.word	0x0800eb38

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004db4:	f7ff ffda 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0adb      	lsrs	r3, r3, #11
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4904      	ldr	r1, [pc, #16]	; (8004dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	0800eb38 	.word	0x0800eb38

08004ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de8:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004df4:	f7ff f9e0 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004df8:	6178      	str	r0, [r7, #20]
 8004dfa:	e014      	b.n	8004e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	4a24      	ldr	r2, [pc, #144]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6593      	str	r3, [r2, #88]	; 0x58
 8004e08:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e14:	f7ff f9d0 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d10b      	bne.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d919      	bls.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2ba0      	cmp	r3, #160	; 0xa0
 8004e38:	d902      	bls.n	8004e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e013      	b.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e40:	2301      	movs	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e010      	b.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d902      	bls.n	8004e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	e00a      	b.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d102      	bne.n	8004e5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e58:	2302      	movs	r3, #2
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	e004      	b.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d101      	bne.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e64:	2301      	movs	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 0207 	bic.w	r2, r3, #7
 8004e70:	4909      	ldr	r1, [pc, #36]	; (8004e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d001      	beq.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40022000 	.word	0x40022000

08004e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d041      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ec0:	d02a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ec2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ec6:	d824      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ed2:	d81e      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004edc:	d010      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ede:	e018      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ee0:	4b86      	ldr	r3, [pc, #536]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a85      	ldr	r2, [pc, #532]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eec:	e015      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 facb 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004efe:	e00c      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3320      	adds	r3, #32
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fbb6 	bl	8005678 <RCCEx_PLLSAI2_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f10:	e003      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	74fb      	strb	r3, [r7, #19]
      break;
 8004f16:	e000      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f1a:	7cfb      	ldrb	r3, [r7, #19]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f20:	4b76      	ldr	r3, [pc, #472]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2e:	4973      	ldr	r1, [pc, #460]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f36:	e001      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d041      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f50:	d02a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f56:	d824      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f62:	d81e      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f6e:	e018      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f70:	4b62      	ldr	r3, [pc, #392]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a61      	ldr	r2, [pc, #388]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f7c:	e015      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fa83 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f8e:	e00c      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3320      	adds	r3, #32
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fb6e 	bl	8005678 <RCCEx_PLLSAI2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fa0:	e003      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fb0:	4b52      	ldr	r3, [pc, #328]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fbe:	494f      	ldr	r1, [pc, #316]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fc6:	e001      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a0 	beq.w	800511a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fde:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff4:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	4a40      	ldr	r2, [pc, #256]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8005000:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500c:	2301      	movs	r3, #1
 800500e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005010:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a3a      	ldr	r2, [pc, #232]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800501c:	f7fc fcb2 	bl	8001984 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005022:	e009      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005024:	f7fc fcae 	bl	8001984 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d902      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	74fb      	strb	r3, [r7, #19]
        break;
 8005036:	e005      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005038:	4b31      	ldr	r3, [pc, #196]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ef      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d15c      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800504a:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	429a      	cmp	r2, r3
 8005066:	d019      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005074:	4b21      	ldr	r3, [pc, #132]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	4a20      	ldr	r2, [pc, #128]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc fc6d 	bl	8001984 <HAL_GetTick>
 80050aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ac:	e00b      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ae:	f7fc fc69 	bl	8001984 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050bc:	4293      	cmp	r3, r2
 80050be:	d902      	bls.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	74fb      	strb	r3, [r7, #19]
            break;
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ec      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ea:	4904      	ldr	r1, [pc, #16]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050f2:	e009      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
 80050f8:	e006      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005108:	7c7b      	ldrb	r3, [r7, #17]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d105      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510e:	4b9e      	ldr	r3, [pc, #632]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	4a9d      	ldr	r2, [pc, #628]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005118:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005126:	4b98      	ldr	r3, [pc, #608]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f023 0203 	bic.w	r2, r3, #3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	4994      	ldr	r1, [pc, #592]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005148:	4b8f      	ldr	r3, [pc, #572]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f023 020c 	bic.w	r2, r3, #12
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	498c      	ldr	r1, [pc, #560]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800516a:	4b87      	ldr	r3, [pc, #540]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	4983      	ldr	r1, [pc, #524]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800518c:	4b7e      	ldr	r3, [pc, #504]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	497b      	ldr	r1, [pc, #492]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051ae:	4b76      	ldr	r3, [pc, #472]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051bc:	4972      	ldr	r1, [pc, #456]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d0:	4b6d      	ldr	r3, [pc, #436]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051de:	496a      	ldr	r1, [pc, #424]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051f2:	4b65      	ldr	r3, [pc, #404]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005200:	4961      	ldr	r1, [pc, #388]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005214:	4b5c      	ldr	r3, [pc, #368]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005222:	4959      	ldr	r1, [pc, #356]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005236:	4b54      	ldr	r3, [pc, #336]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	4950      	ldr	r1, [pc, #320]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005258:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	4948      	ldr	r1, [pc, #288]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005288:	493f      	ldr	r1, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d028      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052aa:	4937      	ldr	r1, [pc, #220]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ba:	d106      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052bc:	4b32      	ldr	r3, [pc, #200]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a31      	ldr	r2, [pc, #196]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052c6:	60d3      	str	r3, [r2, #12]
 80052c8:	e011      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d2:	d10c      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	2101      	movs	r1, #1
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f8d8 	bl	8005490 <RCCEx_PLLSAI1_Config>
 80052e0:	4603      	mov	r3, r0
 80052e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d028      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052fa:	4b23      	ldr	r3, [pc, #140]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	491f      	ldr	r1, [pc, #124]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005318:	d106      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005324:	60d3      	str	r3, [r2, #12]
 8005326:	e011      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005330:	d10c      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3304      	adds	r3, #4
 8005336:	2101      	movs	r1, #1
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f8a9 	bl	8005490 <RCCEx_PLLSAI1_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02b      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005366:	4908      	ldr	r1, [pc, #32]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005376:	d109      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a02      	ldr	r2, [pc, #8]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005382:	60d3      	str	r3, [r2, #12]
 8005384:	e014      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005394:	d10c      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f877 	bl	8005490 <RCCEx_PLLSAI1_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d02f      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053bc:	4b2b      	ldr	r3, [pc, #172]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ca:	4928      	ldr	r1, [pc, #160]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053da:	d10d      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	2102      	movs	r1, #2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f854 	bl	8005490 <RCCEx_PLLSAI1_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	74bb      	strb	r3, [r7, #18]
 80053f6:	e011      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005400:	d10c      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3320      	adds	r3, #32
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f935 	bl	8005678 <RCCEx_PLLSAI2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005436:	490d      	ldr	r1, [pc, #52]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545a:	4904      	ldr	r1, [pc, #16]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005462:	7cbb      	ldrb	r3, [r7, #18]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000

08005470 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a04      	ldr	r2, [pc, #16]	; (800548c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000

08005490 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800549e:	4b75      	ldr	r3, [pc, #468]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d018      	beq.n	80054dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054aa:	4b72      	ldr	r3, [pc, #456]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0203 	and.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10d      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
       ||
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054c2:	4b6c      	ldr	r3, [pc, #432]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
       ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d047      	beq.n	8005566 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
 80054da:	e044      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d018      	beq.n	8005516 <RCCEx_PLLSAI1_Config+0x86>
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d825      	bhi.n	8005534 <RCCEx_PLLSAI1_Config+0xa4>
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <RCCEx_PLLSAI1_Config+0x62>
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d009      	beq.n	8005504 <RCCEx_PLLSAI1_Config+0x74>
 80054f0:	e020      	b.n	8005534 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054f2:	4b60      	ldr	r3, [pc, #384]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11d      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005502:	e01a      	b.n	800553a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005504:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d116      	bne.n	800553e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005514:	e013      	b.n	800553e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005516:	4b57      	ldr	r3, [pc, #348]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005522:	4b54      	ldr	r3, [pc, #336]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005532:	e006      	b.n	8005542 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	e004      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005542:	bf00      	nop
    }

    if(status == HAL_OK)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800554a:	4b4a      	ldr	r3, [pc, #296]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	430b      	orrs	r3, r1
 8005560:	4944      	ldr	r1, [pc, #272]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d17d      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800556c:	4b41      	ldr	r3, [pc, #260]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a40      	ldr	r2, [pc, #256]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fc fa04 	bl	8001984 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800557e:	e009      	b.n	8005594 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005580:	f7fc fa00 	bl	8001984 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d902      	bls.n	8005594 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	73fb      	strb	r3, [r7, #15]
        break;
 8005592:	e005      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1ef      	bne.n	8005580 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d160      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d111      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	0211      	lsls	r1, r2, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	0912      	lsrs	r2, r2, #4
 80055c4:	0452      	lsls	r2, r2, #17
 80055c6:	430a      	orrs	r2, r1
 80055c8:	492a      	ldr	r1, [pc, #168]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
 80055ce:	e027      	b.n	8005620 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d112      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d6:	4b27      	ldr	r3, [pc, #156]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6892      	ldr	r2, [r2, #8]
 80055e6:	0211      	lsls	r1, r2, #8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6912      	ldr	r2, [r2, #16]
 80055ec:	0852      	lsrs	r2, r2, #1
 80055ee:	3a01      	subs	r2, #1
 80055f0:	0552      	lsls	r2, r2, #21
 80055f2:	430a      	orrs	r2, r1
 80055f4:	491f      	ldr	r1, [pc, #124]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]
 80055fa:	e011      	b.n	8005620 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	0211      	lsls	r1, r2, #8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6952      	ldr	r2, [r2, #20]
 8005612:	0852      	lsrs	r2, r2, #1
 8005614:	3a01      	subs	r2, #1
 8005616:	0652      	lsls	r2, r2, #25
 8005618:	430a      	orrs	r2, r1
 800561a:	4916      	ldr	r1, [pc, #88]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800562a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fc f9aa 	bl	8001984 <HAL_GetTick>
 8005630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005632:	e009      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005634:	f7fc f9a6 	bl	8001984 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d902      	bls.n	8005648 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
          break;
 8005646:	e005      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	4904      	ldr	r1, [pc, #16]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000

08005678 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005686:	4b6a      	ldr	r3, [pc, #424]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005692:	4b67      	ldr	r3, [pc, #412]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0203 	and.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d10d      	bne.n	80056be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
       ||
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056aa:	4b61      	ldr	r3, [pc, #388]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
       ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d047      	beq.n	800574e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e044      	b.n	800574e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d018      	beq.n	80056fe <RCCEx_PLLSAI2_Config+0x86>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d825      	bhi.n	800571c <RCCEx_PLLSAI2_Config+0xa4>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d002      	beq.n	80056da <RCCEx_PLLSAI2_Config+0x62>
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d009      	beq.n	80056ec <RCCEx_PLLSAI2_Config+0x74>
 80056d8:	e020      	b.n	800571c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056da:	4b55      	ldr	r3, [pc, #340]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d11d      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ea:	e01a      	b.n	8005722 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ec:	4b50      	ldr	r3, [pc, #320]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d116      	bne.n	8005726 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e013      	b.n	8005726 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fe:	4b4c      	ldr	r3, [pc, #304]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10f      	bne.n	800572a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800570a:	4b49      	ldr	r3, [pc, #292]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800571a:	e006      	b.n	800572a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	e004      	b.n	800572c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800572a:	bf00      	nop
    }

    if(status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	430b      	orrs	r3, r1
 8005748:	4939      	ldr	r1, [pc, #228]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d167      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005754:	4b36      	ldr	r3, [pc, #216]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a35      	ldr	r2, [pc, #212]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fc f910 	bl	8001984 <HAL_GetTick>
 8005764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005766:	e009      	b.n	800577c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005768:	f7fc f90c 	bl	8001984 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d902      	bls.n	800577c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	73fb      	strb	r3, [r7, #15]
        break;
 800577a:	e005      	b.n	8005788 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800577c:	4b2c      	ldr	r3, [pc, #176]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ef      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d14a      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d111      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005794:	4b26      	ldr	r3, [pc, #152]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	0211      	lsls	r1, r2, #8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	0912      	lsrs	r2, r2, #4
 80057ac:	0452      	lsls	r2, r2, #17
 80057ae:	430a      	orrs	r2, r1
 80057b0:	491f      	ldr	r1, [pc, #124]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	614b      	str	r3, [r1, #20]
 80057b6:	e011      	b.n	80057dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	0211      	lsls	r1, r2, #8
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6912      	ldr	r2, [r2, #16]
 80057ce:	0852      	lsrs	r2, r2, #1
 80057d0:	3a01      	subs	r2, #1
 80057d2:	0652      	lsls	r2, r2, #25
 80057d4:	430a      	orrs	r2, r1
 80057d6:	4916      	ldr	r1, [pc, #88]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057dc:	4b14      	ldr	r3, [pc, #80]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a13      	ldr	r2, [pc, #76]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fc f8cc 	bl	8001984 <HAL_GetTick>
 80057ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ee:	e009      	b.n	8005804 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057f0:	f7fc f8c8 	bl	8001984 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d902      	bls.n	8005804 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	73fb      	strb	r3, [r7, #15]
          break;
 8005802:	e005      	b.n	8005810 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4904      	ldr	r1, [pc, #16]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000

08005834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e040      	b.n	80058c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb ff22 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	; 0x24
 8005860:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8c0 	bl	80059f8 <UART_SetConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e022      	b.n	80058c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fb3e 	bl	8005f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800589e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fbc5 	bl	8006050 <UART_CheckIdleState>
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	f040 8082 	bne.w	80059ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_UART_Transmit+0x26>
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07a      	b.n	80059f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_UART_Transmit+0x38>
 8005904:	2302      	movs	r3, #2
 8005906:	e073      	b.n	80059f0 <HAL_UART_Transmit+0x120>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	; 0x21
 800591c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591e:	f7fc f831 	bl	8001984 <HAL_GetTick>
 8005922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593c:	d108      	bne.n	8005950 <HAL_UART_Transmit+0x80>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e003      	b.n	8005958 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005960:	e02d      	b.n	80059be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fbb8 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e039      	b.n	80059f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	881a      	ldrh	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800598e:	b292      	uxth	r2, r2
 8005990:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3302      	adds	r3, #2
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e008      	b.n	80059ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	b292      	uxth	r2, r2
 80059a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1cb      	bne.n	8005962 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	2140      	movs	r1, #64	; 0x40
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fb84 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e005      	b.n	80059f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f8:	b5b0      	push	{r4, r5, r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4bad      	ldr	r3, [pc, #692]	; (8005cd8 <UART_SetConfig+0x2e0>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4aa2      	ldr	r2, [pc, #648]	; (8005cdc <UART_SetConfig+0x2e4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a99      	ldr	r2, [pc, #612]	; (8005ce0 <UART_SetConfig+0x2e8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d121      	bne.n	8005ac2 <UART_SetConfig+0xca>
 8005a7e:	4b99      	ldr	r3, [pc, #612]	; (8005ce4 <UART_SetConfig+0x2ec>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d817      	bhi.n	8005abc <UART_SetConfig+0xc4>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x9c>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005aab 	.word	0x08005aab
 8005aa0:	08005ab7 	.word	0x08005ab7
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	76fb      	strb	r3, [r7, #27]
 8005aa8:	e0e7      	b.n	8005c7a <UART_SetConfig+0x282>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	76fb      	strb	r3, [r7, #27]
 8005aae:	e0e4      	b.n	8005c7a <UART_SetConfig+0x282>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	76fb      	strb	r3, [r7, #27]
 8005ab4:	e0e1      	b.n	8005c7a <UART_SetConfig+0x282>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	76fb      	strb	r3, [r7, #27]
 8005aba:	e0de      	b.n	8005c7a <UART_SetConfig+0x282>
 8005abc:	2310      	movs	r3, #16
 8005abe:	76fb      	strb	r3, [r7, #27]
 8005ac0:	e0db      	b.n	8005c7a <UART_SetConfig+0x282>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a88      	ldr	r2, [pc, #544]	; (8005ce8 <UART_SetConfig+0x2f0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d132      	bne.n	8005b32 <UART_SetConfig+0x13a>
 8005acc:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <UART_SetConfig+0x2ec>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d828      	bhi.n	8005b2c <UART_SetConfig+0x134>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0xe8>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b2d 	.word	0x08005b2d
 8005ae8:	08005b2d 	.word	0x08005b2d
 8005aec:	08005b2d 	.word	0x08005b2d
 8005af0:	08005b21 	.word	0x08005b21
 8005af4:	08005b2d 	.word	0x08005b2d
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b1b 	.word	0x08005b1b
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b27 	.word	0x08005b27
 8005b14:	2300      	movs	r3, #0
 8005b16:	76fb      	strb	r3, [r7, #27]
 8005b18:	e0af      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	76fb      	strb	r3, [r7, #27]
 8005b1e:	e0ac      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b20:	2304      	movs	r3, #4
 8005b22:	76fb      	strb	r3, [r7, #27]
 8005b24:	e0a9      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b26:	2308      	movs	r3, #8
 8005b28:	76fb      	strb	r3, [r7, #27]
 8005b2a:	e0a6      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	76fb      	strb	r3, [r7, #27]
 8005b30:	e0a3      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6d      	ldr	r2, [pc, #436]	; (8005cec <UART_SetConfig+0x2f4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d120      	bne.n	8005b7e <UART_SetConfig+0x186>
 8005b3c:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <UART_SetConfig+0x2ec>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d013      	beq.n	8005b72 <UART_SetConfig+0x17a>
 8005b4a:	2b30      	cmp	r3, #48	; 0x30
 8005b4c:	d814      	bhi.n	8005b78 <UART_SetConfig+0x180>
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d009      	beq.n	8005b66 <UART_SetConfig+0x16e>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d810      	bhi.n	8005b78 <UART_SetConfig+0x180>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <UART_SetConfig+0x168>
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d006      	beq.n	8005b6c <UART_SetConfig+0x174>
 8005b5e:	e00b      	b.n	8005b78 <UART_SetConfig+0x180>
 8005b60:	2300      	movs	r3, #0
 8005b62:	76fb      	strb	r3, [r7, #27]
 8005b64:	e089      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b66:	2302      	movs	r3, #2
 8005b68:	76fb      	strb	r3, [r7, #27]
 8005b6a:	e086      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	76fb      	strb	r3, [r7, #27]
 8005b70:	e083      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b72:	2308      	movs	r3, #8
 8005b74:	76fb      	strb	r3, [r7, #27]
 8005b76:	e080      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	76fb      	strb	r3, [r7, #27]
 8005b7c:	e07d      	b.n	8005c7a <UART_SetConfig+0x282>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5b      	ldr	r2, [pc, #364]	; (8005cf0 <UART_SetConfig+0x2f8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d120      	bne.n	8005bca <UART_SetConfig+0x1d2>
 8005b88:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <UART_SetConfig+0x2ec>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b92:	2bc0      	cmp	r3, #192	; 0xc0
 8005b94:	d013      	beq.n	8005bbe <UART_SetConfig+0x1c6>
 8005b96:	2bc0      	cmp	r3, #192	; 0xc0
 8005b98:	d814      	bhi.n	8005bc4 <UART_SetConfig+0x1cc>
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d009      	beq.n	8005bb2 <UART_SetConfig+0x1ba>
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d810      	bhi.n	8005bc4 <UART_SetConfig+0x1cc>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <UART_SetConfig+0x1b4>
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d006      	beq.n	8005bb8 <UART_SetConfig+0x1c0>
 8005baa:	e00b      	b.n	8005bc4 <UART_SetConfig+0x1cc>
 8005bac:	2300      	movs	r3, #0
 8005bae:	76fb      	strb	r3, [r7, #27]
 8005bb0:	e063      	b.n	8005c7a <UART_SetConfig+0x282>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	76fb      	strb	r3, [r7, #27]
 8005bb6:	e060      	b.n	8005c7a <UART_SetConfig+0x282>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	76fb      	strb	r3, [r7, #27]
 8005bbc:	e05d      	b.n	8005c7a <UART_SetConfig+0x282>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	76fb      	strb	r3, [r7, #27]
 8005bc2:	e05a      	b.n	8005c7a <UART_SetConfig+0x282>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	76fb      	strb	r3, [r7, #27]
 8005bc8:	e057      	b.n	8005c7a <UART_SetConfig+0x282>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a49      	ldr	r2, [pc, #292]	; (8005cf4 <UART_SetConfig+0x2fc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d125      	bne.n	8005c20 <UART_SetConfig+0x228>
 8005bd4:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <UART_SetConfig+0x2ec>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be2:	d017      	beq.n	8005c14 <UART_SetConfig+0x21c>
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be8:	d817      	bhi.n	8005c1a <UART_SetConfig+0x222>
 8005bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bee:	d00b      	beq.n	8005c08 <UART_SetConfig+0x210>
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf4:	d811      	bhi.n	8005c1a <UART_SetConfig+0x222>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <UART_SetConfig+0x20a>
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d006      	beq.n	8005c0e <UART_SetConfig+0x216>
 8005c00:	e00b      	b.n	8005c1a <UART_SetConfig+0x222>
 8005c02:	2300      	movs	r3, #0
 8005c04:	76fb      	strb	r3, [r7, #27]
 8005c06:	e038      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	e035      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	76fb      	strb	r3, [r7, #27]
 8005c12:	e032      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c14:	2308      	movs	r3, #8
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e02f      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c1a:	2310      	movs	r3, #16
 8005c1c:	76fb      	strb	r3, [r7, #27]
 8005c1e:	e02c      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <UART_SetConfig+0x2e4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d125      	bne.n	8005c76 <UART_SetConfig+0x27e>
 8005c2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ce4 <UART_SetConfig+0x2ec>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c38:	d017      	beq.n	8005c6a <UART_SetConfig+0x272>
 8005c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c3e:	d817      	bhi.n	8005c70 <UART_SetConfig+0x278>
 8005c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c44:	d00b      	beq.n	8005c5e <UART_SetConfig+0x266>
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4a:	d811      	bhi.n	8005c70 <UART_SetConfig+0x278>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <UART_SetConfig+0x260>
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d006      	beq.n	8005c64 <UART_SetConfig+0x26c>
 8005c56:	e00b      	b.n	8005c70 <UART_SetConfig+0x278>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	76fb      	strb	r3, [r7, #27]
 8005c5c:	e00d      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	76fb      	strb	r3, [r7, #27]
 8005c62:	e00a      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c64:	2304      	movs	r3, #4
 8005c66:	76fb      	strb	r3, [r7, #27]
 8005c68:	e007      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	76fb      	strb	r3, [r7, #27]
 8005c6e:	e004      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c70:	2310      	movs	r3, #16
 8005c72:	76fb      	strb	r3, [r7, #27]
 8005c74:	e001      	b.n	8005c7a <UART_SetConfig+0x282>
 8005c76:	2310      	movs	r3, #16
 8005c78:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <UART_SetConfig+0x2e4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	f040 8087 	bne.w	8005d94 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c86:	7efb      	ldrb	r3, [r7, #27]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d837      	bhi.n	8005cfc <UART_SetConfig+0x304>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x29c>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cfd 	.word	0x08005cfd
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cfd 	.word	0x08005cfd
 8005ca4:	08005cc7 	.word	0x08005cc7
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7ff f864 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8005cbc:	6178      	str	r0, [r7, #20]
        break;
 8005cbe:	e022      	b.n	8005d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <UART_SetConfig+0x300>)
 8005cc2:	617b      	str	r3, [r7, #20]
        break;
 8005cc4:	e01f      	b.n	8005d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe ffc5 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8005cca:	6178      	str	r0, [r7, #20]
        break;
 8005ccc:	e01b      	b.n	8005d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd2:	617b      	str	r3, [r7, #20]
        break;
 8005cd4:	e017      	b.n	8005d06 <UART_SetConfig+0x30e>
 8005cd6:	bf00      	nop
 8005cd8:	efff69f3 	.word	0xefff69f3
 8005cdc:	40008000 	.word	0x40008000
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40004400 	.word	0x40004400
 8005cec:	40004800 	.word	0x40004800
 8005cf0:	40004c00 	.word	0x40004c00
 8005cf4:	40005000 	.word	0x40005000
 8005cf8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	76bb      	strb	r3, [r7, #26]
        break;
 8005d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80f1 	beq.w	8005ef0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d305      	bcc.n	8005d2a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d902      	bls.n	8005d30 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	76bb      	strb	r3, [r7, #26]
 8005d2e:	e0df      	b.n	8005ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f04f 0100 	mov.w	r1, #0
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	020b      	lsls	r3, r1, #8
 8005d42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d46:	0202      	lsls	r2, r0, #8
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	6849      	ldr	r1, [r1, #4]
 8005d4c:	0849      	lsrs	r1, r1, #1
 8005d4e:	4608      	mov	r0, r1
 8005d50:	f04f 0100 	mov.w	r1, #0
 8005d54:	1814      	adds	r4, r2, r0
 8005d56:	eb43 0501 	adc.w	r5, r3, r1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	f7fa fda0 	bl	80008ac <__aeabi_uldivmod>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4613      	mov	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7a:	d308      	bcc.n	8005d8e <UART_SetConfig+0x396>
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d82:	d204      	bcs.n	8005d8e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	60da      	str	r2, [r3, #12]
 8005d8c:	e0b0      	b.n	8005ef0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	76bb      	strb	r3, [r7, #26]
 8005d92:	e0ad      	b.n	8005ef0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9c:	d15b      	bne.n	8005e56 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005d9e:	7efb      	ldrb	r3, [r7, #27]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d828      	bhi.n	8005df6 <UART_SetConfig+0x3fe>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x3b4>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de1 	.word	0x08005de1
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005de7 	.word	0x08005de7
 8005dc0:	08005df7 	.word	0x08005df7
 8005dc4:	08005df7 	.word	0x08005df7
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005def 	.word	0x08005def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7fe ffd8 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	6178      	str	r0, [r7, #20]
        break;
 8005dd6:	e013      	b.n	8005e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7fe ffea 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	6178      	str	r0, [r7, #20]
        break;
 8005dde:	e00f      	b.n	8005e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	4b49      	ldr	r3, [pc, #292]	; (8005f08 <UART_SetConfig+0x510>)
 8005de2:	617b      	str	r3, [r7, #20]
        break;
 8005de4:	e00c      	b.n	8005e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de6:	f7fe ff35 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8005dea:	6178      	str	r0, [r7, #20]
        break;
 8005dec:	e008      	b.n	8005e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	617b      	str	r3, [r7, #20]
        break;
 8005df4:	e004      	b.n	8005e00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	76bb      	strb	r3, [r7, #26]
        break;
 8005dfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d074      	beq.n	8005ef0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	005a      	lsls	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b0f      	cmp	r3, #15
 8005e20:	d916      	bls.n	8005e50 <UART_SetConfig+0x458>
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e28:	d212      	bcs.n	8005e50 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f023 030f 	bic.w	r3, r3, #15
 8005e32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	89fa      	ldrh	r2, [r7, #14]
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	e04f      	b.n	8005ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	76bb      	strb	r3, [r7, #26]
 8005e54:	e04c      	b.n	8005ef0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e56:	7efb      	ldrb	r3, [r7, #27]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d828      	bhi.n	8005eae <UART_SetConfig+0x4b6>
 8005e5c:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0x46c>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	08005eaf 	.word	0x08005eaf
 8005e74:	08005e9f 	.word	0x08005e9f
 8005e78:	08005eaf 	.word	0x08005eaf
 8005e7c:	08005eaf 	.word	0x08005eaf
 8005e80:	08005eaf 	.word	0x08005eaf
 8005e84:	08005ea7 	.word	0x08005ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e88:	f7fe ff7c 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8005e8c:	6178      	str	r0, [r7, #20]
        break;
 8005e8e:	e013      	b.n	8005eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e90:	f7fe ff8e 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005e94:	6178      	str	r0, [r7, #20]
        break;
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <UART_SetConfig+0x510>)
 8005e9a:	617b      	str	r3, [r7, #20]
        break;
 8005e9c:	e00c      	b.n	8005eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9e:	f7fe fed9 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8005ea2:	6178      	str	r0, [r7, #20]
        break;
 8005ea4:	e008      	b.n	8005eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eaa:	617b      	str	r3, [r7, #20]
        break;
 8005eac:	e004      	b.n	8005eb8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	76bb      	strb	r3, [r7, #26]
        break;
 8005eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	085a      	lsrs	r2, r3, #1
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	441a      	add	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b0f      	cmp	r3, #15
 8005ed6:	d909      	bls.n	8005eec <UART_SetConfig+0x4f4>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ede:	d205      	bcs.n	8005eec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	e001      	b.n	8005ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005efc:	7ebb      	ldrb	r3, [r7, #26]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bdb0      	pop	{r4, r5, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	00f42400 	.word	0x00f42400

08005f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01a      	beq.n	8006022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600a:	d10a      	bne.n	8006022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006060:	f7fb fc90 	bl	8001984 <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d10e      	bne.n	8006092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f82d 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e023      	b.n	80060da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b04      	cmp	r3, #4
 800609e:	d10e      	bne.n	80060be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f817 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e00d      	b.n	80060da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b09c      	sub	sp, #112	; 0x70
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	e0a5      	b.n	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	f000 80a1 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fe:	f7fb fc41 	bl	8001984 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800610a:	429a      	cmp	r2, r3
 800610c:	d302      	bcc.n	8006114 <UART_WaitOnFlagUntilTimeout+0x32>
 800610e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006110:	2b00      	cmp	r3, #0
 8006112:	d13e      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006128:	667b      	str	r3, [r7, #100]	; 0x64
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006134:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	663b      	str	r3, [r7, #96]	; 0x60
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006166:	64ba      	str	r2, [r7, #72]	; 0x48
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800616c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e067      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04f      	beq.n	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ae:	d147      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	613b      	str	r3, [r7, #16]
   return(result);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	66bb      	str	r3, [r7, #104]	; 0x68
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800620c:	623a      	str	r2, [r7, #32]
 800620e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	61bb      	str	r3, [r7, #24]
   return(result);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e5      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e010      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	429a      	cmp	r2, r3
 800625c:	f43f af4a 	beq.w	80060f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3770      	adds	r7, #112	; 0x70
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800626a:	b084      	sub	sp, #16
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	f107 001c 	add.w	r0, r7, #28
 8006278:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f9a1 	bl	80065d0 <USB_CoreReset>
 800628e:	4603      	mov	r3, r0
 8006290:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
 80062a4:	e005      	b.n	80062b2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062be:	b004      	add	sp, #16
 80062c0:	4770      	bx	lr

080062c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 0201 	bic.w	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d115      	bne.n	8006354 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006334:	2001      	movs	r0, #1
 8006336:	f7fb fb31 	bl	800199c <HAL_Delay>
      ms++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f936 	bl	80065b2 <USB_GetMode>
 8006346:	4603      	mov	r3, r0
 8006348:	2b01      	cmp	r3, #1
 800634a:	d01e      	beq.n	800638a <USB_SetCurrentMode+0x84>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b31      	cmp	r3, #49	; 0x31
 8006350:	d9f0      	bls.n	8006334 <USB_SetCurrentMode+0x2e>
 8006352:	e01a      	b.n	800638a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d115      	bne.n	8006386 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006366:	2001      	movs	r0, #1
 8006368:	f7fb fb18 	bl	800199c <HAL_Delay>
      ms++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f91d 	bl	80065b2 <USB_GetMode>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <USB_SetCurrentMode+0x84>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b31      	cmp	r3, #49	; 0x31
 8006382:	d9f0      	bls.n	8006366 <USB_SetCurrentMode+0x60>
 8006384:	e001      	b.n	800638a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e005      	b.n	8006396 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b32      	cmp	r3, #50	; 0x32
 800638e:	d101      	bne.n	8006394 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <USB_FlushTxFifo+0x64>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e01b      	b.n	80063f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	daf2      	bge.n	80063ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a08      	ldr	r2, [pc, #32]	; (8006404 <USB_FlushTxFifo+0x64>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e006      	b.n	80063f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d0f0      	beq.n	80063d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	00030d40 	.word	0x00030d40

08006408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a11      	ldr	r2, [pc, #68]	; (8006464 <USB_FlushRxFifo+0x5c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e018      	b.n	8006458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2210      	movs	r2, #16
 8006436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <USB_FlushRxFifo+0x5c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e006      	b.n	8006458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b10      	cmp	r3, #16
 8006454:	d0f0      	beq.n	8006438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	00030d40 	.word	0x00030d40

08006468 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	; 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	460b      	mov	r3, r1
 8006478:	71fb      	strb	r3, [r7, #7]
 800647a:	4613      	mov	r3, r2
 800647c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006486:	88bb      	ldrh	r3, [r7, #4]
 8006488:	3303      	adds	r3, #3
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e018      	b.n	80064c6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	031a      	lsls	r2, r3, #12
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a0:	461a      	mov	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3301      	adds	r3, #1
 80064b2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	3301      	adds	r3, #1
 80064b8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3301      	adds	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	3301      	adds	r3, #1
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d3e2      	bcc.n	8006494 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3724      	adds	r7, #36	; 0x24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064dc:	b480      	push	{r7}
 80064de:	b08b      	sub	sp, #44	; 0x2c
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e014      	b.n	8006532 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	601a      	str	r2, [r3, #0]
    pDest++;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	3301      	adds	r3, #1
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	3301      	adds	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	3301      	adds	r3, #1
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	3301      	adds	r3, #1
 8006530:	623b      	str	r3, [r7, #32]
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3e6      	bcc.n	8006508 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800653a:	8bfb      	ldrh	r3, [r7, #30]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654a:	461a      	mov	r2, r3
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
 8006560:	b2da      	uxtb	r2, r3
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	701a      	strb	r2, [r3, #0]
      i++;
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	3301      	adds	r3, #1
 800656a:	623b      	str	r3, [r7, #32]
      pDest++;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	3301      	adds	r3, #1
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006572:	8bfb      	ldrh	r3, [r7, #30]
 8006574:	3b01      	subs	r3, #1
 8006576:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006578:	8bfb      	ldrh	r3, [r7, #30]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1ea      	bne.n	8006554 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006580:	4618      	mov	r0, r3
 8006582:	372c      	adds	r7, #44	; 0x2c
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4013      	ands	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065a4:	68fb      	ldr	r3, [r7, #12]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0301 	and.w	r3, r3, #1
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <USB_CoreReset+0x64>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e01b      	b.n	8006626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	daf2      	bge.n	80065dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <USB_CoreReset+0x64>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e006      	b.n	8006626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d0f0      	beq.n	8006606 <USB_CoreReset+0x36>

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	00030d40 	.word	0x00030d40

08006638 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006638:	b084      	sub	sp, #16
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006684:	f023 0304 	bic.w	r3, r3, #4
 8006688:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800668a:	2110      	movs	r1, #16
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fe87 	bl	80063a0 <USB_FlushTxFifo>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff feb3 	bl	8006408 <USB_FlushRxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e015      	b.n	80066de <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	461a      	mov	r2, r3
 80066c0:	f04f 33ff 	mov.w	r3, #4294967295
 80066c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	461a      	mov	r2, r3
 80066d4:	2300      	movs	r3, #0
 80066d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	3301      	adds	r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3e5      	bcc.n	80066b2 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2280      	movs	r2, #128	; 0x80
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a0c      	ldr	r2, [pc, #48]	; (8006730 <USB_HostInit+0xf8>)
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0c      	ldr	r2, [pc, #48]	; (8006734 <USB_HostInit+0xfc>)
 8006704:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f043 0210 	orr.w	r2, r3, #16
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <USB_HostInit+0x100>)
 800671a:	4313      	orrs	r3, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006720:	7dfb      	ldrb	r3, [r7, #23]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800672c:	b004      	add	sp, #16
 800672e:	4770      	bx	lr
 8006730:	00600080 	.word	0x00600080
 8006734:	004000e0 	.word	0x004000e0
 8006738:	a3200008 	.word	0xa3200008

0800673c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006774:	4313      	orrs	r3, r2
 8006776:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006784:	461a      	mov	r2, r3
 8006786:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800678a:	6053      	str	r3, [r2, #4]
 800678c:	e009      	b.n	80067a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d106      	bne.n	80067a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679a:	461a      	mov	r2, r3
 800679c:	f241 7370 	movw	r3, #6000	; 0x1770
 80067a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067e0:	2064      	movs	r0, #100	; 0x64
 80067e2:	f7fb f8db 	bl	800199c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067f4:	200a      	movs	r0, #10
 80067f6:	f7fb f8d1 	bl	800199c <HAL_Delay>

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006828:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <USB_DriveVbus+0x44>
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d106      	bne.n	8006848 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006846:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006852:	d109      	bne.n	8006868 <USB_DriveVbus+0x64>
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006866:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	0c5b      	lsrs	r3, r3, #17
 8006894:	f003 0303 	and.w	r3, r3, #3
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	b29b      	uxth	r3, r3
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	4608      	mov	r0, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	461a      	mov	r2, r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	70fb      	strb	r3, [r7, #3]
 80068da:	460b      	mov	r3, r1
 80068dc:	70bb      	strb	r3, [r7, #2]
 80068de:	4613      	mov	r3, r2
 80068e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	461a      	mov	r2, r3
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295
 80068fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006902:	2b03      	cmp	r3, #3
 8006904:	d867      	bhi.n	80069d6 <USB_HC_Init+0x10e>
 8006906:	a201      	add	r2, pc, #4	; (adr r2, 800690c <USB_HC_Init+0x44>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	0800691d 	.word	0x0800691d
 8006910:	08006999 	.word	0x08006999
 8006914:	0800691d 	.word	0x0800691d
 8006918:	0800695b 	.word	0x0800695b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006928:	461a      	mov	r2, r3
 800692a:	f240 439d 	movw	r3, #1181	; 0x49d
 800692e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006930:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da51      	bge.n	80069dc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4413      	add	r3, r2
 8006940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	440a      	add	r2, r1
 800694e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006956:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006958:	e040      	b.n	80069dc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006966:	461a      	mov	r2, r3
 8006968:	f240 639d 	movw	r3, #1693	; 0x69d
 800696c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800696e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da34      	bge.n	80069e0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	78fa      	ldrb	r2, [r7, #3]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006994:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006996:	e023      	b.n	80069e0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a4:	461a      	mov	r2, r3
 80069a6:	f240 2325 	movw	r3, #549	; 0x225
 80069aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	da17      	bge.n	80069e4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ce:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069d2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069d4:	e006      	b.n	80069e4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	77fb      	strb	r3, [r7, #31]
      break;
 80069da:	e004      	b.n	80069e6 <USB_HC_Init+0x11e>
      break;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <USB_HC_Init+0x11e>
      break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <USB_HC_Init+0x11e>
      break;
 80069e4:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	6939      	ldr	r1, [r7, #16]
 8006a1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a20:	4313      	orrs	r3, r2
 8006a22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	da03      	bge.n	8006a40 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	e001      	b.n	8006a44 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ff16 	bl	8006876 <USB_GetHostSpeed>
 8006a4a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d106      	bne.n	8006a62 <USB_HC_Init+0x19a>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d003      	beq.n	8006a62 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e001      	b.n	8006a66 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a66:	787b      	ldrb	r3, [r7, #1]
 8006a68:	059b      	lsls	r3, r3, #22
 8006a6a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a6e:	78bb      	ldrb	r3, [r7, #2]
 8006a70:	02db      	lsls	r3, r3, #11
 8006a72:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a7c:	049b      	lsls	r3, r3, #18
 8006a7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	0159      	lsls	r1, r3, #5
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	440b      	add	r3, r1
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006aa2:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d003      	beq.n	8006ab4 <USB_HC_Init+0x1ec>
 8006aac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10f      	bne.n	8006ad4 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ad4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d018      	beq.n	8006b34 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	8912      	ldrh	r2, [r2, #8]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	8912      	ldrh	r2, [r2, #8]
 8006b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b16:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006b18:	8bfa      	ldrh	r2, [r7, #30]
 8006b1a:	8a7b      	ldrh	r3, [r7, #18]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d90b      	bls.n	8006b38 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006b20:	8a7b      	ldrh	r3, [r7, #18]
 8006b22:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b24:	8bfb      	ldrh	r3, [r7, #30]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	8912      	ldrh	r2, [r2, #8]
 8006b2a:	fb02 f203 	mul.w	r2, r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	611a      	str	r2, [r3, #16]
 8006b32:	e001      	b.n	8006b38 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006b34:	2301      	movs	r3, #1
 8006b36:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	78db      	ldrb	r3, [r3, #3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b40:	8bfb      	ldrh	r3, [r7, #30]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	8912      	ldrh	r2, [r2, #8]
 8006b46:	fb02 f203 	mul.w	r2, r2, r3
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	611a      	str	r2, [r3, #16]
 8006b4e:	e003      	b.n	8006b58 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b60:	8bfb      	ldrh	r3, [r7, #30]
 8006b62:	04d9      	lsls	r1, r3, #19
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <USB_HC_StartXfer+0x1ec>)
 8006b66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	7a9b      	ldrb	r3, [r3, #10]
 8006b6e:	075b      	lsls	r3, r3, #29
 8006b70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	0148      	lsls	r0, r1, #5
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	4401      	add	r1, r0
 8006b7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b82:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	7c7b      	ldrb	r3, [r7, #17]
 8006bcc:	075b      	lsls	r3, r3, #29
 8006bce:	6979      	ldr	r1, [r7, #20]
 8006bd0:	0148      	lsls	r0, r1, #5
 8006bd2:	69b9      	ldr	r1, [r7, #24]
 8006bd4:	4401      	add	r1, r0
 8006bd6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bf4:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	78db      	ldrb	r3, [r3, #3]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	e003      	b.n	8006c10 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c0e:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c24:	461a      	mov	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	78db      	ldrb	r3, [r3, #3]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d147      	bne.n	8006cc2 <USB_HC_StartXfer+0x1e2>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d043      	beq.n	8006cc2 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	79db      	ldrb	r3, [r3, #7]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d830      	bhi.n	8006ca4 <USB_HC_StartXfer+0x1c4>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <USB_HC_StartXfer+0x168>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c7d 	.word	0x08006c7d
 8006c50:	08006c59 	.word	0x08006c59
 8006c54:	08006c7d 	.word	0x08006c7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	3303      	adds	r3, #3
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c62:	89fa      	ldrh	r2, [r7, #14]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d91c      	bls.n	8006ca8 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f043 0220 	orr.w	r2, r3, #32
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c7a:	e015      	b.n	8006ca8 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	3303      	adds	r3, #3
 8006c82:	089b      	lsrs	r3, r3, #2
 8006c84:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c86:	89fa      	ldrh	r2, [r7, #14]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90a      	bls.n	8006cac <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ca2:	e003      	b.n	8006cac <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006ca4:	bf00      	nop
 8006ca6:	e002      	b.n	8006cae <USB_HC_StartXfer+0x1ce>
        break;
 8006ca8:	bf00      	nop
 8006caa:	e000      	b.n	8006cae <USB_HC_StartXfer+0x1ce>
        break;
 8006cac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68d9      	ldr	r1, [r3, #12]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	785a      	ldrb	r2, [r3, #1]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fbd3 	bl	8006468 <USB_WritePacket>
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	1ff80000 	.word	0x1ff80000

08006cd0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	b29b      	uxth	r3, r3
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b089      	sub	sp, #36	; 0x24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	0c9b      	lsrs	r3, r3, #18
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	0fdb      	lsrs	r3, r3, #31
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d104      	bne.n	8006d4c <USB_HC_Halt+0x5a>
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e0c8      	b.n	8006ede <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <USB_HC_Halt+0x66>
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d163      	bne.n	8006e20 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 80ab 	bne.w	8006edc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d133      	bne.n	8006dfa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dd0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dde:	d81d      	bhi.n	8006e1c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006df6:	d0ec      	beq.n	8006dd2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006df8:	e070      	b.n	8006edc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e1a:	e05f      	b.n	8006edc <USB_HC_Halt+0x1ea>
            break;
 8006e1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e1e:	e05d      	b.n	8006edc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d133      	bne.n	8006eb8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e9c:	d81d      	bhi.n	8006eda <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb4:	d0ec      	beq.n	8006e90 <USB_HC_Halt+0x19e>
 8006eb6:	e011      	b.n	8006edc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e000      	b.n	8006edc <USB_HC_Halt+0x1ea>
          break;
 8006eda:	bf00      	nop
    }
  }

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b088      	sub	sp, #32
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff f9f0 	bl	80062e4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f04:	2110      	movs	r1, #16
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fa4a 	bl	80063a0 <USB_FlushTxFifo>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fa76 	bl	8006408 <USB_FlushRxFifo>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e01f      	b.n	8006f6c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f42:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f4a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f52:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f60:	461a      	mov	r2, r3
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b0f      	cmp	r3, #15
 8006f70:	d9dc      	bls.n	8006f2c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e034      	b.n	8006fe2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f8e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f96:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f9e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fac:	461a      	mov	r2, r3
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbe:	d80c      	bhi.n	8006fda <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd6:	d0ec      	beq.n	8006fb2 <USB_StopHost+0xc8>
 8006fd8:	e000      	b.n	8006fdc <USB_StopHost+0xf2>
        break;
 8006fda:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d9c7      	bls.n	8006f78 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff f95f 	bl	80062c2 <USB_EnableGlobalInt>

  return ret;
 8007004:	7ffb      	ldrb	r3, [r7, #31]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007014:	4904      	ldr	r1, [pc, #16]	; (8007028 <MX_FATFS_Init+0x18>)
 8007016:	4805      	ldr	r0, [pc, #20]	; (800702c <MX_FATFS_Init+0x1c>)
 8007018:	f006 f944 	bl	800d2a4 <FATFS_LinkDriver>
 800701c:	4603      	mov	r3, r0
 800701e:	461a      	mov	r2, r3
 8007020:	4b03      	ldr	r3, [pc, #12]	; (8007030 <MX_FATFS_Init+0x20>)
 8007022:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	2000050c 	.word	0x2000050c
 800702c:	0800eb70 	.word	0x0800eb70
 8007030:	20000974 	.word	0x20000974

08007034 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007038:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800703a:	4618      	mov	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	4619      	mov	r1, r3
 800706e:	4808      	ldr	r0, [pc, #32]	; (8007090 <USBH_status+0x34>)
 8007070:	f000 fe1a 	bl	8007ca8 <USBH_MSC_UnitIsReady>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <USBH_status+0x24>
  {
    res = RES_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	e001      	b.n	8007084 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000978 	.word	0x20000978

08007094 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b094      	sub	sp, #80	; 0x50
 8007098:	af02      	add	r7, sp, #8
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80070aa:	7bf9      	ldrb	r1, [r7, #15]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4813      	ldr	r0, [pc, #76]	; (8007104 <USBH_read+0x70>)
 80070b6:	f000 fe41 	bl	8007d3c <USBH_MSC_Read>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <USBH_read+0x34>
  {
    res = RES_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070c6:	e017      	b.n	80070f8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80070c8:	f107 0210 	add.w	r2, r7, #16
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	4619      	mov	r1, r3
 80070d0:	480c      	ldr	r0, [pc, #48]	; (8007104 <USBH_read+0x70>)
 80070d2:	f000 fe0f 	bl	8007cf4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80070d6:	7f7b      	ldrb	r3, [r7, #29]
 80070d8:	2b3a      	cmp	r3, #58	; 0x3a
 80070da:	d005      	beq.n	80070e8 <USBH_read+0x54>
 80070dc:	2b3a      	cmp	r3, #58	; 0x3a
 80070de:	dc07      	bgt.n	80070f0 <USBH_read+0x5c>
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d001      	beq.n	80070e8 <USBH_read+0x54>
 80070e4:	2b28      	cmp	r3, #40	; 0x28
 80070e6:	d103      	bne.n	80070f0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80070e8:	2303      	movs	r3, #3
 80070ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070ee:	e003      	b.n	80070f8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070f6:	bf00      	nop
    }
  }

  return res;
 80070f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3748      	adds	r7, #72	; 0x48
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000978 	.word	0x20000978

08007108 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b094      	sub	sp, #80	; 0x50
 800710c:	af02      	add	r7, sp, #8
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800711e:	7bf9      	ldrb	r1, [r7, #15]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4817      	ldr	r0, [pc, #92]	; (8007188 <USBH_write+0x80>)
 800712a:	f000 fe70 	bl	8007e0e <USBH_MSC_Write>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <USBH_write+0x34>
  {
    res = RES_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800713a:	e01f      	b.n	800717c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800713c:	f107 0210 	add.w	r2, r7, #16
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4619      	mov	r1, r3
 8007144:	4810      	ldr	r0, [pc, #64]	; (8007188 <USBH_write+0x80>)
 8007146:	f000 fdd5 	bl	8007cf4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800714a:	7f7b      	ldrb	r3, [r7, #29]
 800714c:	2b3a      	cmp	r3, #58	; 0x3a
 800714e:	d00d      	beq.n	800716c <USBH_write+0x64>
 8007150:	2b3a      	cmp	r3, #58	; 0x3a
 8007152:	dc0f      	bgt.n	8007174 <USBH_write+0x6c>
 8007154:	2b28      	cmp	r3, #40	; 0x28
 8007156:	d009      	beq.n	800716c <USBH_write+0x64>
 8007158:	2b28      	cmp	r3, #40	; 0x28
 800715a:	dc0b      	bgt.n	8007174 <USBH_write+0x6c>
 800715c:	2b04      	cmp	r3, #4
 800715e:	d005      	beq.n	800716c <USBH_write+0x64>
 8007160:	2b27      	cmp	r3, #39	; 0x27
 8007162:	d107      	bne.n	8007174 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007164:	2302      	movs	r3, #2
 8007166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800716a:	e007      	b.n	800717c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800716c:	2303      	movs	r3, #3
 800716e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007172:	e003      	b.n	800717c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800717a:	bf00      	nop
    }
  }

  return res;
 800717c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007180:	4618      	mov	r0, r3
 8007182:	3748      	adds	r7, #72	; 0x48
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000978 	.word	0x20000978

0800718c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b090      	sub	sp, #64	; 0x40
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	603a      	str	r2, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
 8007198:	460b      	mov	r3, r1
 800719a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80071a2:	79bb      	ldrb	r3, [r7, #6]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d852      	bhi.n	800724e <USBH_ioctl+0xc2>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBH_ioctl+0x24>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071f3 	.word	0x080071f3
 80071bc:	0800721f 	.word	0x0800721f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071c6:	e045      	b.n	8007254 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80071c8:	f107 0208 	add.w	r2, r7, #8
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	4619      	mov	r1, r3
 80071d0:	4823      	ldr	r0, [pc, #140]	; (8007260 <USBH_ioctl+0xd4>)
 80071d2:	f000 fd8f 	bl	8007cf4 <USBH_MSC_GetLUNInfo>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071e8:	e034      	b.n	8007254 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071f0:	e030      	b.n	8007254 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80071f2:	f107 0208 	add.w	r2, r7, #8
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	4619      	mov	r1, r3
 80071fa:	4819      	ldr	r0, [pc, #100]	; (8007260 <USBH_ioctl+0xd4>)
 80071fc:	f000 fd7a 	bl	8007cf4 <USBH_MSC_GetLUNInfo>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007206:	8a3b      	ldrh	r3, [r7, #16]
 8007208:	461a      	mov	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007214:	e01e      	b.n	8007254 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800721c:	e01a      	b.n	8007254 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800721e:	f107 0208 	add.w	r2, r7, #8
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	4619      	mov	r1, r3
 8007226:	480e      	ldr	r0, [pc, #56]	; (8007260 <USBH_ioctl+0xd4>)
 8007228:	f000 fd64 	bl	8007cf4 <USBH_MSC_GetLUNInfo>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007232:	8a3b      	ldrh	r3, [r7, #16]
 8007234:	0a5b      	lsrs	r3, r3, #9
 8007236:	b29b      	uxth	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007244:	e006      	b.n	8007254 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800724c:	e002      	b.n	8007254 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800724e:	2304      	movs	r3, #4
 8007250:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007254:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007258:	4618      	mov	r0, r3
 800725a:	3740      	adds	r7, #64	; 0x40
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000978 	.word	0x20000978

08007264 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af04      	add	r7, sp, #16
 800726a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007272:	7919      	ldrb	r1, [r3, #4]
 8007274:	2350      	movs	r3, #80	; 0x50
 8007276:	2206      	movs	r2, #6
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fc53 	bl	8008b24 <USBH_FindInterface>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2bff      	cmp	r3, #255	; 0xff
 8007286:	d002      	beq.n	800728e <USBH_MSC_InterfaceInit+0x2a>
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d901      	bls.n	8007292 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800728e:	2302      	movs	r3, #2
 8007290:	e0ef      	b.n	8007472 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 fc28 	bl	8008aec <USBH_SelectInterface>
 800729c:	4603      	mov	r3, r0
 800729e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0e3      	b.n	8007472 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80072b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80072b4:	f006 fd2e 	bl	800dd14 <malloc>
 80072b8:	4603      	mov	r3, r0
 80072ba:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80072cc:	2302      	movs	r3, #2
 80072ce:	e0d0      	b.n	8007472 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80072d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072d4:	2100      	movs	r1, #0
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f006 fd3a 	bl	800dd50 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	211a      	movs	r1, #26
 80072e2:	fb01 f303 	mul.w	r3, r1, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da16      	bge.n	8007322 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	211a      	movs	r1, #26
 80072fa:	fb01 f303 	mul.w	r3, r1, r3
 80072fe:	4413      	add	r3, r2
 8007300:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	211a      	movs	r1, #26
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	4413      	add	r3, r2
 8007316:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	815a      	strh	r2, [r3, #10]
 8007320:	e015      	b.n	800734e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	211a      	movs	r1, #26
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	4413      	add	r3, r2
 800732e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	211a      	movs	r1, #26
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007348:	881a      	ldrh	r2, [r3, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	211a      	movs	r1, #26
 8007354:	fb01 f303 	mul.w	r3, r1, r3
 8007358:	4413      	add	r3, r2
 800735a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b25b      	sxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	da16      	bge.n	8007394 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	211a      	movs	r1, #26
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	211a      	movs	r1, #26
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	4413      	add	r3, r2
 8007388:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800738c:	881a      	ldrh	r2, [r3, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	815a      	strh	r2, [r3, #10]
 8007392:	e015      	b.n	80073c0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	211a      	movs	r1, #26
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	4413      	add	r3, r2
 80073a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	211a      	movs	r1, #26
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073ba:	881a      	ldrh	r2, [r3, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	799b      	ldrb	r3, [r3, #6]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f002 fdc4 	bl	8009f66 <USBH_AllocPipe>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	79db      	ldrb	r3, [r3, #7]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f002 fdba 	bl	8009f66 <USBH_AllocPipe>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fdac 	bl	8007f58 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	7959      	ldrb	r1, [r3, #5]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	7998      	ldrb	r0, [r3, #6]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	8912      	ldrh	r2, [r2, #8]
 8007418:	9202      	str	r2, [sp, #8]
 800741a:	2202      	movs	r2, #2
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4623      	mov	r3, r4
 8007422:	4602      	mov	r2, r0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f002 fd6f 	bl	8009f08 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	7919      	ldrb	r1, [r3, #4]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	79d8      	ldrb	r0, [r3, #7]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	8952      	ldrh	r2, [r2, #10]
 8007442:	9202      	str	r2, [sp, #8]
 8007444:	2202      	movs	r2, #2
 8007446:	9201      	str	r2, [sp, #4]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4623      	mov	r3, r4
 800744c:	4602      	mov	r2, r0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f002 fd5a 	bl	8009f08 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	791b      	ldrb	r3, [r3, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f006 fb98 	bl	800db92 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	2200      	movs	r2, #0
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f006 fb91 	bl	800db92 <USBH_LL_SetToggle>

  return USBH_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bd90      	pop	{r4, r7, pc}

0800747a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	795b      	ldrb	r3, [r3, #5]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00e      	beq.n	80074b2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	795b      	ldrb	r3, [r3, #5]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f002 fd53 	bl	8009f46 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	795b      	ldrb	r3, [r3, #5]
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f002 fd7e 	bl	8009fa8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	791b      	ldrb	r3, [r3, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f002 fd40 	bl	8009f46 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f002 fd6b 	bl	8009fa8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f006 fc19 	bl	800dd24 <free>
    phost->pActiveClass->pData = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f8:	2200      	movs	r2, #0
 80074fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	7b9b      	ldrb	r3, [r3, #14]
 8007520:	2b03      	cmp	r3, #3
 8007522:	d041      	beq.n	80075a8 <USBH_MSC_ClassRequest+0xa2>
 8007524:	2b03      	cmp	r3, #3
 8007526:	dc4b      	bgt.n	80075c0 <USBH_MSC_ClassRequest+0xba>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBH_MSC_ClassRequest+0x2a>
 800752c:	2b02      	cmp	r3, #2
 800752e:	d147      	bne.n	80075c0 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fcf0 	bl	8007f1a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d104      	bne.n	800754e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d137      	bne.n	80075c4 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d804      	bhi.n	8007566 <USBH_MSC_ClassRequest+0x60>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	e000      	b.n	8007568 <USBH_MSC_ClassRequest+0x62>
 8007566:	2202      	movs	r2, #2
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800756c:	2300      	movs	r3, #0
 800756e:	73bb      	strb	r3, [r7, #14]
 8007570:	e014      	b.n	800759c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	2134      	movs	r1, #52	; 0x34
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	3392      	adds	r3, #146	; 0x92
 8007580:	2202      	movs	r2, #2
 8007582:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	2134      	movs	r1, #52	; 0x34
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	33c1      	adds	r3, #193	; 0xc1
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	3301      	adds	r3, #1
 800759a:	73bb      	strb	r3, [r7, #14]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	7bba      	ldrb	r2, [r7, #14]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d3e5      	bcc.n	8007572 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80075a6:	e00d      	b.n	80075c4 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f002 f87b 	bl	80096a6 <USBH_ClrFeature>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	7bda      	ldrb	r2, [r3, #15]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	739a      	strb	r2, [r3, #14]
      }
      break;
 80075be:	e003      	b.n	80075c8 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80075c0:	bf00      	nop
 80075c2:	e002      	b.n	80075ca <USBH_MSC_ClassRequest+0xc4>
      break;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <USBH_MSC_ClassRequest+0xc4>
      break;
 80075c8:	bf00      	nop
  }

  return status;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80075e6:	2301      	movs	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80075ea:	2301      	movs	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80075ee:	2301      	movs	r3, #1
 80075f0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	7b1b      	ldrb	r3, [r3, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <USBH_MSC_Process+0x2e>
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	f000 8271 	beq.w	8007ae2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007600:	e272      	b.n	8007ae8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	429a      	cmp	r2, r3
 8007610:	f080 824f 	bcs.w	8007ab2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800761a:	4619      	mov	r1, r3
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	2334      	movs	r3, #52	; 0x34
 8007620:	fb03 f301 	mul.w	r3, r3, r1
 8007624:	4413      	add	r3, r2
 8007626:	3391      	adds	r3, #145	; 0x91
 8007628:	2201      	movs	r2, #1
 800762a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007632:	4619      	mov	r1, r3
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	2334      	movs	r3, #52	; 0x34
 8007638:	fb03 f301 	mul.w	r3, r3, r1
 800763c:	4413      	add	r3, r2
 800763e:	3390      	adds	r3, #144	; 0x90
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b08      	cmp	r3, #8
 8007644:	f200 8243 	bhi.w	8007ace <USBH_MSC_Process+0x4fa>
 8007648:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <USBH_MSC_Process+0x7c>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007675 	.word	0x08007675
 8007654:	08007acf 	.word	0x08007acf
 8007658:	0800773d 	.word	0x0800773d
 800765c:	080078c1 	.word	0x080078c1
 8007660:	0800769b 	.word	0x0800769b
 8007664:	0800798d 	.word	0x0800798d
 8007668:	08007acf 	.word	0x08007acf
 800766c:	08007acf 	.word	0x08007acf
 8007670:	08007aa1 	.word	0x08007aa1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800767a:	4619      	mov	r1, r3
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	2334      	movs	r3, #52	; 0x34
 8007680:	fb03 f301 	mul.w	r3, r3, r1
 8007684:	4413      	add	r3, r2
 8007686:	3390      	adds	r3, #144	; 0x90
 8007688:	2204      	movs	r2, #4
 800768a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007698:	e222      	b.n	8007ae0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076a0:	b2d9      	uxtb	r1, r3
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076a8:	461a      	mov	r2, r3
 80076aa:	2334      	movs	r3, #52	; 0x34
 80076ac:	fb03 f302 	mul.w	r3, r3, r2
 80076b0:	3398      	adds	r3, #152	; 0x98
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4413      	add	r3, r2
 80076b6:	3307      	adds	r3, #7
 80076b8:	461a      	mov	r2, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 ff6a 	bl	8008594 <USBH_MSC_SCSI_Inquiry>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076d0:	4619      	mov	r1, r3
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	2334      	movs	r3, #52	; 0x34
 80076d6:	fb03 f301 	mul.w	r3, r3, r1
 80076da:	4413      	add	r3, r2
 80076dc:	3390      	adds	r3, #144	; 0x90
 80076de:	2202      	movs	r2, #2
 80076e0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d10c      	bne.n	8007702 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ee:	4619      	mov	r1, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	2334      	movs	r3, #52	; 0x34
 80076f4:	fb03 f301 	mul.w	r3, r3, r1
 80076f8:	4413      	add	r3, r2
 80076fa:	3390      	adds	r3, #144	; 0x90
 80076fc:	2205      	movs	r2, #5
 80076fe:	701a      	strb	r2, [r3, #0]
            break;
 8007700:	e1e7      	b.n	8007ad2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b04      	cmp	r3, #4
 8007706:	f040 81e4 	bne.w	8007ad2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007710:	4619      	mov	r1, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	2334      	movs	r3, #52	; 0x34
 8007716:	fb03 f301 	mul.w	r3, r3, r1
 800771a:	4413      	add	r3, r2
 800771c:	3390      	adds	r3, #144	; 0x90
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007728:	4619      	mov	r1, r3
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	2334      	movs	r3, #52	; 0x34
 800772e:	fb03 f301 	mul.w	r3, r3, r1
 8007732:	4413      	add	r3, r2
 8007734:	3391      	adds	r3, #145	; 0x91
 8007736:	2202      	movs	r2, #2
 8007738:	701a      	strb	r2, [r3, #0]
            break;
 800773a:	e1ca      	b.n	8007ad2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fe66 	bl	8008418 <USBH_MSC_SCSI_TestUnitReady>
 800774c:	4603      	mov	r3, r0
 800774e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d149      	bne.n	80077ea <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800775c:	4619      	mov	r1, r3
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	2334      	movs	r3, #52	; 0x34
 8007762:	fb03 f301 	mul.w	r3, r3, r1
 8007766:	4413      	add	r3, r2
 8007768:	3392      	adds	r3, #146	; 0x92
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007776:	4619      	mov	r1, r3
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	2334      	movs	r3, #52	; 0x34
 800777c:	fb03 f301 	mul.w	r3, r3, r1
 8007780:	4413      	add	r3, r2
 8007782:	33c1      	adds	r3, #193	; 0xc1
 8007784:	2201      	movs	r2, #1
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e00b      	b.n	80077a2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007790:	4619      	mov	r1, r3
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	2334      	movs	r3, #52	; 0x34
 8007796:	fb03 f301 	mul.w	r3, r3, r1
 800779a:	4413      	add	r3, r2
 800779c:	33c1      	adds	r3, #193	; 0xc1
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077a8:	4619      	mov	r1, r3
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	2334      	movs	r3, #52	; 0x34
 80077ae:	fb03 f301 	mul.w	r3, r3, r1
 80077b2:	4413      	add	r3, r2
 80077b4:	3390      	adds	r3, #144	; 0x90
 80077b6:	2203      	movs	r2, #3
 80077b8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077c0:	4619      	mov	r1, r3
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	2334      	movs	r3, #52	; 0x34
 80077c6:	fb03 f301 	mul.w	r3, r3, r1
 80077ca:	4413      	add	r3, r2
 80077cc:	3391      	adds	r3, #145	; 0x91
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077d8:	4619      	mov	r1, r3
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	2334      	movs	r3, #52	; 0x34
 80077de:	fb03 f301 	mul.w	r3, r3, r1
 80077e2:	4413      	add	r3, r2
 80077e4:	3392      	adds	r3, #146	; 0x92
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d14a      	bne.n	8007886 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077f6:	4619      	mov	r1, r3
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	2334      	movs	r3, #52	; 0x34
 80077fc:	fb03 f301 	mul.w	r3, r3, r1
 8007800:	4413      	add	r3, r2
 8007802:	3392      	adds	r3, #146	; 0x92
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d00c      	beq.n	8007824 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007810:	4619      	mov	r1, r3
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	2334      	movs	r3, #52	; 0x34
 8007816:	fb03 f301 	mul.w	r3, r3, r1
 800781a:	4413      	add	r3, r2
 800781c:	33c1      	adds	r3, #193	; 0xc1
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e00b      	b.n	800783c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800782a:	4619      	mov	r1, r3
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	2334      	movs	r3, #52	; 0x34
 8007830:	fb03 f301 	mul.w	r3, r3, r1
 8007834:	4413      	add	r3, r2
 8007836:	33c1      	adds	r3, #193	; 0xc1
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007842:	4619      	mov	r1, r3
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	2334      	movs	r3, #52	; 0x34
 8007848:	fb03 f301 	mul.w	r3, r3, r1
 800784c:	4413      	add	r3, r2
 800784e:	3390      	adds	r3, #144	; 0x90
 8007850:	2205      	movs	r2, #5
 8007852:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800785a:	4619      	mov	r1, r3
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	2334      	movs	r3, #52	; 0x34
 8007860:	fb03 f301 	mul.w	r3, r3, r1
 8007864:	4413      	add	r3, r2
 8007866:	3391      	adds	r3, #145	; 0x91
 8007868:	2201      	movs	r2, #1
 800786a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007872:	4619      	mov	r1, r3
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	2334      	movs	r3, #52	; 0x34
 8007878:	fb03 f301 	mul.w	r3, r3, r1
 800787c:	4413      	add	r3, r2
 800787e:	3392      	adds	r3, #146	; 0x92
 8007880:	2202      	movs	r2, #2
 8007882:	701a      	strb	r2, [r3, #0]
            break;
 8007884:	e127      	b.n	8007ad6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b04      	cmp	r3, #4
 800788a:	f040 8124 	bne.w	8007ad6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007894:	4619      	mov	r1, r3
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	2334      	movs	r3, #52	; 0x34
 800789a:	fb03 f301 	mul.w	r3, r3, r1
 800789e:	4413      	add	r3, r2
 80078a0:	3390      	adds	r3, #144	; 0x90
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078ac:	4619      	mov	r1, r3
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	2334      	movs	r3, #52	; 0x34
 80078b2:	fb03 f301 	mul.w	r3, r3, r1
 80078b6:	4413      	add	r3, r2
 80078b8:	3391      	adds	r3, #145	; 0x91
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
            break;
 80078be:	e10a      	b.n	8007ad6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078c6:	b2d9      	uxtb	r1, r3
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078ce:	461a      	mov	r2, r3
 80078d0:	2334      	movs	r3, #52	; 0x34
 80078d2:	fb03 f302 	mul.w	r3, r3, r2
 80078d6:	3390      	adds	r3, #144	; 0x90
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4413      	add	r3, r2
 80078dc:	3304      	adds	r3, #4
 80078de:	461a      	mov	r2, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fddc 	bl	800849e <USBH_MSC_SCSI_ReadCapacity>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d120      	bne.n	8007932 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078f6:	4619      	mov	r1, r3
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	2334      	movs	r3, #52	; 0x34
 80078fc:	fb03 f301 	mul.w	r3, r3, r1
 8007900:	4413      	add	r3, r2
 8007902:	3390      	adds	r3, #144	; 0x90
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800790e:	4619      	mov	r1, r3
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	2334      	movs	r3, #52	; 0x34
 8007914:	fb03 f301 	mul.w	r3, r3, r1
 8007918:	4413      	add	r3, r2
 800791a:	3391      	adds	r3, #145	; 0x91
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007926:	3301      	adds	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007930:	e0d3      	b.n	8007ada <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d10c      	bne.n	8007952 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800793e:	4619      	mov	r1, r3
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	2334      	movs	r3, #52	; 0x34
 8007944:	fb03 f301 	mul.w	r3, r3, r1
 8007948:	4413      	add	r3, r2
 800794a:	3390      	adds	r3, #144	; 0x90
 800794c:	2205      	movs	r2, #5
 800794e:	701a      	strb	r2, [r3, #0]
            break;
 8007950:	e0c3      	b.n	8007ada <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2b04      	cmp	r3, #4
 8007956:	f040 80c0 	bne.w	8007ada <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007960:	4619      	mov	r1, r3
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	2334      	movs	r3, #52	; 0x34
 8007966:	fb03 f301 	mul.w	r3, r3, r1
 800796a:	4413      	add	r3, r2
 800796c:	3390      	adds	r3, #144	; 0x90
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007978:	4619      	mov	r1, r3
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	2334      	movs	r3, #52	; 0x34
 800797e:	fb03 f301 	mul.w	r3, r3, r1
 8007982:	4413      	add	r3, r2
 8007984:	3391      	adds	r3, #145	; 0x91
 8007986:	2202      	movs	r2, #2
 8007988:	701a      	strb	r2, [r3, #0]
            break;
 800798a:	e0a6      	b.n	8007ada <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007992:	b2d9      	uxtb	r1, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800799a:	461a      	mov	r2, r3
 800799c:	2334      	movs	r3, #52	; 0x34
 800799e:	fb03 f302 	mul.w	r3, r3, r2
 80079a2:	3398      	adds	r3, #152	; 0x98
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	3304      	adds	r3, #4
 80079aa:	461a      	mov	r2, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fe96 	bl	80086de <USBH_MSC_SCSI_RequestSense>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d145      	bne.n	8007a48 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079c2:	4619      	mov	r1, r3
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	2334      	movs	r3, #52	; 0x34
 80079c8:	fb03 f301 	mul.w	r3, r3, r1
 80079cc:	4413      	add	r3, r2
 80079ce:	339c      	adds	r3, #156	; 0x9c
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b06      	cmp	r3, #6
 80079d4:	d00c      	beq.n	80079f0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079dc:	4619      	mov	r1, r3
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	2334      	movs	r3, #52	; 0x34
 80079e2:	fb03 f301 	mul.w	r3, r3, r1
 80079e6:	4413      	add	r3, r2
 80079e8:	339c      	adds	r3, #156	; 0x9c
 80079ea:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d117      	bne.n	8007a20 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d80c      	bhi.n	8007a20 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	2334      	movs	r3, #52	; 0x34
 8007a12:	fb03 f301 	mul.w	r3, r3, r1
 8007a16:	4413      	add	r3, r2
 8007a18:	3390      	adds	r3, #144	; 0x90
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	701a      	strb	r2, [r3, #0]
                  break;
 8007a1e:	e05f      	b.n	8007ae0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a26:	4619      	mov	r1, r3
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	2334      	movs	r3, #52	; 0x34
 8007a2c:	fb03 f301 	mul.w	r3, r3, r1
 8007a30:	4413      	add	r3, r2
 8007a32:	3390      	adds	r3, #144	; 0x90
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a3e:	3301      	adds	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d10c      	bne.n	8007a68 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a54:	4619      	mov	r1, r3
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	2334      	movs	r3, #52	; 0x34
 8007a5a:	fb03 f301 	mul.w	r3, r3, r1
 8007a5e:	4413      	add	r3, r2
 8007a60:	3390      	adds	r3, #144	; 0x90
 8007a62:	2208      	movs	r2, #8
 8007a64:	701a      	strb	r2, [r3, #0]
            break;
 8007a66:	e03a      	b.n	8007ade <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d137      	bne.n	8007ade <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a74:	4619      	mov	r1, r3
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	2334      	movs	r3, #52	; 0x34
 8007a7a:	fb03 f301 	mul.w	r3, r3, r1
 8007a7e:	4413      	add	r3, r2
 8007a80:	3390      	adds	r3, #144	; 0x90
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	2334      	movs	r3, #52	; 0x34
 8007a92:	fb03 f301 	mul.w	r3, r3, r1
 8007a96:	4413      	add	r3, r2
 8007a98:	3391      	adds	r3, #145	; 0x91
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
            break;
 8007a9e:	e01e      	b.n	8007ade <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007ab0:	e016      	b.n	8007ae0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2201      	movs	r2, #1
 8007abe:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      break;
 8007acc:	e00c      	b.n	8007ae8 <USBH_MSC_Process+0x514>
            break;
 8007ace:	bf00      	nop
 8007ad0:	e00a      	b.n	8007ae8 <USBH_MSC_Process+0x514>
            break;
 8007ad2:	bf00      	nop
 8007ad4:	e008      	b.n	8007ae8 <USBH_MSC_Process+0x514>
            break;
 8007ad6:	bf00      	nop
 8007ad8:	e006      	b.n	8007ae8 <USBH_MSC_Process+0x514>
            break;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <USBH_MSC_Process+0x514>
            break;
 8007ade:	bf00      	nop
      break;
 8007ae0:	e002      	b.n	8007ae8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae6:	bf00      	nop
  }
  return error;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b088      	sub	sp, #32
 8007b0e:	af02      	add	r7, sp, #8
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007b20:	2301      	movs	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	2134      	movs	r1, #52	; 0x34
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	4413      	add	r3, r2
 8007b34:	3390      	adds	r3, #144	; 0x90
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b07      	cmp	r3, #7
 8007b3a:	d03c      	beq.n	8007bb6 <USBH_MSC_RdWrProcess+0xac>
 8007b3c:	2b07      	cmp	r3, #7
 8007b3e:	f300 80a7 	bgt.w	8007c90 <USBH_MSC_RdWrProcess+0x186>
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d06c      	beq.n	8007c20 <USBH_MSC_RdWrProcess+0x116>
 8007b46:	2b06      	cmp	r3, #6
 8007b48:	f040 80a2 	bne.w	8007c90 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007b4c:	78f9      	ldrb	r1, [r7, #3]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	2300      	movs	r3, #0
 8007b54:	2200      	movs	r2, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fea5 	bl	80088a6 <USBH_MSC_SCSI_Read>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10b      	bne.n	8007b7e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	2134      	movs	r1, #52	; 0x34
 8007b6c:	fb01 f303 	mul.w	r3, r1, r3
 8007b70:	4413      	add	r3, r2
 8007b72:	3390      	adds	r3, #144	; 0x90
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b7c:	e08a      	b.n	8007c94 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d109      	bne.n	8007b98 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	2134      	movs	r1, #52	; 0x34
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	3390      	adds	r3, #144	; 0x90
 8007b92:	2205      	movs	r2, #5
 8007b94:	701a      	strb	r2, [r3, #0]
      break;
 8007b96:	e07d      	b.n	8007c94 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d17a      	bne.n	8007c94 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	2134      	movs	r1, #52	; 0x34
 8007ba4:	fb01 f303 	mul.w	r3, r1, r3
 8007ba8:	4413      	add	r3, r2
 8007baa:	3390      	adds	r3, #144	; 0x90
 8007bac:	2208      	movs	r2, #8
 8007bae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb4:	e06e      	b.n	8007c94 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007bb6:	78f9      	ldrb	r1, [r7, #3]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fe05 	bl	80087d0 <USBH_MSC_SCSI_Write>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	2134      	movs	r1, #52	; 0x34
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	3390      	adds	r3, #144	; 0x90
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007be6:	e057      	b.n	8007c98 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d109      	bne.n	8007c02 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	2134      	movs	r1, #52	; 0x34
 8007bf4:	fb01 f303 	mul.w	r3, r1, r3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3390      	adds	r3, #144	; 0x90
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	701a      	strb	r2, [r3, #0]
      break;
 8007c00:	e04a      	b.n	8007c98 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d147      	bne.n	8007c98 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	2134      	movs	r1, #52	; 0x34
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	4413      	add	r3, r2
 8007c14:	3390      	adds	r3, #144	; 0x90
 8007c16:	2208      	movs	r2, #8
 8007c18:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1e:	e03b      	b.n	8007c98 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	2234      	movs	r2, #52	; 0x34
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
 8007c28:	3398      	adds	r3, #152	; 0x98
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fd52 	bl	80086de <USBH_MSC_SCSI_RequestSense>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d113      	bne.n	8007c6c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	2134      	movs	r1, #52	; 0x34
 8007c4a:	fb01 f303 	mul.w	r3, r1, r3
 8007c4e:	4413      	add	r3, r2
 8007c50:	3390      	adds	r3, #144	; 0x90
 8007c52:	2201      	movs	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	2134      	movs	r1, #52	; 0x34
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	3391      	adds	r3, #145	; 0x91
 8007c64:	2202      	movs	r2, #2
 8007c66:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d014      	beq.n	8007c9c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d111      	bne.n	8007c9c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	2134      	movs	r1, #52	; 0x34
 8007c7e:	fb01 f303 	mul.w	r3, r1, r3
 8007c82:	4413      	add	r3, r2
 8007c84:	3390      	adds	r3, #144	; 0x90
 8007c86:	2208      	movs	r2, #8
 8007c88:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c8e:	e005      	b.n	8007c9c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8007c90:	bf00      	nop
 8007c92:	e004      	b.n	8007c9e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007c94:	bf00      	nop
 8007c96:	e002      	b.n	8007c9e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007c98:	bf00      	nop
 8007c9a:	e000      	b.n	8007c9e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007c9c:	bf00      	nop

  }
  return error;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b0b      	cmp	r3, #11
 8007cc6:	d10c      	bne.n	8007ce2 <USBH_MSC_UnitIsReady+0x3a>
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	2134      	movs	r1, #52	; 0x34
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	3391      	adds	r3, #145	; 0x91
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	e001      	b.n	8007ce6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b0b      	cmp	r3, #11
 8007d14:	d10d      	bne.n	8007d32 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	2234      	movs	r2, #52	; 0x34
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
 8007d1e:	3390      	adds	r3, #144	; 0x90
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4413      	add	r3, r2
 8007d24:	2234      	movs	r2, #52	; 0x34
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f006 f803 	bl	800dd34 <memcpy>
    return USBH_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e000      	b.n	8007d34 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007d32:	2302      	movs	r3, #2
  }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	607a      	str	r2, [r7, #4]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007d68:	2b0b      	cmp	r3, #11
 8007d6a:	d109      	bne.n	8007d80 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	2134      	movs	r1, #52	; 0x34
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	4413      	add	r3, r2
 8007d78:	3390      	adds	r3, #144	; 0x90
 8007d7a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d001      	beq.n	8007d84 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007d80:	2302      	movs	r3, #2
 8007d82:	e040      	b.n	8007e06 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2206      	movs	r2, #6
 8007d88:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	2134      	movs	r1, #52	; 0x34
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	4413      	add	r3, r2
 8007d96:	3390      	adds	r3, #144	; 0x90
 8007d98:	2206      	movs	r2, #6
 8007d9a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007da6:	7af9      	ldrb	r1, [r7, #11]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fd78 	bl	80088a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dbc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007dbe:	e016      	b.n	8007dee <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad2      	subs	r2, r2, r3
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	f242 7110 	movw	r1, #10000	; 0x2710
 8007dd0:	fb01 f303 	mul.w	r3, r1, r3
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d805      	bhi.n	8007de4 <USBH_MSC_Read+0xa8>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2201      	movs	r2, #1
 8007de8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007dea:	2302      	movs	r3, #2
 8007dec:	e00b      	b.n	8007e06 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	4619      	mov	r1, r3
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fe89 	bl	8007b0a <USBH_MSC_RdWrProcess>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d0e0      	beq.n	8007dc0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2201      	movs	r2, #1
 8007e02:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b088      	sub	sp, #32
 8007e12:	af02      	add	r7, sp, #8
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00e      	beq.n	8007e52 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007e3a:	2b0b      	cmp	r3, #11
 8007e3c:	d109      	bne.n	8007e52 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	2134      	movs	r1, #52	; 0x34
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	3390      	adds	r3, #144	; 0x90
 8007e4c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d001      	beq.n	8007e56 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007e52:	2302      	movs	r3, #2
 8007e54:	e040      	b.n	8007ed8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2207      	movs	r2, #7
 8007e5a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	2134      	movs	r1, #52	; 0x34
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	3390      	adds	r3, #144	; 0x90
 8007e6a:	2207      	movs	r2, #7
 8007e6c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007e78:	7af9      	ldrb	r1, [r7, #11]
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fca4 	bl	80087d0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e8e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e90:	e016      	b.n	8007ec0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	1ad2      	subs	r2, r2, r3
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007ea2:	fb01 f303 	mul.w	r3, r1, r3
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d805      	bhi.n	8007eb6 <USBH_MSC_Write+0xa8>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e00b      	b.n	8007ed8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff fe20 	bl	8007b0a <USBH_MSC_RdWrProcess>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d0e0      	beq.n	8007e92 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2221      	movs	r2, #33	; 0x21
 8007eec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fdab 	bl	8009a66 <USBH_CtlReq>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	22a1      	movs	r2, #161	; 0xa1
 8007f28:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	22fe      	movs	r2, #254	; 0xfe
 8007f2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007f42:	2201      	movs	r2, #1
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fd8d 	bl	8009a66 <USBH_CtlReq>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <USBH_MSC_BOT_Init+0x3c>)
 8007f6e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a09      	ldr	r2, [pc, #36]	; (8007f98 <USBH_MSC_BOT_Init+0x40>)
 8007f74:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	43425355 	.word	0x43425355
 8007f98:	20304050 	.word	0x20304050

08007f9c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	2b0a      	cmp	r3, #10
 8007fd0:	f200 819e 	bhi.w	8008310 <USBH_MSC_BOT_Process+0x374>
 8007fd4:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <USBH_MSC_BOT_Process+0x40>)
 8007fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fda:	bf00      	nop
 8007fdc:	08008009 	.word	0x08008009
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	0800809b 	.word	0x0800809b
 8007fe8:	080080b9 	.word	0x080080b9
 8007fec:	0800813d 	.word	0x0800813d
 8007ff0:	0800815f 	.word	0x0800815f
 8007ff4:	080081f7 	.word	0x080081f7
 8007ff8:	08008213 	.word	0x08008213
 8007ffc:	08008265 	.word	0x08008265
 8008000:	08008295 	.word	0x08008295
 8008004:	080082f7 	.word	0x080082f7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	795b      	ldrb	r3, [r3, #5]
 8008022:	2201      	movs	r2, #1
 8008024:	9200      	str	r2, [sp, #0]
 8008026:	221f      	movs	r2, #31
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 ff2a 	bl	8009e82 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800802e:	e17e      	b.n	800832e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	795b      	ldrb	r3, [r3, #5]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f005 fd8a 	bl	800db50 <USBH_LL_GetURBState>
 800803c:	4603      	mov	r3, r0
 800803e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008040:	7d3b      	ldrb	r3, [r7, #20]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d118      	bne.n	8008078 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00f      	beq.n	800806e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008054:	b25b      	sxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	da04      	bge.n	8008064 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2203      	movs	r2, #3
 800805e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008062:	e157      	b.n	8008314 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2205      	movs	r2, #5
 8008068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800806c:	e152      	b.n	8008314 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2207      	movs	r2, #7
 8008072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008076:	e14d      	b.n	8008314 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008078:	7d3b      	ldrb	r3, [r7, #20]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d104      	bne.n	8008088 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008086:	e145      	b.n	8008314 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008088:	7d3b      	ldrb	r3, [r7, #20]
 800808a:	2b05      	cmp	r3, #5
 800808c:	f040 8142 	bne.w	8008314 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	220a      	movs	r2, #10
 8008094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008098:	e13c      	b.n	8008314 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	895a      	ldrh	r2, [r3, #10]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	791b      	ldrb	r3, [r3, #4]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 ff0f 	bl	8009ecc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2204      	movs	r2, #4
 80080b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80080b6:	e13a      	b.n	800832e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	791b      	ldrb	r3, [r3, #4]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f005 fd46 	bl	800db50 <USBH_LL_GetURBState>
 80080c4:	4603      	mov	r3, r0
 80080c6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80080c8:	7d3b      	ldrb	r3, [r7, #20]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d12d      	bne.n	800812a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	8952      	ldrh	r2, [r2, #10]
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d910      	bls.n	80080fc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	8952      	ldrh	r2, [r2, #10]
 80080e4:	441a      	add	r2, r3
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	8952      	ldrh	r2, [r2, #10]
 80080f4:	1a9a      	subs	r2, r3, r2
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80080fa:	e002      	b.n	8008102 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2200      	movs	r2, #0
 8008100:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	895a      	ldrh	r2, [r3, #10]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	791b      	ldrb	r3, [r3, #4]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 fed7 	bl	8009ecc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800811e:	e0fb      	b.n	8008318 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2207      	movs	r2, #7
 8008124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008128:	e0f6      	b.n	8008318 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800812a:	7d3b      	ldrb	r3, [r7, #20]
 800812c:	2b05      	cmp	r3, #5
 800812e:	f040 80f3 	bne.w	8008318 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2209      	movs	r2, #9
 8008136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800813a:	e0ed      	b.n	8008318 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	891a      	ldrh	r2, [r3, #8]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	795b      	ldrb	r3, [r3, #5]
 800814a:	2001      	movs	r0, #1
 800814c:	9000      	str	r0, [sp, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fe97 	bl	8009e82 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2206      	movs	r2, #6
 8008158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800815c:	e0e7      	b.n	800832e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	795b      	ldrb	r3, [r3, #5]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f005 fcf3 	bl	800db50 <USBH_LL_GetURBState>
 800816a:	4603      	mov	r3, r0
 800816c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800816e:	7d3b      	ldrb	r3, [r7, #20]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d12f      	bne.n	80081d4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	8912      	ldrh	r2, [r2, #8]
 800817c:	4293      	cmp	r3, r2
 800817e:	d910      	bls.n	80081a2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	8912      	ldrh	r2, [r2, #8]
 800818a:	441a      	add	r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	8912      	ldrh	r2, [r2, #8]
 800819a:	1a9a      	subs	r2, r3, r2
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	65da      	str	r2, [r3, #92]	; 0x5c
 80081a0:	e002      	b.n	80081a8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2200      	movs	r2, #0
 80081a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00c      	beq.n	80081ca <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	891a      	ldrh	r2, [r3, #8]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	795b      	ldrb	r3, [r3, #5]
 80081be:	2001      	movs	r0, #1
 80081c0:	9000      	str	r0, [sp, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fe5d 	bl	8009e82 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80081c8:	e0a8      	b.n	800831c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2207      	movs	r2, #7
 80081ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081d2:	e0a3      	b.n	800831c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081d4:	7d3b      	ldrb	r3, [r7, #20]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d104      	bne.n	80081e4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2205      	movs	r2, #5
 80081de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081e2:	e09b      	b.n	800831c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80081e4:	7d3b      	ldrb	r3, [r7, #20]
 80081e6:	2b05      	cmp	r3, #5
 80081e8:	f040 8098 	bne.w	800831c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	220a      	movs	r2, #10
 80081f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081f4:	e092      	b.n	800831c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	791b      	ldrb	r3, [r3, #4]
 8008200:	220d      	movs	r2, #13
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fe62 	bl	8009ecc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2208      	movs	r2, #8
 800820c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008210:	e08d      	b.n	800832e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	791b      	ldrb	r3, [r3, #4]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f005 fc99 	bl	800db50 <USBH_LL_GetURBState>
 800821e:	4603      	mov	r3, r0
 8008220:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008222:	7d3b      	ldrb	r3, [r7, #20]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d115      	bne.n	8008254 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f8a9 	bl	8008390 <USBH_MSC_DecodeCSW>
 800823e:	4603      	mov	r3, r0
 8008240:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008242:	7d7b      	ldrb	r3, [r7, #21]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d102      	bne.n	800824e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800824c:	e068      	b.n	8008320 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	75fb      	strb	r3, [r7, #23]
      break;
 8008252:	e065      	b.n	8008320 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008254:	7d3b      	ldrb	r3, [r7, #20]
 8008256:	2b05      	cmp	r3, #5
 8008258:	d162      	bne.n	8008320 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2209      	movs	r2, #9
 800825e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008262:	e05d      	b.n	8008320 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	2200      	movs	r2, #0
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f864 	bl	8008338 <USBH_MSC_BOT_Abort>
 8008270:	4603      	mov	r3, r0
 8008272:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008274:	7dbb      	ldrb	r3, [r7, #22]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d104      	bne.n	8008284 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2207      	movs	r2, #7
 800827e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008282:	e04f      	b.n	8008324 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008284:	7dbb      	ldrb	r3, [r7, #22]
 8008286:	2b04      	cmp	r3, #4
 8008288:	d14c      	bne.n	8008324 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	220b      	movs	r2, #11
 800828e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008292:	e047      	b.n	8008324 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	2201      	movs	r2, #1
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f84c 	bl	8008338 <USBH_MSC_BOT_Abort>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80082a4:	7dbb      	ldrb	r3, [r7, #22]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d11d      	bne.n	80082e6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	795b      	ldrb	r3, [r3, #5]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f005 fc9e 	bl	800dbf2 <USBH_LL_GetToggle>
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	7959      	ldrb	r1, [r3, #5]
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	f1c3 0301 	rsb	r3, r3, #1
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f005 fc62 	bl	800db92 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f005 fc5b 	bl	800db92 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2209      	movs	r2, #9
 80082e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80082e4:	e020      	b.n	8008328 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80082e6:	7dbb      	ldrb	r3, [r7, #22]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d11d      	bne.n	8008328 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	220b      	movs	r2, #11
 80082f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80082f4:	e018      	b.n	8008328 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff fdf2 	bl	8007ee0 <USBH_MSC_BOT_REQ_Reset>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d112      	bne.n	800832c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800830e:	e00d      	b.n	800832c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008310:	bf00      	nop
 8008312:	e00c      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 8008314:	bf00      	nop
 8008316:	e00a      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 8008318:	bf00      	nop
 800831a:	e008      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 800831c:	bf00      	nop
 800831e:	e006      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 8008320:	bf00      	nop
 8008322:	e004      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 8008324:	bf00      	nop
 8008326:	e002      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <USBH_MSC_BOT_Process+0x392>
      break;
 800832c:	bf00      	nop
  }
  return status;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
 8008344:	4613      	mov	r3, r2
 8008346:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008356:	78bb      	ldrb	r3, [r7, #2]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <USBH_MSC_BOT_Abort+0x2a>
 800835c:	2b01      	cmp	r3, #1
 800835e:	d009      	beq.n	8008374 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008360:	e011      	b.n	8008386 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	79db      	ldrb	r3, [r3, #7]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f99c 	bl	80096a6 <USBH_ClrFeature>
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e008      	b.n	8008386 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	799b      	ldrb	r3, [r3, #6]
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 f993 	bl	80096a6 <USBH_ClrFeature>
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	bf00      	nop
  }
  return status;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80083a2:	2301      	movs	r3, #1
 80083a4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	791b      	ldrb	r3, [r3, #4]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f005 fb3d 	bl	800da2c <USBH_LL_GetLastXferSize>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b0d      	cmp	r3, #13
 80083b6:	d002      	beq.n	80083be <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80083b8:	2302      	movs	r3, #2
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	e024      	b.n	8008408 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c2:	4a14      	ldr	r2, [pc, #80]	; (8008414 <USBH_MSC_DecodeCSW+0x84>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d11d      	bne.n	8008404 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d119      	bne.n	8008408 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	e011      	b.n	8008408 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d102      	bne.n	80083f4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
 80083f2:	e009      	b.n	8008408 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d104      	bne.n	8008408 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80083fe:	2302      	movs	r3, #2
 8008400:	73fb      	strb	r3, [r7, #15]
 8008402:	e001      	b.n	8008408 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008404:	2302      	movs	r3, #2
 8008406:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008408:	7bfb      	ldrb	r3, [r7, #15]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	53425355 	.word	0x53425355

08008418 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008424:	2302      	movs	r3, #2
 8008426:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008438:	2b01      	cmp	r3, #1
 800843a:	d002      	beq.n	8008442 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800843c:	2b02      	cmp	r3, #2
 800843e:	d021      	beq.n	8008484 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008440:	e028      	b.n	8008494 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2200      	movs	r2, #0
 8008446:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	220a      	movs	r2, #10
 8008454:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	3363      	adds	r3, #99	; 0x63
 800845c:	2210      	movs	r2, #16
 800845e:	2100      	movs	r1, #0
 8008460:	4618      	mov	r0, r3
 8008462:	f005 fc75 	bl	800dd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2202      	movs	r2, #2
 800847a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800847e:	2301      	movs	r3, #1
 8008480:	73fb      	strb	r3, [r7, #15]
      break;
 8008482:	e007      	b.n	8008494 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff fd87 	bl	8007f9c <USBH_MSC_BOT_Process>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
      break;
 8008492:	bf00      	nop
  }

  return error;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	460b      	mov	r3, r1
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d002      	beq.n	80084ca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d027      	beq.n	8008518 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80084c8:	e05f      	b.n	800858a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2208      	movs	r2, #8
 80084ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2280      	movs	r2, #128	; 0x80
 80084d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	220a      	movs	r2, #10
 80084dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3363      	adds	r3, #99	; 0x63
 80084e4:	2210      	movs	r2, #16
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f005 fc31 	bl	800dd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2225      	movs	r2, #37	; 0x25
 80084f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f103 0210 	add.w	r2, r3, #16
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008512:	2301      	movs	r3, #1
 8008514:	75fb      	strb	r3, [r7, #23]
      break;
 8008516:	e038      	b.n	800858a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff fd3d 	bl	8007f9c <USBH_MSC_BOT_Process>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d12d      	bne.n	8008588 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008532:	3303      	adds	r3, #3
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800853e:	3302      	adds	r3, #2
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800854c:	3301      	adds	r3, #1
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008552:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	061b      	lsls	r3, r3, #24
 800855e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800856a:	3307      	adds	r3, #7
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	b29a      	uxth	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008576:	3306      	adds	r3, #6
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	b29b      	uxth	r3, r3
 8008580:	4313      	orrs	r3, r2
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	809a      	strh	r2, [r3, #4]
      break;
 8008588:	bf00      	nop
  }

  return error;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	460b      	mov	r3, r1
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d002      	beq.n	80085c0 <USBH_MSC_SCSI_Inquiry+0x2c>
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d03d      	beq.n	800863a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80085be:	e089      	b.n	80086d4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2224      	movs	r2, #36	; 0x24
 80085c4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2280      	movs	r2, #128	; 0x80
 80085ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	220a      	movs	r2, #10
 80085d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3363      	adds	r3, #99	; 0x63
 80085da:	220a      	movs	r2, #10
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f005 fbb6 	bl	800dd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2212      	movs	r2, #18
 80085e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	015b      	lsls	r3, r3, #5
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2224      	movs	r2, #36	; 0x24
 800860c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f103 0210 	add.w	r2, r3, #16
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008634:	2301      	movs	r3, #1
 8008636:	75fb      	strb	r3, [r7, #23]
      break;
 8008638:	e04c      	b.n	80086d4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800863a:	7afb      	ldrb	r3, [r7, #11]
 800863c:	4619      	mov	r1, r3
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fcac 	bl	8007f9c <USBH_MSC_BOT_Process>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d141      	bne.n	80086d2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800864e:	2222      	movs	r2, #34	; 0x22
 8008650:	2100      	movs	r1, #0
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f005 fb7c 	bl	800dd50 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	b2da      	uxtb	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008680:	3301      	adds	r3, #1
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b25b      	sxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	da03      	bge.n	8008692 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	709a      	strb	r2, [r3, #2]
 8008690:	e002      	b.n	8008698 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	1cd8      	adds	r0, r3, #3
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a2:	3308      	adds	r3, #8
 80086a4:	2208      	movs	r2, #8
 80086a6:	4619      	mov	r1, r3
 80086a8:	f005 fb44 	bl	800dd34 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f103 000c 	add.w	r0, r3, #12
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b8:	3310      	adds	r3, #16
 80086ba:	2210      	movs	r2, #16
 80086bc:	4619      	mov	r1, r3
 80086be:	f005 fb39 	bl	800dd34 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	331d      	adds	r3, #29
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80086cc:	3220      	adds	r2, #32
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	601a      	str	r2, [r3, #0]
      break;
 80086d2:	bf00      	nop
  }

  return error;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	460b      	mov	r3, r1
 80086e8:	607a      	str	r2, [r7, #4]
 80086ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80086ec:	2302      	movs	r3, #2
 80086ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008700:	2b01      	cmp	r3, #1
 8008702:	d002      	beq.n	800870a <USBH_MSC_SCSI_RequestSense+0x2c>
 8008704:	2b02      	cmp	r3, #2
 8008706:	d03d      	beq.n	8008784 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008708:	e05d      	b.n	80087c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	220e      	movs	r2, #14
 800870e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2280      	movs	r2, #128	; 0x80
 8008714:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	220a      	movs	r2, #10
 800871c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3363      	adds	r3, #99	; 0x63
 8008724:	2210      	movs	r2, #16
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f005 fb11 	bl	800dd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2203      	movs	r2, #3
 8008732:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	015b      	lsls	r3, r3, #5
 800873a:	b2da      	uxtb	r2, r3
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	220e      	movs	r2, #14
 8008756:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f103 0210 	add.w	r2, r3, #16
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800877e:	2301      	movs	r3, #1
 8008780:	75fb      	strb	r3, [r7, #23]
      break;
 8008782:	e020      	b.n	80087c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008784:	7afb      	ldrb	r3, [r7, #11]
 8008786:	4619      	mov	r1, r3
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff fc07 	bl	8007f9c <USBH_MSC_BOT_Process>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d115      	bne.n	80087c4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800879e:	3302      	adds	r3, #2
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b2:	7b1a      	ldrb	r2, [r3, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087be:	7b5a      	ldrb	r2, [r3, #13]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	709a      	strb	r2, [r3, #2]
      break;
 80087c4:	bf00      	nop
  }

  return error;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	460b      	mov	r3, r1
 80087de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80087e0:	2302      	movs	r3, #2
 80087e2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d002      	beq.n	80087fe <USBH_MSC_SCSI_Write+0x2e>
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d047      	beq.n	800888c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80087fc:	e04e      	b.n	800889c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008804:	461a      	mov	r2, r3
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	fb03 f202 	mul.w	r2, r3, r2
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	220a      	movs	r2, #10
 800881c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	3363      	adds	r3, #99	; 0x63
 8008824:	2210      	movs	r2, #16
 8008826:	2100      	movs	r1, #0
 8008828:	4618      	mov	r0, r3
 800882a:	f005 fa91 	bl	800dd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	222a      	movs	r2, #42	; 0x2a
 8008832:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008836:	79fa      	ldrb	r2, [r7, #7]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800883e:	79ba      	ldrb	r2, [r7, #6]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008846:	797a      	ldrb	r2, [r7, #5]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	781a      	ldrb	r2, [r3, #0]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008858:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008862:	f107 0320 	add.w	r3, r7, #32
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	2202      	movs	r2, #2
 800887a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
      break;
 800888a:	e007      	b.n	800889c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	4619      	mov	r1, r3
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f7ff fb83 	bl	8007f9c <USBH_MSC_BOT_Process>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
      break;
 800889a:	bf00      	nop
  }

  return error;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
 80088b2:	460b      	mov	r3, r1
 80088b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80088b6:	2302      	movs	r3, #2
 80088b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d002      	beq.n	80088d4 <USBH_MSC_SCSI_Read+0x2e>
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d047      	beq.n	8008962 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80088d2:	e04e      	b.n	8008972 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80088da:	461a      	mov	r2, r3
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	fb03 f202 	mul.w	r2, r3, r2
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2280      	movs	r2, #128	; 0x80
 80088ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	220a      	movs	r2, #10
 80088f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	3363      	adds	r3, #99	; 0x63
 80088fa:	2210      	movs	r2, #16
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f005 fa26 	bl	800dd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2228      	movs	r2, #40	; 0x28
 8008908:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800890c:	79fa      	ldrb	r2, [r7, #7]
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008914:	79ba      	ldrb	r2, [r7, #6]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800891c:	797a      	ldrb	r2, [r7, #5]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800892e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008938:	f107 0320 	add.w	r3, r7, #32
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
      break;
 8008960:	e007      	b.n	8008972 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	4619      	mov	r1, r3
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff fb18 	bl	8007f9c <USBH_MSC_BOT_Process>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
      break;
 8008970:	bf00      	nop
  }

  return error;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008990:	2302      	movs	r3, #2
 8008992:	e029      	b.n	80089e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	79fa      	ldrb	r2, [r7, #7]
 8008998:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f81f 	bl	80089f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f004 ff6f 	bl	800d8c4 <USBH_LL_Init>

  return USBH_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e009      	b.n	8008a16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	33e0      	adds	r3, #224	; 0xe0
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b0e      	cmp	r3, #14
 8008a1a:	d9f2      	bls.n	8008a02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e009      	b.n	8008a36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a3c:	d3f1      	bcc.n	8008a22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2240      	movs	r2, #64	; 0x40
 8008a62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d016      	beq.n	8008ada <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10e      	bne.n	8008ad4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	33de      	adds	r3, #222	; 0xde
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
 8008ad2:	e004      	b.n	8008ade <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	73fb      	strb	r3, [r7, #15]
 8008ad8:	e001      	b.n	8008ade <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ada:	2302      	movs	r3, #2
 8008adc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d204      	bcs.n	8008b12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	78fa      	ldrb	r2, [r7, #3]
 8008b0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008b10:	e001      	b.n	8008b16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008b12:	2302      	movs	r3, #2
 8008b14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4611      	mov	r1, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	70fb      	strb	r3, [r7, #3]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70bb      	strb	r3, [r7, #2]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b4c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b4e:	e025      	b.n	8008b9c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	221a      	movs	r2, #26
 8008b54:	fb02 f303 	mul.w	r3, r2, r3
 8008b58:	3308      	adds	r3, #8
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3302      	adds	r3, #2
 8008b60:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	795b      	ldrb	r3, [r3, #5]
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d002      	beq.n	8008b72 <USBH_FindInterface+0x4e>
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	2bff      	cmp	r3, #255	; 0xff
 8008b70:	d111      	bne.n	8008b96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b76:	78ba      	ldrb	r2, [r7, #2]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d002      	beq.n	8008b82 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b7c:	78bb      	ldrb	r3, [r7, #2]
 8008b7e:	2bff      	cmp	r3, #255	; 0xff
 8008b80:	d109      	bne.n	8008b96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b86:	787a      	ldrb	r2, [r7, #1]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d002      	beq.n	8008b92 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b8c:	787b      	ldrb	r3, [r7, #1]
 8008b8e:	2bff      	cmp	r3, #255	; 0xff
 8008b90:	d101      	bne.n	8008b96 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	e006      	b.n	8008ba4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d9d6      	bls.n	8008b50 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ba2:	23ff      	movs	r3, #255	; 0xff
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f004 febf 	bl	800d93c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f004 ffd8 	bl	800db76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d102      	bne.n	8008bf2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b0b      	cmp	r3, #11
 8008bfa:	f200 81b3 	bhi.w	8008f64 <USBH_Process+0x394>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <USBH_Process+0x34>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c35 	.word	0x08008c35
 8008c08:	08008c67 	.word	0x08008c67
 8008c0c:	08008ccf 	.word	0x08008ccf
 8008c10:	08008eff 	.word	0x08008eff
 8008c14:	08008f65 	.word	0x08008f65
 8008c18:	08008d73 	.word	0x08008d73
 8008c1c:	08008ea5 	.word	0x08008ea5
 8008c20:	08008da9 	.word	0x08008da9
 8008c24:	08008dc9 	.word	0x08008dc9
 8008c28:	08008de9 	.word	0x08008de9
 8008c2c:	08008e17 	.word	0x08008e17
 8008c30:	08008ee7 	.word	0x08008ee7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8193 	beq.w	8008f68 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c48:	20c8      	movs	r0, #200	; 0xc8
 8008c4a:	f005 f802 	bl	800dc52 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f004 fed1 	bl	800d9f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c64:	e180      	b.n	8008f68 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d107      	bne.n	8008c80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c7e:	e182      	b.n	8008f86 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c8a:	d914      	bls.n	8008cb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c92:	3301      	adds	r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d903      	bls.n	8008cae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	220d      	movs	r2, #13
 8008caa:	701a      	strb	r2, [r3, #0]
      break;
 8008cac:	e16b      	b.n	8008f86 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
      break;
 8008cb4:	e167      	b.n	8008f86 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cbc:	f103 020a 	add.w	r2, r3, #10
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008cc6:	200a      	movs	r0, #10
 8008cc8:	f004 ffc3 	bl	800dc52 <USBH_Delay>
      break;
 8008ccc:	e15b      	b.n	8008f86 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cde:	2104      	movs	r1, #4
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ce4:	2064      	movs	r0, #100	; 0x64
 8008ce6:	f004 ffb4 	bl	800dc52 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f004 fe5c 	bl	800d9a8 <USBH_LL_GetSpeed>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f92f 	bl	8009f66 <USBH_AllocPipe>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d10:	2180      	movs	r1, #128	; 0x80
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 f927 	bl	8009f66 <USBH_AllocPipe>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7919      	ldrb	r1, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d34:	b292      	uxth	r2, r2
 8008d36:	9202      	str	r2, [sp, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	9201      	str	r2, [sp, #4]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2280      	movs	r2, #128	; 0x80
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 f8e0 	bl	8009f08 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7959      	ldrb	r1, [r3, #5]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d5c:	b292      	uxth	r2, r2
 8008d5e:	9202      	str	r2, [sp, #8]
 8008d60:	2200      	movs	r2, #0
 8008d62:	9201      	str	r2, [sp, #4]
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4603      	mov	r3, r0
 8008d68:	2200      	movs	r2, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 f8cc 	bl	8009f08 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d70:	e109      	b.n	8008f86 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f90c 	bl	8008f90 <USBH_HandleEnum>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f040 80f3 	bne.w	8008f6c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d103      	bne.n	8008da0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2208      	movs	r2, #8
 8008d9c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d9e:	e0e5      	b.n	8008f6c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2207      	movs	r2, #7
 8008da4:	701a      	strb	r2, [r3, #0]
      break;
 8008da6:	e0e1      	b.n	8008f6c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80de 	beq.w	8008f70 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008dc6:	e0d3      	b.n	8008f70 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fc20 	bl	8009618 <USBH_SetCfg>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f040 80ca 	bne.w	8008f74 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2209      	movs	r2, #9
 8008de4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008de6:	e0c5      	b.n	8008f74 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008df6:	2101      	movs	r1, #1
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc30 	bl	800965e <USBH_SetFeature>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 80b9 	bne.w	8008f78 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	220a      	movs	r2, #10
 8008e0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e0c:	e0b4      	b.n	8008f78 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	220a      	movs	r2, #10
 8008e12:	701a      	strb	r2, [r3, #0]
      break;
 8008e14:	e0b0      	b.n	8008f78 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80ad 	beq.w	8008f7c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
 8008e2e:	e016      	b.n	8008e5e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e30:	7bfa      	ldrb	r2, [r7, #15]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	32de      	adds	r2, #222	; 0xde
 8008e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3a:	791a      	ldrb	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d108      	bne.n	8008e58 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e46:	7bfa      	ldrb	r2, [r7, #15]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	32de      	adds	r2, #222	; 0xde
 8008e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e56:	e005      	b.n	8008e64 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d0e5      	beq.n	8008e30 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	4798      	blx	r3
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2206      	movs	r2, #6
 8008e84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e8c:	2103      	movs	r1, #3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e92:	e073      	b.n	8008f7c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	220d      	movs	r2, #13
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e06f      	b.n	8008f7c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	220d      	movs	r2, #13
 8008ea0:	701a      	strb	r2, [r3, #0]
      break;
 8008ea2:	e06b      	b.n	8008f7c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d017      	beq.n	8008ede <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d103      	bne.n	8008ece <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220b      	movs	r2, #11
 8008eca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ecc:	e058      	b.n	8008f80 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d154      	bne.n	8008f80 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	220d      	movs	r2, #13
 8008eda:	701a      	strb	r2, [r3, #0]
      break;
 8008edc:	e050      	b.n	8008f80 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	220d      	movs	r2, #13
 8008ee2:	701a      	strb	r2, [r3, #0]
      break;
 8008ee4:	e04c      	b.n	8008f80 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d049      	beq.n	8008f84 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
      }
      break;
 8008efc:	e042      	b.n	8008f84 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff fd72 	bl	80089f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f3a:	2105      	movs	r1, #5
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d107      	bne.n	8008f5c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fe2b 	bl	8008bb0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f5a:	e014      	b.n	8008f86 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f004 fced 	bl	800d93c <USBH_LL_Start>
      break;
 8008f62:	e010      	b.n	8008f86 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f64:	bf00      	nop
 8008f66:	e00e      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e00c      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e00a      	b.n	8008f86 <USBH_Process+0x3b6>
    break;
 8008f70:	bf00      	nop
 8008f72:	e008      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f74:	bf00      	nop
 8008f76:	e006      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e004      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e002      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f80:	bf00      	nop
 8008f82:	e000      	b.n	8008f86 <USBH_Process+0x3b6>
      break;
 8008f84:	bf00      	nop
  }
  return USBH_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af04      	add	r7, sp, #16
 8008f96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	2b07      	cmp	r3, #7
 8008fa6:	f200 81c1 	bhi.w	800932c <USBH_HandleEnum+0x39c>
 8008faa:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <USBH_HandleEnum+0x20>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08008fd1 	.word	0x08008fd1
 8008fb4:	0800908f 	.word	0x0800908f
 8008fb8:	080090f9 	.word	0x080090f9
 8008fbc:	08009187 	.word	0x08009187
 8008fc0:	080091f1 	.word	0x080091f1
 8008fc4:	08009261 	.word	0x08009261
 8008fc8:	080092a7 	.word	0x080092a7
 8008fcc:	080092ed 	.word	0x080092ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008fd0:	2108      	movs	r1, #8
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa50 	bl	8009478 <USBH_Get_DevDesc>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d130      	bne.n	8009044 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7919      	ldrb	r1, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009006:	b292      	uxth	r2, r2
 8009008:	9202      	str	r2, [sp, #8]
 800900a:	2200      	movs	r2, #0
 800900c:	9201      	str	r2, [sp, #4]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4603      	mov	r3, r0
 8009012:	2280      	movs	r2, #128	; 0x80
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 ff77 	bl	8009f08 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7959      	ldrb	r1, [r3, #5]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800902e:	b292      	uxth	r2, r2
 8009030:	9202      	str	r2, [sp, #8]
 8009032:	2200      	movs	r2, #0
 8009034:	9201      	str	r2, [sp, #4]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	2200      	movs	r2, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 ff63 	bl	8009f08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009042:	e175      	b.n	8009330 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b03      	cmp	r3, #3
 8009048:	f040 8172 	bne.w	8009330 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009052:	3301      	adds	r3, #1
 8009054:	b2da      	uxtb	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009062:	2b03      	cmp	r3, #3
 8009064:	d903      	bls.n	800906e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	220d      	movs	r2, #13
 800906a:	701a      	strb	r2, [r3, #0]
      break;
 800906c:	e160      	b.n	8009330 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	795b      	ldrb	r3, [r3, #5]
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 ff97 	bl	8009fa8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 ff91 	bl	8009fa8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
      break;
 800908c:	e150      	b.n	8009330 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800908e:	2112      	movs	r1, #18
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9f1 	bl	8009478 <USBH_Get_DevDesc>
 8009096:	4603      	mov	r3, r0
 8009098:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d103      	bne.n	80090a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090a6:	e145      	b.n	8009334 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	f040 8142 	bne.w	8009334 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090b6:	3301      	adds	r3, #1
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d903      	bls.n	80090d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	220d      	movs	r2, #13
 80090ce:	701a      	strb	r2, [r3, #0]
      break;
 80090d0:	e130      	b.n	8009334 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	795b      	ldrb	r3, [r3, #5]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 ff65 	bl	8009fa8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	791b      	ldrb	r3, [r3, #4]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 ff5f 	bl	8009fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
      break;
 80090f6:	e11d      	b.n	8009334 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80090f8:	2101      	movs	r1, #1
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa68 	bl	80095d0 <USBH_SetAddress>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d132      	bne.n	8009170 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800910a:	2002      	movs	r0, #2
 800910c:	f004 fda1 	bl	800dc52 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2203      	movs	r2, #3
 800911c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	7919      	ldrb	r1, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009132:	b292      	uxth	r2, r2
 8009134:	9202      	str	r2, [sp, #8]
 8009136:	2200      	movs	r2, #0
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4603      	mov	r3, r0
 800913e:	2280      	movs	r2, #128	; 0x80
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fee1 	bl	8009f08 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7959      	ldrb	r1, [r3, #5]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800915a:	b292      	uxth	r2, r2
 800915c:	9202      	str	r2, [sp, #8]
 800915e:	2200      	movs	r2, #0
 8009160:	9201      	str	r2, [sp, #4]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4603      	mov	r3, r0
 8009166:	2200      	movs	r2, #0
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fecd 	bl	8009f08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800916e:	e0e3      	b.n	8009338 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b03      	cmp	r3, #3
 8009174:	f040 80e0 	bne.w	8009338 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	220d      	movs	r2, #13
 800917c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	705a      	strb	r2, [r3, #1]
      break;
 8009184:	e0d8      	b.n	8009338 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009186:	2109      	movs	r1, #9
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f99d 	bl	80094c8 <USBH_Get_CfgDesc>
 800918e:	4603      	mov	r3, r0
 8009190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d103      	bne.n	80091a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2204      	movs	r2, #4
 800919c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800919e:	e0cd      	b.n	800933c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	f040 80ca 	bne.w	800933c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091ae:	3301      	adds	r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d903      	bls.n	80091ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	220d      	movs	r2, #13
 80091c6:	701a      	strb	r2, [r3, #0]
      break;
 80091c8:	e0b8      	b.n	800933c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	795b      	ldrb	r3, [r3, #5]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fee9 	bl	8009fa8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	791b      	ldrb	r3, [r3, #4]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fee3 	bl	8009fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
      break;
 80091ee:	e0a5      	b.n	800933c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f965 	bl	80094c8 <USBH_Get_CfgDesc>
 80091fe:	4603      	mov	r3, r0
 8009200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d103      	bne.n	8009210 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2205      	movs	r2, #5
 800920c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800920e:	e097      	b.n	8009340 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	2b03      	cmp	r3, #3
 8009214:	f040 8094 	bne.w	8009340 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800921e:	3301      	adds	r3, #1
 8009220:	b2da      	uxtb	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800922e:	2b03      	cmp	r3, #3
 8009230:	d903      	bls.n	800923a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220d      	movs	r2, #13
 8009236:	701a      	strb	r2, [r3, #0]
      break;
 8009238:	e082      	b.n	8009340 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	795b      	ldrb	r3, [r3, #5]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 feb1 	bl	8009fa8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 feab 	bl	8009fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	701a      	strb	r2, [r3, #0]
      break;
 800925e:	e06f      	b.n	8009340 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009266:	2b00      	cmp	r3, #0
 8009268:	d019      	beq.n	800929e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009276:	23ff      	movs	r3, #255	; 0xff
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f949 	bl	8009510 <USBH_Get_StringDesc>
 800927e:	4603      	mov	r3, r0
 8009280:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d103      	bne.n	8009290 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2206      	movs	r2, #6
 800928c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800928e:	e059      	b.n	8009344 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b03      	cmp	r3, #3
 8009294:	d156      	bne.n	8009344 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2206      	movs	r2, #6
 800929a:	705a      	strb	r2, [r3, #1]
      break;
 800929c:	e052      	b.n	8009344 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2206      	movs	r2, #6
 80092a2:	705a      	strb	r2, [r3, #1]
      break;
 80092a4:	e04e      	b.n	8009344 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d019      	beq.n	80092e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80092bc:	23ff      	movs	r3, #255	; 0xff
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f926 	bl	8009510 <USBH_Get_StringDesc>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d103      	bne.n	80092d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2207      	movs	r2, #7
 80092d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80092d4:	e038      	b.n	8009348 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d135      	bne.n	8009348 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2207      	movs	r2, #7
 80092e0:	705a      	strb	r2, [r3, #1]
      break;
 80092e2:	e031      	b.n	8009348 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2207      	movs	r2, #7
 80092e8:	705a      	strb	r2, [r3, #1]
      break;
 80092ea:	e02d      	b.n	8009348 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d017      	beq.n	8009326 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009302:	23ff      	movs	r3, #255	; 0xff
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f903 	bl	8009510 <USBH_Get_StringDesc>
 800930a:	4603      	mov	r3, r0
 800930c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009318:	e018      	b.n	800934c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b03      	cmp	r3, #3
 800931e:	d115      	bne.n	800934c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
      break;
 8009324:	e012      	b.n	800934c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
      break;
 800932a:	e00f      	b.n	800934c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800932c:	bf00      	nop
 800932e:	e00e      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 8009330:	bf00      	nop
 8009332:	e00c      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 8009334:	bf00      	nop
 8009336:	e00a      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 8009338:	bf00      	nop
 800933a:	e008      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 800933c:	bf00      	nop
 800933e:	e006      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 8009340:	bf00      	nop
 8009342:	e004      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 8009344:	bf00      	nop
 8009346:	e002      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 8009348:	bf00      	nop
 800934a:	e000      	b.n	800934e <USBH_HandleEnum+0x3be>
      break;
 800934c:	bf00      	nop
  }
  return Status;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f804 	bl	800939a <USBH_HandleSof>
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b0b      	cmp	r3, #11
 80093aa:	d10a      	bne.n	80093c2 <USBH_HandleSof+0x28>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
  }
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80093da:	bf00      	nop
}
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80093f6:	bf00      	nop
}
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f004 fa8e 	bl	800d972 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	791b      	ldrb	r3, [r3, #4]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fda3 	bl	8009fa8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	795b      	ldrb	r3, [r3, #5]
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fd9d 	bl	8009fa8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af02      	add	r7, sp, #8
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	b29b      	uxth	r3, r3
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4613      	mov	r3, r2
 8009492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009496:	2100      	movs	r1, #0
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f864 	bl	8009566 <USBH_GetDescriptor>
 800949e:	4603      	mov	r3, r0
 80094a0:	73fb      	strb	r3, [r7, #15]
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	b292      	uxth	r2, r2
 80094b8:	4619      	mov	r1, r3
 80094ba:	f000 f918 	bl	80096ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	331c      	adds	r3, #28
 80094d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094da:	887b      	ldrh	r3, [r7, #2]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094e4:	2100      	movs	r1, #0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f83d 	bl	8009566 <USBH_GetDescriptor>
 80094ec:	4603      	mov	r3, r0
 80094ee:	72fb      	strb	r3, [r7, #11]
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d107      	bne.n	8009506 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80094fc:	887a      	ldrh	r2, [r7, #2]
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f964 	bl	80097ce <USBH_ParseCfgDesc>
  }

  return status;
 8009506:	7afb      	ldrb	r3, [r7, #11]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af02      	add	r7, sp, #8
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	607a      	str	r2, [r7, #4]
 800951a:	461a      	mov	r2, r3
 800951c:	460b      	mov	r3, r1
 800951e:	72fb      	strb	r3, [r7, #11]
 8009520:	4613      	mov	r3, r2
 8009522:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	b29b      	uxth	r3, r3
 8009528:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800952c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009534:	893b      	ldrh	r3, [r7, #8]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	460b      	mov	r3, r1
 800953a:	2100      	movs	r1, #0
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f812 	bl	8009566 <USBH_GetDescriptor>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d107      	bne.n	800955c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009552:	893a      	ldrh	r2, [r7, #8]
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fa37 	bl	80099ca <USBH_ParseStringDesc>
  }

  return status;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	607b      	str	r3, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	72fb      	strb	r3, [r7, #11]
 8009574:	4613      	mov	r3, r2
 8009576:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	789b      	ldrb	r3, [r3, #2]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d11c      	bne.n	80095ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009586:	b2da      	uxtb	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2206      	movs	r2, #6
 8009590:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	893a      	ldrh	r2, [r7, #8]
 8009596:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009598:	893b      	ldrh	r3, [r7, #8]
 800959a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800959e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a2:	d104      	bne.n	80095ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f240 4209 	movw	r2, #1033	; 0x409
 80095aa:	829a      	strh	r2, [r3, #20]
 80095ac:	e002      	b.n	80095b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8b3a      	ldrh	r2, [r7, #24]
 80095b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80095ba:	8b3b      	ldrh	r3, [r7, #24]
 80095bc:	461a      	mov	r2, r3
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 fa50 	bl	8009a66 <USBH_CtlReq>
 80095c6:	4603      	mov	r3, r0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	789b      	ldrb	r3, [r3, #2]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d10f      	bne.n	8009604 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2205      	movs	r2, #5
 80095ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fa2c 	bl	8009a66 <USBH_CtlReq>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	789b      	ldrb	r3, [r3, #2]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d10e      	bne.n	800964a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2209      	movs	r2, #9
 8009636:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	887a      	ldrh	r2, [r7, #2]
 800963c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800964a:	2200      	movs	r2, #0
 800964c:	2100      	movs	r1, #0
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fa09 	bl	8009a66 <USBH_CtlReq>
 8009654:	4603      	mov	r3, r0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	789b      	ldrb	r3, [r3, #2]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d10f      	bne.n	8009692 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2203      	movs	r2, #3
 800967c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	b29a      	uxth	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009692:	2200      	movs	r2, #0
 8009694:	2100      	movs	r1, #0
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f9e5 	bl	8009a66 <USBH_CtlReq>
 800969c:	4603      	mov	r3, r0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	789b      	ldrb	r3, [r3, #2]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d10f      	bne.n	80096da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2202      	movs	r2, #2
 80096be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80096da:	2200      	movs	r2, #0
 80096dc:	2100      	movs	r1, #0
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9c1 	bl	8009a66 <USBH_CtlReq>
 80096e4:	4603      	mov	r3, r0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	4613      	mov	r3, r2
 80096fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	781a      	ldrb	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	785a      	ldrb	r2, [r3, #1]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	3302      	adds	r3, #2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b29a      	uxth	r2, r3
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	3303      	adds	r3, #3
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	b29b      	uxth	r3, r3
 8009720:	4313      	orrs	r3, r2
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	791a      	ldrb	r2, [r3, #4]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	795a      	ldrb	r2, [r3, #5]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	799a      	ldrb	r2, [r3, #6]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	79da      	ldrb	r2, [r3, #7]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	2b08      	cmp	r3, #8
 800974c:	d939      	bls.n	80097c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	3308      	adds	r3, #8
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b29a      	uxth	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3309      	adds	r3, #9
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	b29b      	uxth	r3, r3
 800975e:	021b      	lsls	r3, r3, #8
 8009760:	b29b      	uxth	r3, r3
 8009762:	4313      	orrs	r3, r2
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	330a      	adds	r3, #10
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b29a      	uxth	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	330b      	adds	r3, #11
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	b29b      	uxth	r3, r3
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	b29b      	uxth	r3, r3
 800977e:	4313      	orrs	r3, r2
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	330c      	adds	r3, #12
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	b29a      	uxth	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	330d      	adds	r3, #13
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	4313      	orrs	r3, r2
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	7b9a      	ldrb	r2, [r3, #14]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	7bda      	ldrb	r2, [r3, #15]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	7c1a      	ldrb	r2, [r3, #16]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	7c5a      	ldrb	r2, [r3, #17]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	745a      	strb	r2, [r3, #17]
  }
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b08a      	sub	sp, #40	; 0x28
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	4613      	mov	r3, r2
 80097da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	781a      	ldrb	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	785a      	ldrb	r2, [r3, #1]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3302      	adds	r3, #2
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	b29a      	uxth	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3303      	adds	r3, #3
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	b29b      	uxth	r3, r3
 8009814:	4313      	orrs	r3, r2
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	791a      	ldrb	r2, [r3, #4]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	795a      	ldrb	r2, [r3, #5]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	799a      	ldrb	r2, [r3, #6]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	79da      	ldrb	r2, [r3, #7]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7a1a      	ldrb	r2, [r3, #8]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	2b09      	cmp	r3, #9
 8009848:	d95f      	bls.n	800990a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800984a:	2309      	movs	r3, #9
 800984c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800984e:	2300      	movs	r3, #0
 8009850:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009852:	e051      	b.n	80098f8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009854:	f107 0316 	add.w	r3, r7, #22
 8009858:	4619      	mov	r1, r3
 800985a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985c:	f000 f8e8 	bl	8009a30 <USBH_GetNextDesc>
 8009860:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b04      	cmp	r3, #4
 8009868:	d146      	bne.n	80098f8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800986a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800986e:	221a      	movs	r2, #26
 8009870:	fb02 f303 	mul.w	r3, r2, r3
 8009874:	3308      	adds	r3, #8
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	3302      	adds	r3, #2
 800987c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800987e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009880:	69f8      	ldr	r0, [r7, #28]
 8009882:	f000 f846 	bl	8009912 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009890:	e022      	b.n	80098d8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009892:	f107 0316 	add.w	r3, r7, #22
 8009896:	4619      	mov	r1, r3
 8009898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800989a:	f000 f8c9 	bl	8009a30 <USBH_GetNextDesc>
 800989e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d117      	bne.n	80098d8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80098a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80098b0:	3201      	adds	r2, #1
 80098b2:	00d2      	lsls	r2, r2, #3
 80098b4:	211a      	movs	r1, #26
 80098b6:	fb01 f303 	mul.w	r3, r1, r3
 80098ba:	4413      	add	r3, r2
 80098bc:	3308      	adds	r3, #8
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80098c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098c8:	69b8      	ldr	r0, [r7, #24]
 80098ca:	f000 f851 	bl	8009970 <USBH_ParseEPDesc>
            ep_ix++;
 80098ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80098d2:	3301      	adds	r3, #1
 80098d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	791b      	ldrb	r3, [r3, #4]
 80098dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d204      	bcs.n	80098ee <USBH_ParseCfgDesc+0x120>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	885a      	ldrh	r2, [r3, #2]
 80098e8:	8afb      	ldrh	r3, [r7, #22]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d8d1      	bhi.n	8009892 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80098ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098f2:	3301      	adds	r3, #1
 80098f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d804      	bhi.n	800990a <USBH_ParseCfgDesc+0x13c>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	885a      	ldrh	r2, [r3, #2]
 8009904:	8afb      	ldrh	r3, [r7, #22]
 8009906:	429a      	cmp	r2, r3
 8009908:	d8a4      	bhi.n	8009854 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800990a:	bf00      	nop
 800990c:	3728      	adds	r7, #40	; 0x28
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781a      	ldrb	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	785a      	ldrb	r2, [r3, #1]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	789a      	ldrb	r2, [r3, #2]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	78da      	ldrb	r2, [r3, #3]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	791a      	ldrb	r2, [r3, #4]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	795a      	ldrb	r2, [r3, #5]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	799a      	ldrb	r2, [r3, #6]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	79da      	ldrb	r2, [r3, #7]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	7a1a      	ldrb	r2, [r3, #8]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	721a      	strb	r2, [r3, #8]
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781a      	ldrb	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	785a      	ldrb	r2, [r3, #1]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	789a      	ldrb	r2, [r3, #2]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	78da      	ldrb	r2, [r3, #3]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	3304      	adds	r3, #4
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	3305      	adds	r3, #5
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	021b      	lsls	r3, r3, #8
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	4313      	orrs	r3, r2
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	799a      	ldrb	r2, [r3, #6]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	719a      	strb	r2, [r3, #6]
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b087      	sub	sp, #28
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	4613      	mov	r3, r2
 80099d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d120      	bne.n	8009a24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	1e9a      	subs	r2, r3, #2
 80099e8:	88fb      	ldrh	r3, [r7, #6]
 80099ea:	4293      	cmp	r3, r2
 80099ec:	bf28      	it	cs
 80099ee:	4613      	movcs	r3, r2
 80099f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3302      	adds	r3, #2
 80099f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80099f8:	2300      	movs	r3, #0
 80099fa:	82fb      	strh	r3, [r7, #22]
 80099fc:	e00b      	b.n	8009a16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80099fe:	8afb      	ldrh	r3, [r7, #22]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	781a      	ldrb	r2, [r3, #0]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009a10:	8afb      	ldrh	r3, [r7, #22]
 8009a12:	3302      	adds	r3, #2
 8009a14:	82fb      	strh	r3, [r7, #22]
 8009a16:	8afa      	ldrh	r2, [r7, #22]
 8009a18:	8abb      	ldrh	r3, [r7, #20]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d3ef      	bcc.n	80099fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2200      	movs	r2, #0
 8009a22:	701a      	strb	r2, [r3, #0]
  }
}
 8009a24:	bf00      	nop
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	881a      	ldrh	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	4413      	add	r3, r2
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4413      	add	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a58:	68fb      	ldr	r3, [r7, #12]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b086      	sub	sp, #24
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	4613      	mov	r3, r2
 8009a72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	789b      	ldrb	r3, [r3, #2]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d002      	beq.n	8009a86 <USBH_CtlReq+0x20>
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d00f      	beq.n	8009aa4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a84:	e027      	b.n	8009ad6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa2:	e018      	b.n	8009ad6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f81b 	bl	8009ae0 <USBH_HandleControl>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <USBH_CtlReq+0x54>
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d106      	bne.n	8009ac8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	761a      	strb	r2, [r3, #24]
      break;
 8009ac6:	e005      	b.n	8009ad4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d102      	bne.n	8009ad4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	709a      	strb	r2, [r3, #2]
      break;
 8009ad4:	bf00      	nop
  }
  return status;
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	7e1b      	ldrb	r3, [r3, #24]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	2b0a      	cmp	r3, #10
 8009af8:	f200 8156 	bhi.w	8009da8 <USBH_HandleControl+0x2c8>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <USBH_HandleControl+0x24>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	08009b4b 	.word	0x08009b4b
 8009b0c:	08009bb5 	.word	0x08009bb5
 8009b10:	08009bdb 	.word	0x08009bdb
 8009b14:	08009c13 	.word	0x08009c13
 8009b18:	08009c3d 	.word	0x08009c3d
 8009b1c:	08009c8f 	.word	0x08009c8f
 8009b20:	08009cb1 	.word	0x08009cb1
 8009b24:	08009ced 	.word	0x08009ced
 8009b28:	08009d13 	.word	0x08009d13
 8009b2c:	08009d51 	.word	0x08009d51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f103 0110 	add.w	r1, r3, #16
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	795b      	ldrb	r3, [r3, #5]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f943 	bl	8009dc8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2202      	movs	r2, #2
 8009b46:	761a      	strb	r2, [r3, #24]
      break;
 8009b48:	e139      	b.n	8009dbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	795b      	ldrb	r3, [r3, #5]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f003 fffd 	bl	800db50 <USBH_LL_GetURBState>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d11e      	bne.n	8009b9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	7c1b      	ldrb	r3, [r3, #16]
 8009b64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	8adb      	ldrh	r3, [r3, #22]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009b72:	7b7b      	ldrb	r3, [r7, #13]
 8009b74:	2b80      	cmp	r3, #128	; 0x80
 8009b76:	d103      	bne.n	8009b80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b7e:	e115      	b.n	8009dac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2205      	movs	r2, #5
 8009b84:	761a      	strb	r2, [r3, #24]
      break;
 8009b86:	e111      	b.n	8009dac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009b88:	7b7b      	ldrb	r3, [r7, #13]
 8009b8a:	2b80      	cmp	r3, #128	; 0x80
 8009b8c:	d103      	bne.n	8009b96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2209      	movs	r2, #9
 8009b92:	761a      	strb	r2, [r3, #24]
      break;
 8009b94:	e10a      	b.n	8009dac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2207      	movs	r2, #7
 8009b9a:	761a      	strb	r2, [r3, #24]
      break;
 8009b9c:	e106      	b.n	8009dac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d003      	beq.n	8009bac <USBH_HandleControl+0xcc>
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	f040 8100 	bne.w	8009dac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	220b      	movs	r2, #11
 8009bb0:	761a      	strb	r2, [r3, #24]
      break;
 8009bb2:	e0fb      	b.n	8009dac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6899      	ldr	r1, [r3, #8]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	899a      	ldrh	r2, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f93a 	bl	8009e46 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	761a      	strb	r2, [r3, #24]
      break;
 8009bd8:	e0f1      	b.n	8009dbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f003 ffb5 	bl	800db50 <USBH_LL_GetURBState>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d102      	bne.n	8009bf6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2209      	movs	r2, #9
 8009bf4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b05      	cmp	r3, #5
 8009bfa:	d102      	bne.n	8009c02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c00:	e0d6      	b.n	8009db0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	f040 80d3 	bne.w	8009db0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	220b      	movs	r2, #11
 8009c0e:	761a      	strb	r2, [r3, #24]
      break;
 8009c10:	e0ce      	b.n	8009db0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6899      	ldr	r1, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	899a      	ldrh	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	795b      	ldrb	r3, [r3, #5]
 8009c1e:	2001      	movs	r0, #1
 8009c20:	9000      	str	r0, [sp, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8ea 	bl	8009dfc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2206      	movs	r2, #6
 8009c38:	761a      	strb	r2, [r3, #24]
      break;
 8009c3a:	e0c0      	b.n	8009dbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	795b      	ldrb	r3, [r3, #5]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f003 ff84 	bl	800db50 <USBH_LL_GetURBState>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d103      	bne.n	8009c5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2207      	movs	r2, #7
 8009c56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c58:	e0ac      	b.n	8009db4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b05      	cmp	r3, #5
 8009c5e:	d105      	bne.n	8009c6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	220c      	movs	r2, #12
 8009c64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009c66:	2303      	movs	r3, #3
 8009c68:	73fb      	strb	r3, [r7, #15]
      break;
 8009c6a:	e0a3      	b.n	8009db4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d103      	bne.n	8009c7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2205      	movs	r2, #5
 8009c76:	761a      	strb	r2, [r3, #24]
      break;
 8009c78:	e09c      	b.n	8009db4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	f040 8099 	bne.w	8009db4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	220b      	movs	r2, #11
 8009c86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8c:	e092      	b.n	8009db4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	2100      	movs	r1, #0
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f8d5 	bl	8009e46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2208      	movs	r2, #8
 8009cac:	761a      	strb	r2, [r3, #24]

      break;
 8009cae:	e086      	b.n	8009dbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	791b      	ldrb	r3, [r3, #4]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f003 ff4a 	bl	800db50 <USBH_LL_GetURBState>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d105      	bne.n	8009cd2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	220d      	movs	r2, #13
 8009cca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cd0:	e072      	b.n	8009db8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b04      	cmp	r3, #4
 8009cd6:	d103      	bne.n	8009ce0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	220b      	movs	r2, #11
 8009cdc:	761a      	strb	r2, [r3, #24]
      break;
 8009cde:	e06b      	b.n	8009db8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	d168      	bne.n	8009db8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cea:	e065      	b.n	8009db8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	795b      	ldrb	r3, [r3, #5]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	9200      	str	r2, [sp, #0]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f87f 	bl	8009dfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	220a      	movs	r2, #10
 8009d0e:	761a      	strb	r2, [r3, #24]
      break;
 8009d10:	e055      	b.n	8009dbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	795b      	ldrb	r3, [r3, #5]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f003 ff19 	bl	800db50 <USBH_LL_GetURBState>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d105      	bne.n	8009d34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	220d      	movs	r2, #13
 8009d30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d32:	e043      	b.n	8009dbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d103      	bne.n	8009d42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2209      	movs	r2, #9
 8009d3e:	761a      	strb	r2, [r3, #24]
      break;
 8009d40:	e03c      	b.n	8009dbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d139      	bne.n	8009dbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	220b      	movs	r2, #11
 8009d4c:	761a      	strb	r2, [r3, #24]
      break;
 8009d4e:	e035      	b.n	8009dbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7e5b      	ldrb	r3, [r3, #25]
 8009d54:	3301      	adds	r3, #1
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	765a      	strb	r2, [r3, #25]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7e5b      	ldrb	r3, [r3, #25]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d806      	bhi.n	8009d72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009d70:	e025      	b.n	8009dbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d78:	2106      	movs	r1, #6
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	795b      	ldrb	r3, [r3, #5]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f90c 	bl	8009fa8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	791b      	ldrb	r3, [r3, #4]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f906 	bl	8009fa8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	73fb      	strb	r3, [r7, #15]
      break;
 8009da6:	e00a      	b.n	8009dbe <USBH_HandleControl+0x2de>

    default:
      break;
 8009da8:	bf00      	nop
 8009daa:	e008      	b.n	8009dbe <USBH_HandleControl+0x2de>
      break;
 8009dac:	bf00      	nop
 8009dae:	e006      	b.n	8009dbe <USBH_HandleControl+0x2de>
      break;
 8009db0:	bf00      	nop
 8009db2:	e004      	b.n	8009dbe <USBH_HandleControl+0x2de>
      break;
 8009db4:	bf00      	nop
 8009db6:	e002      	b.n	8009dbe <USBH_HandleControl+0x2de>
      break;
 8009db8:	bf00      	nop
 8009dba:	e000      	b.n	8009dbe <USBH_HandleControl+0x2de>
      break;
 8009dbc:	bf00      	nop
  }

  return status;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af04      	add	r7, sp, #16
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009dd6:	79f9      	ldrb	r1, [r7, #7]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	9303      	str	r3, [sp, #12]
 8009ddc:	2308      	movs	r3, #8
 8009dde:	9302      	str	r3, [sp, #8]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2300      	movs	r3, #0
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	2200      	movs	r2, #0
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f003 fe7e 	bl	800daee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af04      	add	r7, sp, #16
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4611      	mov	r1, r2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	80fb      	strh	r3, [r7, #6]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e20:	7979      	ldrb	r1, [r7, #5]
 8009e22:	7e3b      	ldrb	r3, [r7, #24]
 8009e24:	9303      	str	r3, [sp, #12]
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	9302      	str	r3, [sp, #8]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	2200      	movs	r2, #0
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f003 fe59 	bl	800daee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b088      	sub	sp, #32
 8009e4a:	af04      	add	r7, sp, #16
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	4611      	mov	r1, r2
 8009e52:	461a      	mov	r2, r3
 8009e54:	460b      	mov	r3, r1
 8009e56:	80fb      	strh	r3, [r7, #6]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e5c:	7979      	ldrb	r1, [r7, #5]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9303      	str	r3, [sp, #12]
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	9302      	str	r3, [sp, #8]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2201      	movs	r2, #1
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f003 fe3b 	bl	800daee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009e78:	2300      	movs	r3, #0

}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b088      	sub	sp, #32
 8009e86:	af04      	add	r7, sp, #16
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	461a      	mov	r2, r3
 8009e90:	460b      	mov	r3, r1
 8009e92:	80fb      	strh	r3, [r7, #6]
 8009e94:	4613      	mov	r3, r2
 8009e96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ea6:	7979      	ldrb	r1, [r7, #5]
 8009ea8:	7e3b      	ldrb	r3, [r7, #24]
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	88fb      	ldrh	r3, [r7, #6]
 8009eae:	9302      	str	r3, [sp, #8]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2302      	movs	r3, #2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f003 fe16 	bl	800daee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b088      	sub	sp, #32
 8009ed0:	af04      	add	r7, sp, #16
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	461a      	mov	r2, r3
 8009eda:	460b      	mov	r3, r1
 8009edc:	80fb      	strh	r3, [r7, #6]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ee2:	7979      	ldrb	r1, [r7, #5]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	9302      	str	r3, [sp, #8]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f003 fdf8 	bl	800daee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af04      	add	r7, sp, #16
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	461a      	mov	r2, r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	70fb      	strb	r3, [r7, #3]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	70bb      	strb	r3, [r7, #2]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009f22:	7878      	ldrb	r0, [r7, #1]
 8009f24:	78ba      	ldrb	r2, [r7, #2]
 8009f26:	78f9      	ldrb	r1, [r7, #3]
 8009f28:	8b3b      	ldrh	r3, [r7, #24]
 8009f2a:	9302      	str	r3, [sp, #8]
 8009f2c:	7d3b      	ldrb	r3, [r7, #20]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	7c3b      	ldrb	r3, [r7, #16]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	4603      	mov	r3, r0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f003 fd8b 	bl	800da52 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f003 fdaa 	bl	800dab0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f836 	bl	8009fe4 <USBH_GetFreePipe>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f7c:	89fb      	ldrh	r3, [r7, #14]
 8009f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d00a      	beq.n	8009f9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	89fb      	ldrh	r3, [r7, #14]
 8009f8a:	f003 030f 	and.w	r3, r3, #15
 8009f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	33e0      	adds	r3, #224	; 0xe0
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	440b      	add	r3, r1
 8009f9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f9c:	89fb      	ldrh	r3, [r7, #14]
 8009f9e:	b2db      	uxtb	r3, r3
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2b0a      	cmp	r3, #10
 8009fb8:	d80d      	bhi.n	8009fd6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	33e0      	adds	r3, #224	; 0xe0
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	33e0      	adds	r3, #224	; 0xe0
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
 8009ff4:	e00f      	b.n	800a016 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	33e0      	adds	r3, #224	; 0xe0
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	e007      	b.n	800a020 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	3301      	adds	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	2b0a      	cmp	r3, #10
 800a01a:	d9ec      	bls.n	8009ff6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	4a08      	ldr	r2, [pc, #32]	; (800a05c <disk_status+0x30>)
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	79fa      	ldrb	r2, [r7, #7]
 800a044:	4905      	ldr	r1, [pc, #20]	; (800a05c <disk_status+0x30>)
 800a046:	440a      	add	r2, r1
 800a048:	7a12      	ldrb	r2, [r2, #8]
 800a04a:	4610      	mov	r0, r2
 800a04c:	4798      	blx	r3
 800a04e:	4603      	mov	r3, r0
 800a050:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	200002e4 	.word	0x200002e4

0800a060 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	4a0d      	ldr	r2, [pc, #52]	; (800a0a8 <disk_initialize+0x48>)
 800a072:	5cd3      	ldrb	r3, [r2, r3]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d111      	bne.n	800a09c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	4a0b      	ldr	r2, [pc, #44]	; (800a0a8 <disk_initialize+0x48>)
 800a07c:	2101      	movs	r1, #1
 800a07e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	4a09      	ldr	r2, [pc, #36]	; (800a0a8 <disk_initialize+0x48>)
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	79fa      	ldrb	r2, [r7, #7]
 800a08e:	4906      	ldr	r1, [pc, #24]	; (800a0a8 <disk_initialize+0x48>)
 800a090:	440a      	add	r2, r1
 800a092:	7a12      	ldrb	r2, [r2, #8]
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200002e4 	.word	0x200002e4

0800a0ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a0ac:	b590      	push	{r4, r7, lr}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <disk_read+0x3c>)
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	689c      	ldr	r4, [r3, #8]
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	4a07      	ldr	r2, [pc, #28]	; (800a0e8 <disk_read+0x3c>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	7a18      	ldrb	r0, [r3, #8]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	47a0      	blx	r4
 800a0d8:	4603      	mov	r3, r0
 800a0da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd90      	pop	{r4, r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	200002e4 	.word	0x200002e4

0800a0ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0ec:	b590      	push	{r4, r7, lr}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	4a0a      	ldr	r2, [pc, #40]	; (800a128 <disk_write+0x3c>)
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	68dc      	ldr	r4, [r3, #12]
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	4a07      	ldr	r2, [pc, #28]	; (800a128 <disk_write+0x3c>)
 800a10c:	4413      	add	r3, r2
 800a10e:	7a18      	ldrb	r0, [r3, #8]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	47a0      	blx	r4
 800a118:	4603      	mov	r3, r0
 800a11a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	bd90      	pop	{r4, r7, pc}
 800a126:	bf00      	nop
 800a128:	200002e4 	.word	0x200002e4

0800a12c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	603a      	str	r2, [r7, #0]
 800a136:	71fb      	strb	r3, [r7, #7]
 800a138:	460b      	mov	r3, r1
 800a13a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	4a09      	ldr	r2, [pc, #36]	; (800a164 <disk_ioctl+0x38>)
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	79fa      	ldrb	r2, [r7, #7]
 800a14a:	4906      	ldr	r1, [pc, #24]	; (800a164 <disk_ioctl+0x38>)
 800a14c:	440a      	add	r2, r1
 800a14e:	7a10      	ldrb	r0, [r2, #8]
 800a150:	79b9      	ldrb	r1, [r7, #6]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	4798      	blx	r3
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
  return res;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200002e4 	.word	0x200002e4

0800a168 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3301      	adds	r3, #1
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a178:	89fb      	ldrh	r3, [r7, #14]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	b21a      	sxth	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b21b      	sxth	r3, r3
 800a184:	4313      	orrs	r3, r2
 800a186:	b21b      	sxth	r3, r3
 800a188:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a18a:	89fb      	ldrh	r3, [r7, #14]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3303      	adds	r3, #3
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	3202      	adds	r2, #2
 800a1b0:	7812      	ldrb	r2, [r2, #0]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	021b      	lsls	r3, r3, #8
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	3201      	adds	r2, #1
 800a1be:	7812      	ldrb	r2, [r2, #0]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	607a      	str	r2, [r7, #4]
 800a1f0:	887a      	ldrh	r2, [r7, #2]
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	887b      	ldrh	r3, [r7, #2]
 800a1f8:	0a1b      	lsrs	r3, r3, #8
 800a1fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	887a      	ldrh	r2, [r7, #2]
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	701a      	strb	r2, [r3, #0]
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	b2d2      	uxtb	r2, r2
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	b2d2      	uxtb	r2, r2
 800a23a:	701a      	strb	r2, [r3, #0]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	0a1b      	lsrs	r3, r3, #8
 800a240:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	1c5a      	adds	r2, r3, #1
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	b2d2      	uxtb	r2, r2
 800a24c:	701a      	strb	r2, [r3, #0]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	0a1b      	lsrs	r3, r3, #8
 800a252:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	607a      	str	r2, [r7, #4]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	701a      	strb	r2, [r3, #0]
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	1c53      	adds	r3, r2, #1
 800a28a:	613b      	str	r3, [r7, #16]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	1c59      	adds	r1, r3, #1
 800a290:	6179      	str	r1, [r7, #20]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3b01      	subs	r3, #1
 800a29a:	607b      	str	r3, [r7, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f1      	bne.n	800a286 <mem_cpy+0x1a>
	}
}
 800a2a2:	bf00      	nop
 800a2a4:	371c      	adds	r7, #28
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a2ae:	b480      	push	{r7}
 800a2b0:	b087      	sub	sp, #28
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	617a      	str	r2, [r7, #20]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1f3      	bne.n	800a2be <mem_set+0x10>
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	371c      	adds	r7, #28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2e4:	b480      	push	{r7}
 800a2e6:	b089      	sub	sp, #36	; 0x24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	61fa      	str	r2, [r7, #28]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	4619      	mov	r1, r3
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	61ba      	str	r2, [r7, #24]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	1acb      	subs	r3, r1, r3
 800a310:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3b01      	subs	r3, #1
 800a316:	607b      	str	r3, [r7, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <mem_cmp+0x40>
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0eb      	beq.n	800a2fc <mem_cmp+0x18>

	return r;
 800a324:	697b      	ldr	r3, [r7, #20]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3724      	adds	r7, #36	; 0x24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a33c:	e002      	b.n	800a344 <chk_chr+0x12>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	3301      	adds	r3, #1
 800a342:	607b      	str	r3, [r7, #4]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <chk_chr+0x26>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	461a      	mov	r2, r3
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	4293      	cmp	r3, r2
 800a356:	d1f2      	bne.n	800a33e <chk_chr+0xc>
	return *str;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	781b      	ldrb	r3, [r3, #0]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a372:	2300      	movs	r3, #0
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	60fb      	str	r3, [r7, #12]
 800a37a:	e029      	b.n	800a3d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a37c:	4a27      	ldr	r2, [pc, #156]	; (800a41c <chk_lock+0xb4>)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	4413      	add	r3, r2
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01d      	beq.n	800a3c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a38a:	4a24      	ldr	r2, [pc, #144]	; (800a41c <chk_lock+0xb4>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	4413      	add	r3, r2
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d116      	bne.n	800a3ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a39c:	4a1f      	ldr	r2, [pc, #124]	; (800a41c <chk_lock+0xb4>)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	4413      	add	r3, r2
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d10c      	bne.n	800a3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3b0:	4a1a      	ldr	r2, [pc, #104]	; (800a41c <chk_lock+0xb4>)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d102      	bne.n	800a3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3c4:	e007      	b.n	800a3d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d9d2      	bls.n	800a37c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d109      	bne.n	800a3f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <chk_lock+0x80>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d101      	bne.n	800a3ec <chk_lock+0x84>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e010      	b.n	800a40e <chk_lock+0xa6>
 800a3ec:	2312      	movs	r3, #18
 800a3ee:	e00e      	b.n	800a40e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d108      	bne.n	800a408 <chk_lock+0xa0>
 800a3f6:	4a09      	ldr	r2, [pc, #36]	; (800a41c <chk_lock+0xb4>)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	011b      	lsls	r3, r3, #4
 800a3fc:	4413      	add	r3, r2
 800a3fe:	330c      	adds	r3, #12
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a406:	d101      	bne.n	800a40c <chk_lock+0xa4>
 800a408:	2310      	movs	r3, #16
 800a40a:	e000      	b.n	800a40e <chk_lock+0xa6>
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	200000c4 	.word	0x200000c4

0800a420 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a426:	2300      	movs	r3, #0
 800a428:	607b      	str	r3, [r7, #4]
 800a42a:	e002      	b.n	800a432 <enq_lock+0x12>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3301      	adds	r3, #1
 800a430:	607b      	str	r3, [r7, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d806      	bhi.n	800a446 <enq_lock+0x26>
 800a438:	4a09      	ldr	r2, [pc, #36]	; (800a460 <enq_lock+0x40>)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	4413      	add	r3, r2
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f2      	bne.n	800a42c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b02      	cmp	r3, #2
 800a44a:	bf14      	ite	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	2300      	moveq	r3, #0
 800a450:	b2db      	uxtb	r3, r3
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	200000c4 	.word	0x200000c4

0800a464 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a46e:	2300      	movs	r3, #0
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e01f      	b.n	800a4b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a474:	4a41      	ldr	r2, [pc, #260]	; (800a57c <inc_lock+0x118>)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	4413      	add	r3, r2
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	d113      	bne.n	800a4ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a486:	4a3d      	ldr	r2, [pc, #244]	; (800a57c <inc_lock+0x118>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	4413      	add	r3, r2
 800a48e:	3304      	adds	r3, #4
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a496:	429a      	cmp	r2, r3
 800a498:	d109      	bne.n	800a4ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a49a:	4a38      	ldr	r2, [pc, #224]	; (800a57c <inc_lock+0x118>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d006      	beq.n	800a4bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d9dc      	bls.n	800a474 <inc_lock+0x10>
 800a4ba:	e000      	b.n	800a4be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d132      	bne.n	800a52a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	e002      	b.n	800a4d0 <inc_lock+0x6c>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d806      	bhi.n	800a4e4 <inc_lock+0x80>
 800a4d6:	4a29      	ldr	r2, [pc, #164]	; (800a57c <inc_lock+0x118>)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	4413      	add	r3, r2
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1f2      	bne.n	800a4ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d101      	bne.n	800a4ee <inc_lock+0x8a>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e040      	b.n	800a570 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4922      	ldr	r1, [pc, #136]	; (800a57c <inc_lock+0x118>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	440b      	add	r3, r1
 800a4fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	491e      	ldr	r1, [pc, #120]	; (800a57c <inc_lock+0x118>)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	440b      	add	r3, r1
 800a508:	3304      	adds	r3, #4
 800a50a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	695a      	ldr	r2, [r3, #20]
 800a510:	491a      	ldr	r1, [pc, #104]	; (800a57c <inc_lock+0x118>)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	440b      	add	r3, r1
 800a518:	3308      	adds	r3, #8
 800a51a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a51c:	4a17      	ldr	r2, [pc, #92]	; (800a57c <inc_lock+0x118>)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	011b      	lsls	r3, r3, #4
 800a522:	4413      	add	r3, r2
 800a524:	330c      	adds	r3, #12
 800a526:	2200      	movs	r2, #0
 800a528:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <inc_lock+0xe0>
 800a530:	4a12      	ldr	r2, [pc, #72]	; (800a57c <inc_lock+0x118>)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	4413      	add	r3, r2
 800a538:	330c      	adds	r3, #12
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <inc_lock+0xe0>
 800a540:	2300      	movs	r3, #0
 800a542:	e015      	b.n	800a570 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d108      	bne.n	800a55c <inc_lock+0xf8>
 800a54a:	4a0c      	ldr	r2, [pc, #48]	; (800a57c <inc_lock+0x118>)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	4413      	add	r3, r2
 800a552:	330c      	adds	r3, #12
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	e001      	b.n	800a560 <inc_lock+0xfc>
 800a55c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a560:	4906      	ldr	r1, [pc, #24]	; (800a57c <inc_lock+0x118>)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	440b      	add	r3, r1
 800a568:	330c      	adds	r3, #12
 800a56a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3301      	adds	r3, #1
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	200000c4 	.word	0x200000c4

0800a580 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	607b      	str	r3, [r7, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d825      	bhi.n	800a5e0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a594:	4a17      	ldr	r2, [pc, #92]	; (800a5f4 <dec_lock+0x74>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	011b      	lsls	r3, r3, #4
 800a59a:	4413      	add	r3, r2
 800a59c:	330c      	adds	r3, #12
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a5a2:	89fb      	ldrh	r3, [r7, #14]
 800a5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a8:	d101      	bne.n	800a5ae <dec_lock+0x2e>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5ae:	89fb      	ldrh	r3, [r7, #14]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <dec_lock+0x3a>
 800a5b4:	89fb      	ldrh	r3, [r7, #14]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5ba:	4a0e      	ldr	r2, [pc, #56]	; (800a5f4 <dec_lock+0x74>)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	4413      	add	r3, r2
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	89fa      	ldrh	r2, [r7, #14]
 800a5c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d105      	bne.n	800a5da <dec_lock+0x5a>
 800a5ce:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <dec_lock+0x74>)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	4413      	add	r3, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	737b      	strb	r3, [r7, #13]
 800a5de:	e001      	b.n	800a5e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5e4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	200000c4 	.word	0x200000c4

0800a5f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e010      	b.n	800a628 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a606:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <clear_lock+0x44>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	4413      	add	r3, r2
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	429a      	cmp	r2, r3
 800a614:	d105      	bne.n	800a622 <clear_lock+0x2a>
 800a616:	4a09      	ldr	r2, [pc, #36]	; (800a63c <clear_lock+0x44>)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	4413      	add	r3, r2
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3301      	adds	r3, #1
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d9eb      	bls.n	800a606 <clear_lock+0xe>
	}
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	200000c4 	.word	0x200000c4

0800a640 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	78db      	ldrb	r3, [r3, #3]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d034      	beq.n	800a6be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a658:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	7858      	ldrb	r0, [r3, #1]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a664:	2301      	movs	r3, #1
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	f7ff fd40 	bl	800a0ec <disk_write>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a672:	2301      	movs	r3, #1
 800a674:	73fb      	strb	r3, [r7, #15]
 800a676:	e022      	b.n	800a6be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	1ad2      	subs	r2, r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d217      	bcs.n	800a6be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	789b      	ldrb	r3, [r3, #2]
 800a692:	613b      	str	r3, [r7, #16]
 800a694:	e010      	b.n	800a6b8 <sync_window+0x78>
					wsect += fs->fsize;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	7858      	ldrb	r0, [r3, #1]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	f7ff fd1d 	bl	800a0ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	613b      	str	r3, [r7, #16]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d8eb      	bhi.n	800a696 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d01b      	beq.n	800a718 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff ffad 	bl	800a640 <sync_window>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d113      	bne.n	800a718 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7858      	ldrb	r0, [r3, #1]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	f7ff fcd5 	bl	800a0ac <disk_read>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d004      	beq.n	800a712 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a708:	f04f 33ff 	mov.w	r3, #4294967295
 800a70c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a70e:	2301      	movs	r3, #1
 800a710:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a718:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ff87 	bl	800a640 <sync_window>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d158      	bne.n	800a7ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b03      	cmp	r3, #3
 800a742:	d148      	bne.n	800a7d6 <sync_fs+0xb2>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	791b      	ldrb	r3, [r3, #4]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d144      	bne.n	800a7d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3334      	adds	r3, #52	; 0x34
 800a750:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a754:	2100      	movs	r1, #0
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fda9 	bl	800a2ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3334      	adds	r3, #52	; 0x34
 800a760:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a764:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fd38 	bl	800a1de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3334      	adds	r3, #52	; 0x34
 800a772:	4921      	ldr	r1, [pc, #132]	; (800a7f8 <sync_fs+0xd4>)
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff fd4d 	bl	800a214 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3334      	adds	r3, #52	; 0x34
 800a77e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a782:	491e      	ldr	r1, [pc, #120]	; (800a7fc <sync_fs+0xd8>)
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff fd45 	bl	800a214 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	3334      	adds	r3, #52	; 0x34
 800a78e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f7ff fd3b 	bl	800a214 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3334      	adds	r3, #52	; 0x34
 800a7a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f7ff fd31 	bl	800a214 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	7858      	ldrb	r0, [r3, #1]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f7ff fc8e 	bl	800a0ec <disk_write>
			fs->fsi_flag = 0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fca4 	bl	800a12c <disk_ioctl>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <sync_fs+0xca>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	41615252 	.word	0x41615252
 800a7fc:	61417272 	.word	0x61417272

0800a800 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	3b02      	subs	r3, #2
 800a80e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	3b02      	subs	r3, #2
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d301      	bcc.n	800a820 <clust2sect+0x20>
 800a81c:	2300      	movs	r3, #0
 800a81e:	e008      	b.n	800a832 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	895b      	ldrh	r3, [r3, #10]
 800a824:	461a      	mov	r2, r3
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	fb03 f202 	mul.w	r2, r3, r2
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	4413      	add	r3, r2
}
 800a832:	4618      	mov	r0, r3
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d904      	bls.n	800a85e <get_fat+0x20>
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a85e:	2301      	movs	r3, #1
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	e08f      	b.n	800a984 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a864:	f04f 33ff 	mov.w	r3, #4294967295
 800a868:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d062      	beq.n	800a938 <get_fat+0xfa>
 800a872:	2b03      	cmp	r3, #3
 800a874:	dc7c      	bgt.n	800a970 <get_fat+0x132>
 800a876:	2b01      	cmp	r3, #1
 800a878:	d002      	beq.n	800a880 <get_fat+0x42>
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d042      	beq.n	800a904 <get_fat+0xc6>
 800a87e:	e077      	b.n	800a970 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	085b      	lsrs	r3, r3, #1
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	0a5b      	lsrs	r3, r3, #9
 800a896:	4413      	add	r3, r2
 800a898:	4619      	mov	r1, r3
 800a89a:	6938      	ldr	r0, [r7, #16]
 800a89c:	f7ff ff14 	bl	800a6c8 <move_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d167      	bne.n	800a976 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	60fa      	str	r2, [r7, #12]
 800a8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	0a5b      	lsrs	r3, r3, #9
 800a8c2:	4413      	add	r3, r2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6938      	ldr	r0, [r7, #16]
 800a8c8:	f7ff fefe 	bl	800a6c8 <move_window>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d153      	bne.n	800a97a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8e0:	021b      	lsls	r3, r3, #8
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <get_fat+0xbc>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	091b      	lsrs	r3, r3, #4
 800a8f8:	e002      	b.n	800a900 <get_fat+0xc2>
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a900:	617b      	str	r3, [r7, #20]
			break;
 800a902:	e03f      	b.n	800a984 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	4413      	add	r3, r2
 800a90e:	4619      	mov	r1, r3
 800a910:	6938      	ldr	r0, [r7, #16]
 800a912:	f7ff fed9 	bl	800a6c8 <move_window>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d130      	bne.n	800a97e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a92a:	4413      	add	r3, r2
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff fc1b 	bl	800a168 <ld_word>
 800a932:	4603      	mov	r3, r0
 800a934:	617b      	str	r3, [r7, #20]
			break;
 800a936:	e025      	b.n	800a984 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	09db      	lsrs	r3, r3, #7
 800a940:	4413      	add	r3, r2
 800a942:	4619      	mov	r1, r3
 800a944:	6938      	ldr	r0, [r7, #16]
 800a946:	f7ff febf 	bl	800a6c8 <move_window>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d118      	bne.n	800a982 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a95e:	4413      	add	r3, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fc19 	bl	800a198 <ld_dword>
 800a966:	4603      	mov	r3, r0
 800a968:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a96c:	617b      	str	r3, [r7, #20]
			break;
 800a96e:	e009      	b.n	800a984 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a970:	2301      	movs	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e006      	b.n	800a984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a976:	bf00      	nop
 800a978:	e004      	b.n	800a984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a97a:	bf00      	nop
 800a97c:	e002      	b.n	800a984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a97e:	bf00      	nop
 800a980:	e000      	b.n	800a984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a982:	bf00      	nop
		}
	}

	return val;
 800a984:	697b      	ldr	r3, [r7, #20]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a98e:	b590      	push	{r4, r7, lr}
 800a990:	b089      	sub	sp, #36	; 0x24
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a99a:	2302      	movs	r3, #2
 800a99c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	f240 80d2 	bls.w	800ab4a <put_fat+0x1bc>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	f080 80cc 	bcs.w	800ab4a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	f000 8096 	beq.w	800aae8 <put_fat+0x15a>
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	f300 80cd 	bgt.w	800ab5c <put_fat+0x1ce>
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d002      	beq.n	800a9cc <put_fat+0x3e>
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d06e      	beq.n	800aaa8 <put_fat+0x11a>
 800a9ca:	e0c7      	b.n	800ab5c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	61bb      	str	r3, [r7, #24]
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	0a5b      	lsrs	r3, r3, #9
 800a9e2:	4413      	add	r3, r2
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff fe6e 	bl	800a6c8 <move_window>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9f0:	7ffb      	ldrb	r3, [r7, #31]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f040 80ab 	bne.w	800ab4e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	1c59      	adds	r1, r3, #1
 800aa02:	61b9      	str	r1, [r7, #24]
 800aa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa08:	4413      	add	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00d      	beq.n	800aa32 <put_fat+0xa4>
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	b25b      	sxtb	r3, r3
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	b25a      	sxtb	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	b25b      	sxtb	r3, r3
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	b25b      	sxtb	r3, r3
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	e001      	b.n	800aa36 <put_fat+0xa8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	0a5b      	lsrs	r3, r3, #9
 800aa48:	4413      	add	r3, r2
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7ff fe3b 	bl	800a6c8 <move_window>
 800aa52:	4603      	mov	r3, r0
 800aa54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d17a      	bne.n	800ab52 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa68:	4413      	add	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <put_fat+0xf0>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	091b      	lsrs	r3, r3, #4
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	e00e      	b.n	800aa9c <put_fat+0x10e>
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b25b      	sxtb	r3, r3
 800aa84:	f023 030f 	bic.w	r3, r3, #15
 800aa88:	b25a      	sxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	0a1b      	lsrs	r3, r3, #8
 800aa8e:	b25b      	sxtb	r3, r3
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	4313      	orrs	r3, r2
 800aa98:	b25b      	sxtb	r3, r3
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	70da      	strb	r2, [r3, #3]
			break;
 800aaa6:	e059      	b.n	800ab5c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	4413      	add	r3, r2
 800aab2:	4619      	mov	r1, r3
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7ff fe07 	bl	800a6c8 <move_window>
 800aaba:	4603      	mov	r3, r0
 800aabc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aabe:	7ffb      	ldrb	r3, [r7, #31]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d148      	bne.n	800ab56 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aad2:	4413      	add	r3, r2
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	b292      	uxth	r2, r2
 800aad8:	4611      	mov	r1, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fb7f 	bl	800a1de <st_word>
			fs->wflag = 1;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	70da      	strb	r2, [r3, #3]
			break;
 800aae6:	e039      	b.n	800ab5c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	09db      	lsrs	r3, r3, #7
 800aaf0:	4413      	add	r3, r2
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f7ff fde7 	bl	800a6c8 <move_window>
 800aafa:	4603      	mov	r3, r0
 800aafc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aafe:	7ffb      	ldrb	r3, [r7, #31]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d12a      	bne.n	800ab5a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab18:	4413      	add	r3, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff fb3c 	bl	800a198 <ld_dword>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab26:	4323      	orrs	r3, r4
 800ab28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab38:	4413      	add	r3, r2
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fb69 	bl	800a214 <st_dword>
			fs->wflag = 1;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2201      	movs	r2, #1
 800ab46:	70da      	strb	r2, [r3, #3]
			break;
 800ab48:	e008      	b.n	800ab5c <put_fat+0x1ce>
		}
	}
 800ab4a:	bf00      	nop
 800ab4c:	e006      	b.n	800ab5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab4e:	bf00      	nop
 800ab50:	e004      	b.n	800ab5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab52:	bf00      	nop
 800ab54:	e002      	b.n	800ab5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab56:	bf00      	nop
 800ab58:	e000      	b.n	800ab5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab5a:	bf00      	nop
	return res;
 800ab5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3724      	adds	r7, #36	; 0x24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd90      	pop	{r4, r7, pc}

0800ab66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b088      	sub	sp, #32
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d904      	bls.n	800ab8c <remove_chain+0x26>
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d301      	bcc.n	800ab90 <remove_chain+0x2a>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e04b      	b.n	800ac28 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00c      	beq.n	800abb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab96:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9a:	6879      	ldr	r1, [r7, #4]
 800ab9c:	69b8      	ldr	r0, [r7, #24]
 800ab9e:	f7ff fef6 	bl	800a98e <put_fat>
 800aba2:	4603      	mov	r3, r0
 800aba4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aba6:	7ffb      	ldrb	r3, [r7, #31]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <remove_chain+0x4a>
 800abac:	7ffb      	ldrb	r3, [r7, #31]
 800abae:	e03b      	b.n	800ac28 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff fe43 	bl	800a83e <get_fat>
 800abb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d031      	beq.n	800ac24 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d101      	bne.n	800abca <remove_chain+0x64>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e02e      	b.n	800ac28 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd0:	d101      	bne.n	800abd6 <remove_chain+0x70>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e028      	b.n	800ac28 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abd6:	2200      	movs	r2, #0
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	69b8      	ldr	r0, [r7, #24]
 800abdc:	f7ff fed7 	bl	800a98e <put_fat>
 800abe0:	4603      	mov	r3, r0
 800abe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abe4:	7ffb      	ldrb	r3, [r7, #31]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <remove_chain+0x88>
 800abea:	7ffb      	ldrb	r3, [r7, #31]
 800abec:	e01c      	b.n	800ac28 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	695a      	ldr	r2, [r3, #20]
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	3b02      	subs	r3, #2
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d20b      	bcs.n	800ac14 <remove_chain+0xae>
			fs->free_clst++;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	791b      	ldrb	r3, [r3, #4]
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d3c6      	bcc.n	800abb0 <remove_chain+0x4a>
 800ac22:	e000      	b.n	800ac26 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac24:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3720      	adds	r7, #32
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10d      	bne.n	800ac62 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <create_chain+0x2c>
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d31b      	bcc.n	800ac94 <create_chain+0x64>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	61bb      	str	r3, [r7, #24]
 800ac60:	e018      	b.n	800ac94 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff fdea 	bl	800a83e <get_fat>
 800ac6a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d801      	bhi.n	800ac76 <create_chain+0x46>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e070      	b.n	800ad58 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7c:	d101      	bne.n	800ac82 <create_chain+0x52>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	e06a      	b.n	800ad58 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d201      	bcs.n	800ac90 <create_chain+0x60>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	e063      	b.n	800ad58 <create_chain+0x128>
		scl = clst;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d307      	bcc.n	800acb8 <create_chain+0x88>
				ncl = 2;
 800aca8:	2302      	movs	r3, #2
 800acaa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d901      	bls.n	800acb8 <create_chain+0x88>
 800acb4:	2300      	movs	r3, #0
 800acb6:	e04f      	b.n	800ad58 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800acb8:	69f9      	ldr	r1, [r7, #28]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff fdbf 	bl	800a83e <get_fat>
 800acc0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d003      	beq.n	800acd6 <create_chain+0xa6>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd4:	d101      	bne.n	800acda <create_chain+0xaa>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	e03e      	b.n	800ad58 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d1da      	bne.n	800ac98 <create_chain+0x68>
 800ace2:	2300      	movs	r3, #0
 800ace4:	e038      	b.n	800ad58 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ace6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ace8:	f04f 32ff 	mov.w	r2, #4294967295
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	6938      	ldr	r0, [r7, #16]
 800acf0:	f7ff fe4d 	bl	800a98e <put_fat>
 800acf4:	4603      	mov	r3, r0
 800acf6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d109      	bne.n	800ad12 <create_chain+0xe2>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6938      	ldr	r0, [r7, #16]
 800ad0a:	f7ff fe40 	bl	800a98e <put_fat>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d116      	bne.n	800ad46 <create_chain+0x116>
		fs->last_clst = ncl;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	695a      	ldr	r2, [r3, #20]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	3b02      	subs	r3, #2
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d804      	bhi.n	800ad36 <create_chain+0x106>
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	1e5a      	subs	r2, r3, #1
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	f043 0301 	orr.w	r3, r3, #1
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	711a      	strb	r2, [r3, #4]
 800ad44:	e007      	b.n	800ad56 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d102      	bne.n	800ad52 <create_chain+0x122>
 800ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad50:	e000      	b.n	800ad54 <create_chain+0x124>
 800ad52:	2301      	movs	r3, #1
 800ad54:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad56:	69fb      	ldr	r3, [r7, #28]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	3304      	adds	r3, #4
 800ad76:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	0a5b      	lsrs	r3, r3, #9
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	8952      	ldrh	r2, [r2, #10]
 800ad80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1d1a      	adds	r2, r3, #4
 800ad8a:	613a      	str	r2, [r7, #16]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <clmt_clust+0x3a>
 800ad96:	2300      	movs	r3, #0
 800ad98:	e010      	b.n	800adbc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d307      	bcc.n	800adb2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	3304      	adds	r3, #4
 800adae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adb0:	e7e9      	b.n	800ad86 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800adb2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	4413      	add	r3, r2
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adde:	d204      	bcs.n	800adea <dir_sdi+0x22>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	f003 031f 	and.w	r3, r3, #31
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <dir_sdi+0x26>
		return FR_INT_ERR;
 800adea:	2302      	movs	r3, #2
 800adec:	e063      	b.n	800aeb6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d106      	bne.n	800ae0e <dir_sdi+0x46>
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d902      	bls.n	800ae0e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10c      	bne.n	800ae2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	8912      	ldrh	r2, [r2, #8]
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d301      	bcc.n	800ae24 <dir_sdi+0x5c>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e048      	b.n	800aeb6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	61da      	str	r2, [r3, #28]
 800ae2c:	e029      	b.n	800ae82 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	895b      	ldrh	r3, [r3, #10]
 800ae32:	025b      	lsls	r3, r3, #9
 800ae34:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae36:	e019      	b.n	800ae6c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6979      	ldr	r1, [r7, #20]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fcfe 	bl	800a83e <get_fat>
 800ae42:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d101      	bne.n	800ae50 <dir_sdi+0x88>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e032      	b.n	800aeb6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d904      	bls.n	800ae60 <dir_sdi+0x98>
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d301      	bcc.n	800ae64 <dir_sdi+0x9c>
 800ae60:	2302      	movs	r3, #2
 800ae62:	e028      	b.n	800aeb6 <dir_sdi+0xee>
			ofs -= csz;
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d2e1      	bcs.n	800ae38 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae74:	6979      	ldr	r1, [r7, #20]
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f7ff fcc2 	bl	800a800 <clust2sect>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <dir_sdi+0xcc>
 800ae90:	2302      	movs	r3, #2
 800ae92:	e010      	b.n	800aeb6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	69da      	ldr	r2, [r3, #28]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	0a5b      	lsrs	r3, r3, #9
 800ae9c:	441a      	add	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeae:	441a      	add	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	3320      	adds	r3, #32
 800aed4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <dir_next+0x28>
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aee4:	d301      	bcc.n	800aeea <dir_next+0x2c>
 800aee6:	2304      	movs	r3, #4
 800aee8:	e0aa      	b.n	800b040 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f040 8098 	bne.w	800b026 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10b      	bne.n	800af20 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	095b      	lsrs	r3, r3, #5
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	8912      	ldrh	r2, [r2, #8]
 800af10:	4293      	cmp	r3, r2
 800af12:	f0c0 8088 	bcc.w	800b026 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	61da      	str	r2, [r3, #28]
 800af1c:	2304      	movs	r3, #4
 800af1e:	e08f      	b.n	800b040 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	0a5b      	lsrs	r3, r3, #9
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	8952      	ldrh	r2, [r2, #10]
 800af28:	3a01      	subs	r2, #1
 800af2a:	4013      	ands	r3, r2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d17a      	bne.n	800b026 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	4619      	mov	r1, r3
 800af38:	4610      	mov	r0, r2
 800af3a:	f7ff fc80 	bl	800a83e <get_fat>
 800af3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d801      	bhi.n	800af4a <dir_next+0x8c>
 800af46:	2302      	movs	r3, #2
 800af48:	e07a      	b.n	800b040 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d101      	bne.n	800af56 <dir_next+0x98>
 800af52:	2301      	movs	r3, #1
 800af54:	e074      	b.n	800b040 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d358      	bcc.n	800b012 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d104      	bne.n	800af70 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	61da      	str	r2, [r3, #28]
 800af6c:	2304      	movs	r3, #4
 800af6e:	e067      	b.n	800b040 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f7ff fe59 	bl	800ac30 <create_chain>
 800af7e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <dir_next+0xcc>
 800af86:	2307      	movs	r3, #7
 800af88:	e05a      	b.n	800b040 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <dir_next+0xd6>
 800af90:	2302      	movs	r3, #2
 800af92:	e055      	b.n	800b040 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9a:	d101      	bne.n	800afa0 <dir_next+0xe2>
 800af9c:	2301      	movs	r3, #1
 800af9e:	e04f      	b.n	800b040 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7ff fb4d 	bl	800a640 <sync_window>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <dir_next+0xf2>
 800afac:	2301      	movs	r3, #1
 800afae:	e047      	b.n	800b040 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	3334      	adds	r3, #52	; 0x34
 800afb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff f977 	bl	800a2ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afc0:	2300      	movs	r3, #0
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	6979      	ldr	r1, [r7, #20]
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fc1a 	bl	800a800 <clust2sect>
 800afcc:	4602      	mov	r2, r0
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	631a      	str	r2, [r3, #48]	; 0x30
 800afd2:	e012      	b.n	800affa <dir_next+0x13c>
						fs->wflag = 1;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2201      	movs	r2, #1
 800afd8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff fb30 	bl	800a640 <sync_window>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <dir_next+0x12c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e02a      	b.n	800b040 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	3301      	adds	r3, #1
 800afee:	613b      	str	r3, [r7, #16]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	631a      	str	r2, [r3, #48]	; 0x30
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	895b      	ldrh	r3, [r3, #10]
 800affe:	461a      	mov	r2, r3
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	4293      	cmp	r3, r2
 800b004:	d3e6      	bcc.n	800afd4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	1ad2      	subs	r2, r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b018:	6979      	ldr	r1, [r7, #20]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff fbf0 	bl	800a800 <clust2sect>
 800b020:	4602      	mov	r2, r0
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b038:	441a      	add	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b058:	2100      	movs	r1, #0
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff feb4 	bl	800adc8 <dir_sdi>
 800b060:	4603      	mov	r3, r0
 800b062:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d12b      	bne.n	800b0c2 <dir_alloc+0x7a>
		n = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	4619      	mov	r1, r3
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7ff fb27 	bl	800a6c8 <move_window>
 800b07a:	4603      	mov	r3, r0
 800b07c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d11d      	bne.n	800b0c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2be5      	cmp	r3, #229	; 0xe5
 800b08c:	d004      	beq.n	800b098 <dir_alloc+0x50>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d107      	bne.n	800b0a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	3301      	adds	r3, #1
 800b09c:	613b      	str	r3, [r7, #16]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d102      	bne.n	800b0ac <dir_alloc+0x64>
 800b0a6:	e00c      	b.n	800b0c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ff05 	bl	800aebe <dir_next>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0d7      	beq.n	800b06e <dir_alloc+0x26>
 800b0be:	e000      	b.n	800b0c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d101      	bne.n	800b0cc <dir_alloc+0x84>
 800b0c8:	2307      	movs	r3, #7
 800b0ca:	75fb      	strb	r3, [r7, #23]
	return res;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	331a      	adds	r3, #26
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff f83f 	bl	800a168 <ld_word>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d109      	bne.n	800b10a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff f834 	bl	800a168 <ld_word>
 800b100:	4603      	mov	r3, r0
 800b102:	041b      	lsls	r3, r3, #16
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b10a:	68fb      	ldr	r3, [r7, #12]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	331a      	adds	r3, #26
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	b292      	uxth	r2, r2
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff f857 	bl	800a1de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b03      	cmp	r3, #3
 800b136:	d109      	bne.n	800b14c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	f103 0214 	add.w	r2, r3, #20
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	0c1b      	lsrs	r3, r3, #16
 800b142:	b29b      	uxth	r3, r3
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	f7ff f849 	bl	800a1de <st_word>
	}
}
 800b14c:	bf00      	nop
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	331a      	adds	r3, #26
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff f800 	bl	800a168 <ld_word>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <cmp_lfn+0x1e>
 800b16e:	2300      	movs	r3, #0
 800b170:	e059      	b.n	800b226 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b17a:	1e5a      	subs	r2, r3, #1
 800b17c:	4613      	mov	r3, r2
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	4413      	add	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b188:	2301      	movs	r3, #1
 800b18a:	81fb      	strh	r3, [r7, #14]
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	e033      	b.n	800b1fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b192:	4a27      	ldr	r2, [pc, #156]	; (800b230 <cmp_lfn+0xdc>)
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	4413      	add	r3, r2
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	4413      	add	r3, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fe ffe1 	bl	800a168 <ld_word>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b1aa:	89fb      	ldrh	r3, [r7, #14]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01a      	beq.n	800b1e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	2bfe      	cmp	r3, #254	; 0xfe
 800b1b4:	d812      	bhi.n	800b1dc <cmp_lfn+0x88>
 800b1b6:	89bb      	ldrh	r3, [r7, #12]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f002 f8bf 	bl	800d33c <ff_wtoupper>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	617a      	str	r2, [r7, #20]
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f002 f8b3 	bl	800d33c <ff_wtoupper>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	429c      	cmp	r4, r3
 800b1da:	d001      	beq.n	800b1e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e022      	b.n	800b226 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b1e0:	89bb      	ldrh	r3, [r7, #12]
 800b1e2:	81fb      	strh	r3, [r7, #14]
 800b1e4:	e006      	b.n	800b1f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b1e6:	89bb      	ldrh	r3, [r7, #12]
 800b1e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d001      	beq.n	800b1f4 <cmp_lfn+0xa0>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e018      	b.n	800b226 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	613b      	str	r3, [r7, #16]
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2b0c      	cmp	r3, #12
 800b1fe:	d9c8      	bls.n	800b192 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <cmp_lfn+0xd0>
 800b20c:	89fb      	ldrh	r3, [r7, #14]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <cmp_lfn+0xd0>
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	4413      	add	r3, r2
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <cmp_lfn+0xd0>
 800b220:	2300      	movs	r3, #0
 800b222:	e000      	b.n	800b226 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b224:	2301      	movs	r3, #1
}
 800b226:	4618      	mov	r0, r3
 800b228:	371c      	adds	r7, #28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd90      	pop	{r4, r7, pc}
 800b22e:	bf00      	nop
 800b230:	0800ec04 	.word	0x0800ec04

0800b234 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	331a      	adds	r3, #26
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe ff90 	bl	800a168 <ld_word>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <pick_lfn+0x1e>
 800b24e:	2300      	movs	r3, #0
 800b250:	e04d      	b.n	800b2ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b25a:	1e5a      	subs	r2, r3, #1
 800b25c:	4613      	mov	r3, r2
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b268:	2301      	movs	r3, #1
 800b26a:	81fb      	strh	r3, [r7, #14]
 800b26c:	2300      	movs	r3, #0
 800b26e:	613b      	str	r3, [r7, #16]
 800b270:	e028      	b.n	800b2c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b272:	4a21      	ldr	r2, [pc, #132]	; (800b2f8 <pick_lfn+0xc4>)
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	4413      	add	r3, r2
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	4413      	add	r3, r2
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe ff71 	bl	800a168 <ld_word>
 800b286:	4603      	mov	r3, r0
 800b288:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b28a:	89fb      	ldrh	r3, [r7, #14]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00f      	beq.n	800b2b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2bfe      	cmp	r3, #254	; 0xfe
 800b294:	d901      	bls.n	800b29a <pick_lfn+0x66>
 800b296:	2300      	movs	r3, #0
 800b298:	e029      	b.n	800b2ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b29a:	89bb      	ldrh	r3, [r7, #12]
 800b29c:	81fb      	strh	r3, [r7, #14]
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	1c5a      	adds	r2, r3, #1
 800b2a2:	617a      	str	r2, [r7, #20]
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	89fa      	ldrh	r2, [r7, #14]
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	e006      	b.n	800b2be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b2b0:	89bb      	ldrh	r3, [r7, #12]
 800b2b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d001      	beq.n	800b2be <pick_lfn+0x8a>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	e017      	b.n	800b2ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b0c      	cmp	r3, #12
 800b2c8:	d9d3      	bls.n	800b272 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2bfe      	cmp	r3, #254	; 0xfe
 800b2da:	d901      	bls.n	800b2e0 <pick_lfn+0xac>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e006      	b.n	800b2ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b2ec:	2301      	movs	r3, #1
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800ec04 	.word	0x0800ec04

0800b2fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	4611      	mov	r1, r2
 800b308:	461a      	mov	r2, r3
 800b30a:	460b      	mov	r3, r1
 800b30c:	71fb      	strb	r3, [r7, #7]
 800b30e:	4613      	mov	r3, r2
 800b310:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	330d      	adds	r3, #13
 800b316:	79ba      	ldrb	r2, [r7, #6]
 800b318:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	330b      	adds	r3, #11
 800b31e:	220f      	movs	r2, #15
 800b320:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	330c      	adds	r3, #12
 800b326:	2200      	movs	r2, #0
 800b328:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	331a      	adds	r3, #26
 800b32e:	2100      	movs	r1, #0
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe ff54 	bl	800a1de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	1e5a      	subs	r2, r3, #1
 800b33a:	4613      	mov	r3, r2
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	4413      	add	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	82fb      	strh	r3, [r7, #22]
 800b34a:	2300      	movs	r3, #0
 800b34c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b34e:	8afb      	ldrh	r3, [r7, #22]
 800b350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b354:	4293      	cmp	r3, r2
 800b356:	d007      	beq.n	800b368 <put_lfn+0x6c>
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	61fa      	str	r2, [r7, #28]
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b368:	4a17      	ldr	r2, [pc, #92]	; (800b3c8 <put_lfn+0xcc>)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	4413      	add	r3, r2
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	461a      	mov	r2, r3
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	4413      	add	r3, r2
 800b376:	8afa      	ldrh	r2, [r7, #22]
 800b378:	4611      	mov	r1, r2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe ff2f 	bl	800a1de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b380:	8afb      	ldrh	r3, [r7, #22]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d102      	bne.n	800b38c <put_lfn+0x90>
 800b386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b38a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	3301      	adds	r3, #1
 800b390:	61bb      	str	r3, [r7, #24]
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	2b0c      	cmp	r3, #12
 800b396:	d9da      	bls.n	800b34e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b398:	8afb      	ldrh	r3, [r7, #22]
 800b39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d006      	beq.n	800b3b0 <put_lfn+0xb4>
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	881b      	ldrh	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d103      	bne.n	800b3b8 <put_lfn+0xbc>
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	79fa      	ldrb	r2, [r7, #7]
 800b3bc:	701a      	strb	r2, [r3, #0]
}
 800b3be:	bf00      	nop
 800b3c0:	3720      	adds	r7, #32
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0800ec04 	.word	0x0800ec04

0800b3cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08c      	sub	sp, #48	; 0x30
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b3da:	220b      	movs	r2, #11
 800b3dc:	68b9      	ldr	r1, [r7, #8]
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f7fe ff44 	bl	800a26c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	d92b      	bls.n	800b442 <gen_numname+0x76>
		sr = seq;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b3ee:	e022      	b.n	800b436 <gen_numname+0x6a>
			wc = *lfn++;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	1c9a      	adds	r2, r3, #2
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3fe:	e017      	b.n	800b430 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	005a      	lsls	r2, r3, #1
 800b404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b406:	f003 0301 	and.w	r3, r3, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b40e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b410:	085b      	lsrs	r3, r3, #1
 800b412:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <gen_numname+0x5e>
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b424:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b428:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42c:	3301      	adds	r3, #1
 800b42e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d9e4      	bls.n	800b400 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1d8      	bne.n	800b3f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b442:	2307      	movs	r3, #7
 800b444:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	f003 030f 	and.w	r3, r3, #15
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	3330      	adds	r3, #48	; 0x30
 800b452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b45a:	2b39      	cmp	r3, #57	; 0x39
 800b45c:	d904      	bls.n	800b468 <gen_numname+0x9c>
 800b45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b462:	3307      	adds	r3, #7
 800b464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	1e5a      	subs	r2, r3, #1
 800b46c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b46e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b472:	4413      	add	r3, r2
 800b474:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b478:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	091b      	lsrs	r3, r3, #4
 800b480:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1de      	bne.n	800b446 <gen_numname+0x7a>
	ns[i] = '~';
 800b488:	f107 0214 	add.w	r2, r7, #20
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	4413      	add	r3, r2
 800b490:	227e      	movs	r2, #126	; 0x7e
 800b492:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b494:	2300      	movs	r3, #0
 800b496:	627b      	str	r3, [r7, #36]	; 0x24
 800b498:	e002      	b.n	800b4a0 <gen_numname+0xd4>
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	3301      	adds	r3, #1
 800b49e:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d205      	bcs.n	800b4b4 <gen_numname+0xe8>
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	4413      	add	r3, r2
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	d1f2      	bne.n	800b49a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b6:	2b07      	cmp	r3, #7
 800b4b8:	d808      	bhi.n	800b4cc <gen_numname+0x100>
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	62ba      	str	r2, [r7, #40]	; 0x28
 800b4c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b4ca:	e000      	b.n	800b4ce <gen_numname+0x102>
 800b4cc:	2120      	movs	r1, #32
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	627a      	str	r2, [r7, #36]	; 0x24
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	460a      	mov	r2, r1
 800b4da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	d9e8      	bls.n	800b4b4 <gen_numname+0xe8>
}
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3730      	adds	r7, #48	; 0x30
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b4f8:	230b      	movs	r3, #11
 800b4fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	0852      	lsrs	r2, r2, #1
 800b502:	01db      	lsls	r3, r3, #7
 800b504:	4313      	orrs	r3, r2
 800b506:	b2da      	uxtb	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	1c59      	adds	r1, r3, #1
 800b50c:	6079      	str	r1, [r7, #4]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	4413      	add	r3, r2
 800b512:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	3b01      	subs	r3, #1
 800b518:	60bb      	str	r3, [r7, #8]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1ed      	bne.n	800b4fc <sum_sfn+0x10>
	return sum;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b086      	sub	sp, #24
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b538:	2304      	movs	r3, #4
 800b53a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b542:	23ff      	movs	r3, #255	; 0xff
 800b544:	757b      	strb	r3, [r7, #21]
 800b546:	23ff      	movs	r3, #255	; 0xff
 800b548:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b54a:	e081      	b.n	800b650 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	4619      	mov	r1, r3
 800b552:	6938      	ldr	r0, [r7, #16]
 800b554:	f7ff f8b8 	bl	800a6c8 <move_window>
 800b558:	4603      	mov	r3, r0
 800b55a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d17c      	bne.n	800b65c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b56a:	7dbb      	ldrb	r3, [r7, #22]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b570:	2304      	movs	r3, #4
 800b572:	75fb      	strb	r3, [r7, #23]
 800b574:	e077      	b.n	800b666 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	330b      	adds	r3, #11
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b582:	73fb      	strb	r3, [r7, #15]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7bfa      	ldrb	r2, [r7, #15]
 800b588:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b58a:	7dbb      	ldrb	r3, [r7, #22]
 800b58c:	2be5      	cmp	r3, #229	; 0xe5
 800b58e:	d00e      	beq.n	800b5ae <dir_read+0x80>
 800b590:	7dbb      	ldrb	r3, [r7, #22]
 800b592:	2b2e      	cmp	r3, #46	; 0x2e
 800b594:	d00b      	beq.n	800b5ae <dir_read+0x80>
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	f023 0320 	bic.w	r3, r3, #32
 800b59c:	2b08      	cmp	r3, #8
 800b59e:	bf0c      	ite	eq
 800b5a0:	2301      	moveq	r3, #1
 800b5a2:	2300      	movne	r3, #0
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d002      	beq.n	800b5b4 <dir_read+0x86>
				ord = 0xFF;
 800b5ae:	23ff      	movs	r3, #255	; 0xff
 800b5b0:	757b      	strb	r3, [r7, #21]
 800b5b2:	e044      	b.n	800b63e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	2b0f      	cmp	r3, #15
 800b5b8:	d12f      	bne.n	800b61a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b5ba:	7dbb      	ldrb	r3, [r7, #22]
 800b5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00d      	beq.n	800b5e0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	7b5b      	ldrb	r3, [r3, #13]
 800b5ca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b5cc:	7dbb      	ldrb	r3, [r7, #22]
 800b5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5d2:	75bb      	strb	r3, [r7, #22]
 800b5d4:	7dbb      	ldrb	r3, [r7, #22]
 800b5d6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	695a      	ldr	r2, [r3, #20]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b5e0:	7dba      	ldrb	r2, [r7, #22]
 800b5e2:	7d7b      	ldrb	r3, [r7, #21]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d115      	bne.n	800b614 <dir_read+0xe6>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	330d      	adds	r3, #13
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	7d3a      	ldrb	r2, [r7, #20]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d10e      	bne.n	800b614 <dir_read+0xe6>
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f7ff fe17 	bl	800b234 <pick_lfn>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <dir_read+0xe6>
 800b60c:	7d7b      	ldrb	r3, [r7, #21]
 800b60e:	3b01      	subs	r3, #1
 800b610:	b2db      	uxtb	r3, r3
 800b612:	e000      	b.n	800b616 <dir_read+0xe8>
 800b614:	23ff      	movs	r3, #255	; 0xff
 800b616:	757b      	strb	r3, [r7, #21]
 800b618:	e011      	b.n	800b63e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b61a:	7d7b      	ldrb	r3, [r7, #21]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d109      	bne.n	800b634 <dir_read+0x106>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff ff61 	bl	800b4ec <sum_sfn>
 800b62a:	4603      	mov	r3, r0
 800b62c:	461a      	mov	r2, r3
 800b62e:	7d3b      	ldrb	r3, [r7, #20]
 800b630:	4293      	cmp	r3, r2
 800b632:	d015      	beq.n	800b660 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b63c:	e010      	b.n	800b660 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b63e:	2100      	movs	r1, #0
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff fc3c 	bl	800aebe <dir_next>
 800b646:	4603      	mov	r3, r0
 800b648:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d109      	bne.n	800b664 <dir_read+0x136>
	while (dp->sect) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f47f af79 	bne.w	800b54c <dir_read+0x1e>
 800b65a:	e004      	b.n	800b666 <dir_read+0x138>
		if (res != FR_OK) break;
 800b65c:	bf00      	nop
 800b65e:	e002      	b.n	800b666 <dir_read+0x138>
					break;
 800b660:	bf00      	nop
 800b662:	e000      	b.n	800b666 <dir_read+0x138>
		if (res != FR_OK) break;
 800b664:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <dir_read+0x144>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	61da      	str	r2, [r3, #28]
	return res;
 800b672:	7dfb      	ldrb	r3, [r7, #23]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b68a:	2100      	movs	r1, #0
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff fb9b 	bl	800adc8 <dir_sdi>
 800b692:	4603      	mov	r3, r0
 800b694:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <dir_find+0x24>
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	e0a9      	b.n	800b7f4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b6a0:	23ff      	movs	r3, #255	; 0xff
 800b6a2:	753b      	strb	r3, [r7, #20]
 800b6a4:	7d3b      	ldrb	r3, [r7, #20]
 800b6a6:	757b      	strb	r3, [r7, #21]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6938      	ldr	r0, [r7, #16]
 800b6b8:	f7ff f806 	bl	800a6c8 <move_window>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f040 8090 	bne.w	800b7e8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b6d0:	7dbb      	ldrb	r3, [r7, #22]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <dir_find+0x60>
 800b6d6:	2304      	movs	r3, #4
 800b6d8:	75fb      	strb	r3, [r7, #23]
 800b6da:	e08a      	b.n	800b7f2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a1b      	ldr	r3, [r3, #32]
 800b6e0:	330b      	adds	r3, #11
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6e8:	73fb      	strb	r3, [r7, #15]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	7bfa      	ldrb	r2, [r7, #15]
 800b6ee:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b6f0:	7dbb      	ldrb	r3, [r7, #22]
 800b6f2:	2be5      	cmp	r3, #229	; 0xe5
 800b6f4:	d007      	beq.n	800b706 <dir_find+0x8a>
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	f003 0308 	and.w	r3, r3, #8
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d009      	beq.n	800b714 <dir_find+0x98>
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d006      	beq.n	800b714 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b706:	23ff      	movs	r3, #255	; 0xff
 800b708:	757b      	strb	r3, [r7, #21]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f04f 32ff 	mov.w	r2, #4294967295
 800b710:	631a      	str	r2, [r3, #48]	; 0x30
 800b712:	e05e      	b.n	800b7d2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	2b0f      	cmp	r3, #15
 800b718:	d136      	bne.n	800b788 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d154      	bne.n	800b7d2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b728:	7dbb      	ldrb	r3, [r7, #22]
 800b72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00d      	beq.n	800b74e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	7b5b      	ldrb	r3, [r3, #13]
 800b738:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b73a:	7dbb      	ldrb	r3, [r7, #22]
 800b73c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b740:	75bb      	strb	r3, [r7, #22]
 800b742:	7dbb      	ldrb	r3, [r7, #22]
 800b744:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	695a      	ldr	r2, [r3, #20]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b74e:	7dba      	ldrb	r2, [r7, #22]
 800b750:	7d7b      	ldrb	r3, [r7, #21]
 800b752:	429a      	cmp	r2, r3
 800b754:	d115      	bne.n	800b782 <dir_find+0x106>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	330d      	adds	r3, #13
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	7d3a      	ldrb	r2, [r7, #20]
 800b760:	429a      	cmp	r2, r3
 800b762:	d10e      	bne.n	800b782 <dir_find+0x106>
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f7ff fcf0 	bl	800b154 <cmp_lfn>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <dir_find+0x106>
 800b77a:	7d7b      	ldrb	r3, [r7, #21]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	e000      	b.n	800b784 <dir_find+0x108>
 800b782:	23ff      	movs	r3, #255	; 0xff
 800b784:	757b      	strb	r3, [r7, #21]
 800b786:	e024      	b.n	800b7d2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b788:	7d7b      	ldrb	r3, [r7, #21]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <dir_find+0x126>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff feaa 	bl	800b4ec <sum_sfn>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	7d3b      	ldrb	r3, [r7, #20]
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d024      	beq.n	800b7ec <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <dir_find+0x14a>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a18      	ldr	r0, [r3, #32]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3324      	adds	r3, #36	; 0x24
 800b7b8:	220b      	movs	r2, #11
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f7fe fd92 	bl	800a2e4 <mem_cmp>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d014      	beq.n	800b7f0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b7c6:	23ff      	movs	r3, #255	; 0xff
 800b7c8:	757b      	strb	r3, [r7, #21]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff fb72 	bl	800aebe <dir_next>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f43f af65 	beq.w	800b6b0 <dir_find+0x34>
 800b7e6:	e004      	b.n	800b7f2 <dir_find+0x176>
		if (res != FR_OK) break;
 800b7e8:	bf00      	nop
 800b7ea:	e002      	b.n	800b7f2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b7ec:	bf00      	nop
 800b7ee:	e000      	b.n	800b7f2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b7f0:	bf00      	nop

	return res;
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08c      	sub	sp, #48	; 0x30
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b810:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <dir_register+0x20>
 800b818:	2306      	movs	r3, #6
 800b81a:	e0e0      	b.n	800b9de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b81c:	2300      	movs	r3, #0
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
 800b820:	e002      	b.n	800b828 <dir_register+0x2c>
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	3301      	adds	r3, #1
 800b826:	627b      	str	r3, [r7, #36]	; 0x24
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	68da      	ldr	r2, [r3, #12]
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	005b      	lsls	r3, r3, #1
 800b830:	4413      	add	r3, r2
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1f4      	bne.n	800b822 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b83e:	f107 030c 	add.w	r3, r7, #12
 800b842:	220c      	movs	r2, #12
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe fd11 	bl	800a26c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d032      	beq.n	800b8ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2240      	movs	r2, #64	; 0x40
 800b858:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b85c:	2301      	movs	r3, #1
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b860:	e016      	b.n	800b890 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	f107 010c 	add.w	r1, r7, #12
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	f7ff fdab 	bl	800b3cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff ff00 	bl	800b67c <dir_find>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	3301      	adds	r3, #1
 800b88e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	2b63      	cmp	r3, #99	; 0x63
 800b894:	d9e5      	bls.n	800b862 <dir_register+0x66>
 800b896:	e000      	b.n	800b89a <dir_register+0x9e>
			if (res != FR_OK) break;
 800b898:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	2b64      	cmp	r3, #100	; 0x64
 800b89e:	d101      	bne.n	800b8a4 <dir_register+0xa8>
 800b8a0:	2307      	movs	r3, #7
 800b8a2:	e09c      	b.n	800b9de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b8a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8a8:	2b04      	cmp	r3, #4
 800b8aa:	d002      	beq.n	800b8b2 <dir_register+0xb6>
 800b8ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8b0:	e095      	b.n	800b9de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b8b2:	7dfa      	ldrb	r2, [r7, #23]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	f003 0302 	and.w	r3, r3, #2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d007      	beq.n	800b8d4 <dir_register+0xd8>
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	330c      	adds	r3, #12
 800b8c8:	4a47      	ldr	r2, [pc, #284]	; (800b9e8 <dir_register+0x1ec>)
 800b8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ce:	089b      	lsrs	r3, r3, #2
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	e000      	b.n	800b8d6 <dir_register+0xda>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b8d8:	6a39      	ldr	r1, [r7, #32]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fbb4 	bl	800b048 <dir_alloc>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b8e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d148      	bne.n	800b980 <dir_register+0x184>
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	623b      	str	r3, [r7, #32]
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d042      	beq.n	800b980 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	695a      	ldr	r2, [r3, #20]
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	015b      	lsls	r3, r3, #5
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7ff fa5e 	bl	800adc8 <dir_sdi>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b916:	2b00      	cmp	r3, #0
 800b918:	d132      	bne.n	800b980 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3324      	adds	r3, #36	; 0x24
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fde4 	bl	800b4ec <sum_sfn>
 800b924:	4603      	mov	r3, r0
 800b926:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	69db      	ldr	r3, [r3, #28]
 800b92c:	4619      	mov	r1, r3
 800b92e:	69f8      	ldr	r0, [r7, #28]
 800b930:	f7fe feca 	bl	800a6c8 <move_window>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b93a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d11d      	bne.n	800b97e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	68d8      	ldr	r0, [r3, #12]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a19      	ldr	r1, [r3, #32]
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	7efb      	ldrb	r3, [r7, #27]
 800b950:	f7ff fcd4 	bl	800b2fc <put_lfn>
				fs->wflag = 1;
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	2201      	movs	r2, #1
 800b958:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b95a:	2100      	movs	r1, #0
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff faae 	bl	800aebe <dir_next>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d107      	bne.n	800b980 <dir_register+0x184>
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	3b01      	subs	r3, #1
 800b974:	623b      	str	r3, [r7, #32]
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1d5      	bne.n	800b928 <dir_register+0x12c>
 800b97c:	e000      	b.n	800b980 <dir_register+0x184>
				if (res != FR_OK) break;
 800b97e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b984:	2b00      	cmp	r3, #0
 800b986:	d128      	bne.n	800b9da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	4619      	mov	r1, r3
 800b98e:	69f8      	ldr	r0, [r7, #28]
 800b990:	f7fe fe9a 	bl	800a6c8 <move_window>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b99a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d11b      	bne.n	800b9da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe fc7f 	bl	800a2ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a18      	ldr	r0, [r3, #32]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3324      	adds	r3, #36	; 0x24
 800b9b8:	220b      	movs	r2, #11
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	f7fe fc56 	bl	800a26c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	330c      	adds	r3, #12
 800b9cc:	f002 0218 	and.w	r2, r2, #24
 800b9d0:	b2d2      	uxtb	r2, r2
 800b9d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3730      	adds	r7, #48	; 0x30
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	4ec4ec4f 	.word	0x4ec4ec4f

0800b9ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 80c9 	beq.w	800bb9e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba14:	d032      	beq.n	800ba7c <get_fileinfo+0x90>
			i = j = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61bb      	str	r3, [r7, #24]
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ba1e:	e01b      	b.n	800ba58 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ba20:	89fb      	ldrh	r3, [r7, #14]
 800ba22:	2100      	movs	r1, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 fc4d 	bl	800d2c4 <ff_convert>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ba2e:	89fb      	ldrh	r3, [r7, #14]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <get_fileinfo+0x4e>
 800ba34:	2300      	movs	r3, #0
 800ba36:	61fb      	str	r3, [r7, #28]
 800ba38:	e01a      	b.n	800ba70 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	2bfe      	cmp	r3, #254	; 0xfe
 800ba3e:	d902      	bls.n	800ba46 <get_fileinfo+0x5a>
 800ba40:	2300      	movs	r3, #0
 800ba42:	61fb      	str	r3, [r7, #28]
 800ba44:	e014      	b.n	800ba70 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	1c5a      	adds	r2, r3, #1
 800ba4a:	61fa      	str	r2, [r7, #28]
 800ba4c:	89fa      	ldrh	r2, [r7, #14]
 800ba4e:	b2d1      	uxtb	r1, r2
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	4413      	add	r3, r2
 800ba54:	460a      	mov	r2, r1
 800ba56:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	68da      	ldr	r2, [r3, #12]
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	1c59      	adds	r1, r3, #1
 800ba60:	61b9      	str	r1, [r7, #24]
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	4413      	add	r3, r2
 800ba66:	881b      	ldrh	r3, [r3, #0]
 800ba68:	81fb      	strh	r3, [r7, #14]
 800ba6a:	89fb      	ldrh	r3, [r7, #14]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1d7      	bne.n	800ba20 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	4413      	add	r3, r2
 800ba76:	3316      	adds	r3, #22
 800ba78:	2200      	movs	r2, #0
 800ba7a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61bb      	str	r3, [r7, #24]
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	4413      	add	r3, r2
 800ba8a:	3316      	adds	r3, #22
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ba90:	e04c      	b.n	800bb2c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1a      	ldr	r2, [r3, #32]
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	1c59      	adds	r1, r3, #1
 800ba9a:	61f9      	str	r1, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d100      	bne.n	800baaa <get_fileinfo+0xbe>
 800baa8:	e040      	b.n	800bb2c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	2b05      	cmp	r3, #5
 800baae:	d101      	bne.n	800bab4 <get_fileinfo+0xc8>
 800bab0:	23e5      	movs	r3, #229	; 0xe5
 800bab2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	2b09      	cmp	r3, #9
 800bab8:	d10f      	bne.n	800bada <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800baba:	89bb      	ldrh	r3, [r7, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d105      	bne.n	800bacc <get_fileinfo+0xe0>
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	4413      	add	r3, r2
 800bac6:	3316      	adds	r3, #22
 800bac8:	222e      	movs	r2, #46	; 0x2e
 800baca:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	61ba      	str	r2, [r7, #24]
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	4413      	add	r3, r2
 800bad6:	222e      	movs	r2, #46	; 0x2e
 800bad8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	4413      	add	r3, r2
 800bae0:	3309      	adds	r3, #9
 800bae2:	7dfa      	ldrb	r2, [r7, #23]
 800bae4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800bae6:	89bb      	ldrh	r3, [r7, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d11c      	bne.n	800bb26 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d913      	bls.n	800bb1a <get_fileinfo+0x12e>
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	2b5a      	cmp	r3, #90	; 0x5a
 800baf6:	d810      	bhi.n	800bb1a <get_fileinfo+0x12e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	330c      	adds	r3, #12
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	461a      	mov	r2, r3
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	2b08      	cmp	r3, #8
 800bb06:	d901      	bls.n	800bb0c <get_fileinfo+0x120>
 800bb08:	2310      	movs	r3, #16
 800bb0a:	e000      	b.n	800bb0e <get_fileinfo+0x122>
 800bb0c:	2308      	movs	r3, #8
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	3320      	adds	r3, #32
 800bb18:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	4413      	add	r3, r2
 800bb20:	3316      	adds	r3, #22
 800bb22:	7dfa      	ldrb	r2, [r7, #23]
 800bb24:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	2b0a      	cmp	r3, #10
 800bb30:	d9af      	bls.n	800ba92 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800bb32:	89bb      	ldrh	r3, [r7, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10d      	bne.n	800bb54 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	3316      	adds	r3, #22
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	330c      	adds	r3, #12
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <get_fileinfo+0x168>
 800bb50:	2300      	movs	r3, #0
 800bb52:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	4413      	add	r3, r2
 800bb5a:	3309      	adds	r3, #9
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	7ada      	ldrb	r2, [r3, #11]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	331c      	adds	r3, #28
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe fb11 	bl	800a198 <ld_dword>
 800bb76:	4602      	mov	r2, r0
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	3316      	adds	r3, #22
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fe fb08 	bl	800a198 <ld_dword>
 800bb88:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	80da      	strh	r2, [r3, #6]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	0c1b      	lsrs	r3, r3, #16
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	809a      	strh	r2, [r3, #4]
 800bb9c:	e000      	b.n	800bba0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bb9e:	bf00      	nop
}
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08a      	sub	sp, #40	; 0x28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	613b      	str	r3, [r7, #16]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	617b      	str	r3, [r7, #20]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	1c5a      	adds	r2, r3, #1
 800bbcc:	61ba      	str	r2, [r7, #24]
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bbd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbd8:	2b1f      	cmp	r3, #31
 800bbda:	d940      	bls.n	800bc5e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bbdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbde:	2b2f      	cmp	r3, #47	; 0x2f
 800bbe0:	d006      	beq.n	800bbf0 <create_name+0x48>
 800bbe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbe4:	2b5c      	cmp	r3, #92	; 0x5c
 800bbe6:	d110      	bne.n	800bc0a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bbe8:	e002      	b.n	800bbf0 <create_name+0x48>
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	3301      	adds	r3, #1
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b2f      	cmp	r3, #47	; 0x2f
 800bbfa:	d0f6      	beq.n	800bbea <create_name+0x42>
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	4413      	add	r3, r2
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b5c      	cmp	r3, #92	; 0x5c
 800bc06:	d0f0      	beq.n	800bbea <create_name+0x42>
			break;
 800bc08:	e02a      	b.n	800bc60 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2bfe      	cmp	r3, #254	; 0xfe
 800bc0e:	d901      	bls.n	800bc14 <create_name+0x6c>
 800bc10:	2306      	movs	r3, #6
 800bc12:	e177      	b.n	800bf04 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bc14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bc1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 fb50 	bl	800d2c4 <ff_convert>
 800bc24:	4603      	mov	r3, r0
 800bc26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bc28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <create_name+0x8a>
 800bc2e:	2306      	movs	r3, #6
 800bc30:	e168      	b.n	800bf04 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bc32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc34:	2b7f      	cmp	r3, #127	; 0x7f
 800bc36:	d809      	bhi.n	800bc4c <create_name+0xa4>
 800bc38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	48b3      	ldr	r0, [pc, #716]	; (800bf0c <create_name+0x364>)
 800bc3e:	f7fe fb78 	bl	800a332 <chk_chr>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <create_name+0xa4>
 800bc48:	2306      	movs	r3, #6
 800bc4a:	e15b      	b.n	800bf04 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	617a      	str	r2, [r7, #20]
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	4413      	add	r3, r2
 800bc58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc5a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bc5c:	e7b4      	b.n	800bbc8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bc5e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	441a      	add	r2, r3
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bc6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc6c:	2b1f      	cmp	r3, #31
 800bc6e:	d801      	bhi.n	800bc74 <create_name+0xcc>
 800bc70:	2304      	movs	r3, #4
 800bc72:	e000      	b.n	800bc76 <create_name+0xce>
 800bc74:	2300      	movs	r3, #0
 800bc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bc7a:	e011      	b.n	800bca0 <create_name+0xf8>
		w = lfn[di - 1];
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc82:	3b01      	subs	r3, #1
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bc8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	d002      	beq.n	800bc9a <create_name+0xf2>
 800bc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc96:	2b2e      	cmp	r3, #46	; 0x2e
 800bc98:	d106      	bne.n	800bca8 <create_name+0x100>
		di--;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1ea      	bne.n	800bc7c <create_name+0xd4>
 800bca6:	e000      	b.n	800bcaa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bca8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <create_name+0x118>
 800bcbc:	2306      	movs	r3, #6
 800bcbe:	e121      	b.n	800bf04 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3324      	adds	r3, #36	; 0x24
 800bcc4:	220b      	movs	r2, #11
 800bcc6:	2120      	movs	r1, #32
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe faf0 	bl	800a2ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61bb      	str	r3, [r7, #24]
 800bcd2:	e002      	b.n	800bcda <create_name+0x132>
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	61bb      	str	r3, [r7, #24]
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4413      	add	r3, r2
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d0f5      	beq.n	800bcd4 <create_name+0x12c>
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	2b2e      	cmp	r3, #46	; 0x2e
 800bcf4:	d0ee      	beq.n	800bcd4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d009      	beq.n	800bd10 <create_name+0x168>
 800bcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd00:	f043 0303 	orr.w	r3, r3, #3
 800bd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bd08:	e002      	b.n	800bd10 <create_name+0x168>
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	617b      	str	r3, [r7, #20]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d009      	beq.n	800bd2a <create_name+0x182>
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	2b2e      	cmp	r3, #46	; 0x2e
 800bd28:	d1ef      	bne.n	800bd0a <create_name+0x162>

	i = b = 0; ni = 8;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd30:	2300      	movs	r3, #0
 800bd32:	623b      	str	r3, [r7, #32]
 800bd34:	2308      	movs	r3, #8
 800bd36:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	1c5a      	adds	r2, r3, #1
 800bd3c:	61ba      	str	r2, [r7, #24]
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bd48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 8090 	beq.w	800be70 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bd50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d006      	beq.n	800bd64 <create_name+0x1bc>
 800bd56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd58:	2b2e      	cmp	r3, #46	; 0x2e
 800bd5a:	d10a      	bne.n	800bd72 <create_name+0x1ca>
 800bd5c:	69ba      	ldr	r2, [r7, #24]
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d006      	beq.n	800bd72 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd68:	f043 0303 	orr.w	r3, r3, #3
 800bd6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd70:	e07d      	b.n	800be6e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bd72:	6a3a      	ldr	r2, [r7, #32]
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d203      	bcs.n	800bd82 <create_name+0x1da>
 800bd7a:	69ba      	ldr	r2, [r7, #24]
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d123      	bne.n	800bdca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	2b0b      	cmp	r3, #11
 800bd86:	d106      	bne.n	800bd96 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd8c:	f043 0303 	orr.w	r3, r3, #3
 800bd90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd94:	e06f      	b.n	800be76 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d005      	beq.n	800bdaa <create_name+0x202>
 800bd9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda2:	f043 0303 	orr.w	r3, r3, #3
 800bda6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d860      	bhi.n	800be74 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	61bb      	str	r3, [r7, #24]
 800bdb6:	2308      	movs	r3, #8
 800bdb8:	623b      	str	r3, [r7, #32]
 800bdba:	230b      	movs	r3, #11
 800bdbc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bdbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bdc8:	e051      	b.n	800be6e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bdca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdcc:	2b7f      	cmp	r3, #127	; 0x7f
 800bdce:	d914      	bls.n	800bdfa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bdd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f001 fa75 	bl	800d2c4 <ff_convert>
 800bdda:	4603      	mov	r3, r0
 800bddc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bdde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <create_name+0x246>
 800bde4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bde6:	3b80      	subs	r3, #128	; 0x80
 800bde8:	4a49      	ldr	r2, [pc, #292]	; (800bf10 <create_name+0x368>)
 800bdea:	5cd3      	ldrb	r3, [r2, r3]
 800bdec:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdf2:	f043 0302 	orr.w	r3, r3, #2
 800bdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bdfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d007      	beq.n	800be10 <create_name+0x268>
 800be00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be02:	4619      	mov	r1, r3
 800be04:	4843      	ldr	r0, [pc, #268]	; (800bf14 <create_name+0x36c>)
 800be06:	f7fe fa94 	bl	800a332 <chk_chr>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d008      	beq.n	800be22 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800be10:	235f      	movs	r3, #95	; 0x5f
 800be12:	84bb      	strh	r3, [r7, #36]	; 0x24
 800be14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be18:	f043 0303 	orr.w	r3, r3, #3
 800be1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be20:	e01b      	b.n	800be5a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800be22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be24:	2b40      	cmp	r3, #64	; 0x40
 800be26:	d909      	bls.n	800be3c <create_name+0x294>
 800be28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be2a:	2b5a      	cmp	r3, #90	; 0x5a
 800be2c:	d806      	bhi.n	800be3c <create_name+0x294>
					b |= 2;
 800be2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be32:	f043 0302 	orr.w	r3, r3, #2
 800be36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be3a:	e00e      	b.n	800be5a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800be3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be3e:	2b60      	cmp	r3, #96	; 0x60
 800be40:	d90b      	bls.n	800be5a <create_name+0x2b2>
 800be42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be44:	2b7a      	cmp	r3, #122	; 0x7a
 800be46:	d808      	bhi.n	800be5a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800be48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be4c:	f043 0301 	orr.w	r3, r3, #1
 800be50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be56:	3b20      	subs	r3, #32
 800be58:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	623a      	str	r2, [r7, #32]
 800be60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be62:	b2d1      	uxtb	r1, r2
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	4413      	add	r3, r2
 800be68:	460a      	mov	r2, r1
 800be6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800be6e:	e763      	b.n	800bd38 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800be70:	bf00      	nop
 800be72:	e000      	b.n	800be76 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800be74:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be7c:	2be5      	cmp	r3, #229	; 0xe5
 800be7e:	d103      	bne.n	800be88 <create_name+0x2e0>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2205      	movs	r2, #5
 800be84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	2b08      	cmp	r3, #8
 800be8c:	d104      	bne.n	800be98 <create_name+0x2f0>
 800be8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800be98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be9c:	f003 030c 	and.w	r3, r3, #12
 800bea0:	2b0c      	cmp	r3, #12
 800bea2:	d005      	beq.n	800beb0 <create_name+0x308>
 800bea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	2b03      	cmp	r3, #3
 800beae:	d105      	bne.n	800bebc <create_name+0x314>
 800beb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beb4:	f043 0302 	orr.w	r3, r3, #2
 800beb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bec0:	f003 0302 	and.w	r3, r3, #2
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d117      	bne.n	800bef8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800becc:	f003 0303 	and.w	r3, r3, #3
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d105      	bne.n	800bee0 <create_name+0x338>
 800bed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bed8:	f043 0310 	orr.w	r3, r3, #16
 800bedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bee4:	f003 030c 	and.w	r3, r3, #12
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d105      	bne.n	800bef8 <create_name+0x350>
 800beec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bef0:	f043 0308 	orr.w	r3, r3, #8
 800bef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800befe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bf02:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3728      	adds	r7, #40	; 0x28
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	0800ea94 	.word	0x0800ea94
 800bf10:	0800eb84 	.word	0x0800eb84
 800bf14:	0800eaa0 	.word	0x0800eaa0

0800bf18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bf2c:	e002      	b.n	800bf34 <follow_path+0x1c>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	3301      	adds	r3, #1
 800bf32:	603b      	str	r3, [r7, #0]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b2f      	cmp	r3, #47	; 0x2f
 800bf3a:	d0f8      	beq.n	800bf2e <follow_path+0x16>
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b5c      	cmp	r3, #92	; 0x5c
 800bf42:	d0f4      	beq.n	800bf2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2200      	movs	r2, #0
 800bf48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b1f      	cmp	r3, #31
 800bf50:	d80a      	bhi.n	800bf68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2280      	movs	r2, #128	; 0x80
 800bf56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7fe ff33 	bl	800adc8 <dir_sdi>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75fb      	strb	r3, [r7, #23]
 800bf66:	e043      	b.n	800bff0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf68:	463b      	mov	r3, r7
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7ff fe1b 	bl	800bba8 <create_name>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d134      	bne.n	800bfe6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff fb7d 	bl	800b67c <dir_find>
 800bf82:	4603      	mov	r3, r0
 800bf84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00a      	beq.n	800bfaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d127      	bne.n	800bfea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf9a:	7afb      	ldrb	r3, [r7, #11]
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d122      	bne.n	800bfea <follow_path+0xd2>
 800bfa4:	2305      	movs	r3, #5
 800bfa6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bfa8:	e01f      	b.n	800bfea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bfaa:	7afb      	ldrb	r3, [r7, #11]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d11c      	bne.n	800bfee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	799b      	ldrb	r3, [r3, #6]
 800bfb8:	f003 0310 	and.w	r3, r3, #16
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bfc0:	2305      	movs	r3, #5
 800bfc2:	75fb      	strb	r3, [r7, #23]
 800bfc4:	e014      	b.n	800bff0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f7ff f87c 	bl	800b0d6 <ld_clust>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bfe4:	e7c0      	b.n	800bf68 <follow_path+0x50>
			if (res != FR_OK) break;
 800bfe6:	bf00      	nop
 800bfe8:	e002      	b.n	800bff0 <follow_path+0xd8>
				break;
 800bfea:	bf00      	nop
 800bfec:	e000      	b.n	800bff0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bfee:	bf00      	nop
			}
		}
	}

	return res;
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3718      	adds	r7, #24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bffa:	b480      	push	{r7}
 800bffc:	b087      	sub	sp, #28
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c002:	f04f 33ff 	mov.w	r3, #4294967295
 800c006:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d031      	beq.n	800c074 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	e002      	b.n	800c01e <get_ldnumber+0x24>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	3301      	adds	r3, #1
 800c01c:	617b      	str	r3, [r7, #20]
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	2b1f      	cmp	r3, #31
 800c024:	d903      	bls.n	800c02e <get_ldnumber+0x34>
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	2b3a      	cmp	r3, #58	; 0x3a
 800c02c:	d1f4      	bne.n	800c018 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b3a      	cmp	r3, #58	; 0x3a
 800c034:	d11c      	bne.n	800c070 <get_ldnumber+0x76>
			tp = *path;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	60fa      	str	r2, [r7, #12]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	3b30      	subs	r3, #48	; 0x30
 800c046:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2b09      	cmp	r3, #9
 800c04c:	d80e      	bhi.n	800c06c <get_ldnumber+0x72>
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	429a      	cmp	r2, r3
 800c054:	d10a      	bne.n	800c06c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d107      	bne.n	800c06c <get_ldnumber+0x72>
					vol = (int)i;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	3301      	adds	r3, #1
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	e002      	b.n	800c076 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c070:	2300      	movs	r3, #0
 800c072:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c074:	693b      	ldr	r3, [r7, #16]
}
 800c076:	4618      	mov	r0, r3
 800c078:	371c      	adds	r7, #28
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
	...

0800c084 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	70da      	strb	r2, [r3, #3]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f04f 32ff 	mov.w	r2, #4294967295
 800c09a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7fe fb12 	bl	800a6c8 <move_window>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d001      	beq.n	800c0ae <check_fs+0x2a>
 800c0aa:	2304      	movs	r3, #4
 800c0ac:	e038      	b.n	800c120 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3334      	adds	r3, #52	; 0x34
 800c0b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe f856 	bl	800a168 <ld_word>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d001      	beq.n	800c0cc <check_fs+0x48>
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e029      	b.n	800c120 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0d2:	2be9      	cmp	r3, #233	; 0xe9
 800c0d4:	d009      	beq.n	800c0ea <check_fs+0x66>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0dc:	2beb      	cmp	r3, #235	; 0xeb
 800c0de:	d11e      	bne.n	800c11e <check_fs+0x9a>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c0e6:	2b90      	cmp	r3, #144	; 0x90
 800c0e8:	d119      	bne.n	800c11e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3334      	adds	r3, #52	; 0x34
 800c0ee:	3336      	adds	r3, #54	; 0x36
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe f851 	bl	800a198 <ld_dword>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c0fc:	4a0a      	ldr	r2, [pc, #40]	; (800c128 <check_fs+0xa4>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d101      	bne.n	800c106 <check_fs+0x82>
 800c102:	2300      	movs	r3, #0
 800c104:	e00c      	b.n	800c120 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3334      	adds	r3, #52	; 0x34
 800c10a:	3352      	adds	r3, #82	; 0x52
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe f843 	bl	800a198 <ld_dword>
 800c112:	4603      	mov	r3, r0
 800c114:	4a05      	ldr	r2, [pc, #20]	; (800c12c <check_fs+0xa8>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d101      	bne.n	800c11e <check_fs+0x9a>
 800c11a:	2300      	movs	r3, #0
 800c11c:	e000      	b.n	800c120 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c11e:	2302      	movs	r3, #2
}
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	00544146 	.word	0x00544146
 800c12c:	33544146 	.word	0x33544146

0800c130 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b096      	sub	sp, #88	; 0x58
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	4613      	mov	r3, r2
 800c13c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff ff58 	bl	800bffa <get_ldnumber>
 800c14a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da01      	bge.n	800c156 <find_volume+0x26>
 800c152:	230b      	movs	r3, #11
 800c154:	e231      	b.n	800c5ba <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c156:	4aa8      	ldr	r2, [pc, #672]	; (800c3f8 <find_volume+0x2c8>)
 800c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <find_volume+0x3a>
 800c166:	230c      	movs	r3, #12
 800c168:	e227      	b.n	800c5ba <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c16e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	f023 0301 	bic.w	r3, r3, #1
 800c176:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01a      	beq.n	800c1b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	785b      	ldrb	r3, [r3, #1]
 800c184:	4618      	mov	r0, r3
 800c186:	f7fd ff51 	bl	800a02c <disk_status>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10c      	bne.n	800c1b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c19c:	79fb      	ldrb	r3, [r7, #7]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d007      	beq.n	800c1b2 <find_volume+0x82>
 800c1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1a6:	f003 0304 	and.w	r3, r3, #4
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c1ae:	230a      	movs	r3, #10
 800c1b0:	e203      	b.n	800c5ba <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e201      	b.n	800c5ba <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	785b      	ldrb	r3, [r3, #1]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fd ff49 	bl	800a060 <disk_initialize>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1d8:	f003 0301 	and.w	r3, r3, #1
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e1ea      	b.n	800c5ba <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <find_volume+0xca>
 800c1ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1ee:	f003 0304 	and.w	r3, r3, #4
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c1f6:	230a      	movs	r3, #10
 800c1f8:	e1df      	b.n	800c5ba <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c1fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c202:	f7ff ff3f 	bl	800c084 <check_fs>
 800c206:	4603      	mov	r3, r0
 800c208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c210:	2b02      	cmp	r3, #2
 800c212:	d14b      	bne.n	800c2ac <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c214:	2300      	movs	r3, #0
 800c216:	643b      	str	r3, [r7, #64]	; 0x40
 800c218:	e01f      	b.n	800c25a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c222:	011b      	lsls	r3, r3, #4
 800c224:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c228:	4413      	add	r3, r2
 800c22a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	3304      	adds	r3, #4
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d006      	beq.n	800c244 <find_volume+0x114>
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	3308      	adds	r3, #8
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd ffac 	bl	800a198 <ld_dword>
 800c240:	4602      	mov	r2, r0
 800c242:	e000      	b.n	800c246 <find_volume+0x116>
 800c244:	2200      	movs	r2, #0
 800c246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c24e:	440b      	add	r3, r1
 800c250:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c256:	3301      	adds	r3, #1
 800c258:	643b      	str	r3, [r7, #64]	; 0x40
 800c25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d9dc      	bls.n	800c21a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c260:	2300      	movs	r3, #0
 800c262:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <find_volume+0x140>
 800c26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c26c:	3b01      	subs	r3, #1
 800c26e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c278:	4413      	add	r3, r2
 800c27a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c27e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <find_volume+0x162>
 800c286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c28a:	f7ff fefb 	bl	800c084 <check_fs>
 800c28e:	4603      	mov	r3, r0
 800c290:	e000      	b.n	800c294 <find_volume+0x164>
 800c292:	2303      	movs	r3, #3
 800c294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d905      	bls.n	800c2ac <find_volume+0x17c>
 800c2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d9e1      	bls.n	800c270 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c2ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d101      	bne.n	800c2b8 <find_volume+0x188>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e180      	b.n	800c5ba <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d901      	bls.n	800c2c4 <find_volume+0x194>
 800c2c0:	230d      	movs	r3, #13
 800c2c2:	e17a      	b.n	800c5ba <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	3334      	adds	r3, #52	; 0x34
 800c2c8:	330b      	adds	r3, #11
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd ff4c 	bl	800a168 <ld_word>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2d6:	d001      	beq.n	800c2dc <find_volume+0x1ac>
 800c2d8:	230d      	movs	r3, #13
 800c2da:	e16e      	b.n	800c5ba <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	3334      	adds	r3, #52	; 0x34
 800c2e0:	3316      	adds	r3, #22
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fd ff40 	bl	800a168 <ld_word>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d106      	bne.n	800c300 <find_volume+0x1d0>
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	3334      	adds	r3, #52	; 0x34
 800c2f6:	3324      	adds	r3, #36	; 0x24
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fd ff4d 	bl	800a198 <ld_dword>
 800c2fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c304:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	789b      	ldrb	r3, [r3, #2]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d005      	beq.n	800c324 <find_volume+0x1f4>
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	789b      	ldrb	r3, [r3, #2]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d001      	beq.n	800c324 <find_volume+0x1f4>
 800c320:	230d      	movs	r3, #13
 800c322:	e14a      	b.n	800c5ba <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c326:	789b      	ldrb	r3, [r3, #2]
 800c328:	461a      	mov	r2, r3
 800c32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c32c:	fb02 f303 	mul.w	r3, r2, r3
 800c330:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c338:	b29a      	uxth	r2, r3
 800c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	895b      	ldrh	r3, [r3, #10]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d008      	beq.n	800c358 <find_volume+0x228>
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	895b      	ldrh	r3, [r3, #10]
 800c34a:	461a      	mov	r2, r3
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	895b      	ldrh	r3, [r3, #10]
 800c350:	3b01      	subs	r3, #1
 800c352:	4013      	ands	r3, r2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <find_volume+0x22c>
 800c358:	230d      	movs	r3, #13
 800c35a:	e12e      	b.n	800c5ba <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	3334      	adds	r3, #52	; 0x34
 800c360:	3311      	adds	r3, #17
 800c362:	4618      	mov	r0, r3
 800c364:	f7fd ff00 	bl	800a168 <ld_word>
 800c368:	4603      	mov	r3, r0
 800c36a:	461a      	mov	r2, r3
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	891b      	ldrh	r3, [r3, #8]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	b29b      	uxth	r3, r3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <find_volume+0x252>
 800c37e:	230d      	movs	r3, #13
 800c380:	e11b      	b.n	800c5ba <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c384:	3334      	adds	r3, #52	; 0x34
 800c386:	3313      	adds	r3, #19
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fd feed 	bl	800a168 <ld_word>
 800c38e:	4603      	mov	r3, r0
 800c390:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <find_volume+0x276>
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	3334      	adds	r3, #52	; 0x34
 800c39c:	3320      	adds	r3, #32
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fd fefa 	bl	800a198 <ld_dword>
 800c3a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	3334      	adds	r3, #52	; 0x34
 800c3aa:	330e      	adds	r3, #14
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fd fedb 	bl	800a168 <ld_word>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c3b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <find_volume+0x290>
 800c3bc:	230d      	movs	r3, #13
 800c3be:	e0fc      	b.n	800c5ba <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c3c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c4:	4413      	add	r3, r2
 800c3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c8:	8912      	ldrh	r2, [r2, #8]
 800c3ca:	0912      	lsrs	r2, r2, #4
 800c3cc:	b292      	uxth	r2, r2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c3d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d201      	bcs.n	800c3de <find_volume+0x2ae>
 800c3da:	230d      	movs	r3, #13
 800c3dc:	e0ed      	b.n	800c5ba <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c3de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3e6:	8952      	ldrh	r2, [r2, #10]
 800c3e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d103      	bne.n	800c3fc <find_volume+0x2cc>
 800c3f4:	230d      	movs	r3, #13
 800c3f6:	e0e0      	b.n	800c5ba <find_volume+0x48a>
 800c3f8:	200000bc 	.word	0x200000bc
		fmt = FS_FAT32;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c408:	4293      	cmp	r3, r2
 800c40a:	d802      	bhi.n	800c412 <find_volume+0x2e2>
 800c40c:	2302      	movs	r3, #2
 800c40e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c414:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c418:	4293      	cmp	r3, r2
 800c41a:	d802      	bhi.n	800c422 <find_volume+0x2f2>
 800c41c:	2301      	movs	r3, #1
 800c41e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	1c9a      	adds	r2, r3, #2
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c42e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c430:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c434:	441a      	add	r2, r3
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c43a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	441a      	add	r2, r3
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c448:	2b03      	cmp	r3, #3
 800c44a:	d11e      	bne.n	800c48a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44e:	3334      	adds	r3, #52	; 0x34
 800c450:	332a      	adds	r3, #42	; 0x2a
 800c452:	4618      	mov	r0, r3
 800c454:	f7fd fe88 	bl	800a168 <ld_word>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <find_volume+0x332>
 800c45e:	230d      	movs	r3, #13
 800c460:	e0ab      	b.n	800c5ba <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	891b      	ldrh	r3, [r3, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <find_volume+0x33e>
 800c46a:	230d      	movs	r3, #13
 800c46c:	e0a5      	b.n	800c5ba <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	3334      	adds	r3, #52	; 0x34
 800c472:	332c      	adds	r3, #44	; 0x2c
 800c474:	4618      	mov	r0, r3
 800c476:	f7fd fe8f 	bl	800a198 <ld_dword>
 800c47a:	4602      	mov	r2, r0
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	647b      	str	r3, [r7, #68]	; 0x44
 800c488:	e01f      	b.n	800c4ca <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	891b      	ldrh	r3, [r3, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <find_volume+0x366>
 800c492:	230d      	movs	r3, #13
 800c494:	e091      	b.n	800c5ba <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c49c:	441a      	add	r2, r3
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c4a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d103      	bne.n	800c4b2 <find_volume+0x382>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	e00a      	b.n	800c4c8 <find_volume+0x398>
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	699a      	ldr	r2, [r3, #24]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4413      	add	r3, r2
 800c4bc:	085a      	lsrs	r2, r3, #1
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c4c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4cc:	69da      	ldr	r2, [r3, #28]
 800c4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c4d4:	0a5b      	lsrs	r3, r3, #9
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d201      	bcs.n	800c4de <find_volume+0x3ae>
 800c4da:	230d      	movs	r3, #13
 800c4dc:	e06d      	b.n	800c5ba <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e4:	615a      	str	r2, [r3, #20]
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	695a      	ldr	r2, [r3, #20]
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	2280      	movs	r2, #128	; 0x80
 800c4f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d149      	bne.n	800c590 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fe:	3334      	adds	r3, #52	; 0x34
 800c500:	3330      	adds	r3, #48	; 0x30
 800c502:	4618      	mov	r0, r3
 800c504:	f7fd fe30 	bl	800a168 <ld_word>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d140      	bne.n	800c590 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c510:	3301      	adds	r3, #1
 800c512:	4619      	mov	r1, r3
 800c514:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c516:	f7fe f8d7 	bl	800a6c8 <move_window>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d137      	bne.n	800c590 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	2200      	movs	r2, #0
 800c524:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c528:	3334      	adds	r3, #52	; 0x34
 800c52a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fd fe1a 	bl	800a168 <ld_word>
 800c534:	4603      	mov	r3, r0
 800c536:	461a      	mov	r2, r3
 800c538:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d127      	bne.n	800c590 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	3334      	adds	r3, #52	; 0x34
 800c544:	4618      	mov	r0, r3
 800c546:	f7fd fe27 	bl	800a198 <ld_dword>
 800c54a:	4603      	mov	r3, r0
 800c54c:	4a1d      	ldr	r2, [pc, #116]	; (800c5c4 <find_volume+0x494>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d11e      	bne.n	800c590 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	3334      	adds	r3, #52	; 0x34
 800c556:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fd fe1c 	bl	800a198 <ld_dword>
 800c560:	4603      	mov	r3, r0
 800c562:	4a19      	ldr	r2, [pc, #100]	; (800c5c8 <find_volume+0x498>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d113      	bne.n	800c590 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56a:	3334      	adds	r3, #52	; 0x34
 800c56c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c570:	4618      	mov	r0, r3
 800c572:	f7fd fe11 	bl	800a198 <ld_dword>
 800c576:	4602      	mov	r2, r0
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57e:	3334      	adds	r3, #52	; 0x34
 800c580:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c584:	4618      	mov	r0, r3
 800c586:	f7fd fe07 	bl	800a198 <ld_dword>
 800c58a:	4602      	mov	r2, r0
 800c58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c596:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c598:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <find_volume+0x49c>)
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	4b0a      	ldr	r3, [pc, #40]	; (800c5cc <find_volume+0x49c>)
 800c5a2:	801a      	strh	r2, [r3, #0]
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <find_volume+0x49c>)
 800c5a6:	881a      	ldrh	r2, [r3, #0]
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	4a08      	ldr	r2, [pc, #32]	; (800c5d0 <find_volume+0x4a0>)
 800c5b0:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c5b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5b4:	f7fe f820 	bl	800a5f8 <clear_lock>
#endif
	return FR_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3758      	adds	r7, #88	; 0x58
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	41615252 	.word	0x41615252
 800c5c8:	61417272 	.word	0x61417272
 800c5cc:	200000c0 	.word	0x200000c0
 800c5d0:	200000e4 	.word	0x200000e4

0800c5d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c5de:	2309      	movs	r3, #9
 800c5e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01c      	beq.n	800c622 <validate+0x4e>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d018      	beq.n	800c622 <validate+0x4e>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d013      	beq.n	800c622 <validate+0x4e>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	889a      	ldrh	r2, [r3, #4]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	429a      	cmp	r2, r3
 800c606:	d10c      	bne.n	800c622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fd fd0c 	bl	800a02c <disk_status>
 800c614:	4603      	mov	r3, r0
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <validate+0x4e>
			res = FR_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <validate+0x5a>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	e000      	b.n	800c630 <validate+0x5c>
 800c62e:	2300      	movs	r3, #0
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	6013      	str	r3, [r2, #0]
	return res;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4613      	mov	r3, r2
 800c64c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c652:	f107 0310 	add.w	r3, r7, #16
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fccf 	bl	800bffa <get_ldnumber>
 800c65c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	2b00      	cmp	r3, #0
 800c662:	da01      	bge.n	800c668 <f_mount+0x28>
 800c664:	230b      	movs	r3, #11
 800c666:	e02b      	b.n	800c6c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c668:	4a17      	ldr	r2, [pc, #92]	; (800c6c8 <f_mount+0x88>)
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d005      	beq.n	800c684 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c678:	69b8      	ldr	r0, [r7, #24]
 800c67a:	f7fd ffbd 	bl	800a5f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2200      	movs	r2, #0
 800c682:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	490d      	ldr	r1, [pc, #52]	; (800c6c8 <f_mount+0x88>)
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <f_mount+0x66>
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d001      	beq.n	800c6aa <f_mount+0x6a>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e00a      	b.n	800c6c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c6aa:	f107 010c 	add.w	r1, r7, #12
 800c6ae:	f107 0308 	add.w	r3, r7, #8
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff fd3b 	bl	800c130 <find_volume>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	200000bc 	.word	0x200000bc

0800c6cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b09a      	sub	sp, #104	; 0x68
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d101      	bne.n	800c6e4 <f_open+0x18>
 800c6e0:	2309      	movs	r3, #9
 800c6e2:	e1ad      	b.n	800ca40 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c6ec:	79fa      	ldrb	r2, [r7, #7]
 800c6ee:	f107 0114 	add.w	r1, r7, #20
 800c6f2:	f107 0308 	add.w	r3, r7, #8
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff fd1a 	bl	800c130 <find_volume>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 8191 	bne.w	800ca2e <f_open+0x362>
		dj.obj.fs = fs;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	f107 0318 	add.w	r3, r7, #24
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fbfd 	bl	800bf18 <follow_path>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d11a      	bne.n	800c762 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c72c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c730:	b25b      	sxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	da03      	bge.n	800c73e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c736:	2306      	movs	r3, #6
 800c738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c73c:	e011      	b.n	800c762 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c73e:	79fb      	ldrb	r3, [r7, #7]
 800c740:	f023 0301 	bic.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	bf14      	ite	ne
 800c748:	2301      	movne	r3, #1
 800c74a:	2300      	moveq	r3, #0
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	461a      	mov	r2, r3
 800c750:	f107 0318 	add.w	r3, r7, #24
 800c754:	4611      	mov	r1, r2
 800c756:	4618      	mov	r0, r3
 800c758:	f7fd fe06 	bl	800a368 <chk_lock>
 800c75c:	4603      	mov	r3, r0
 800c75e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	f003 031c 	and.w	r3, r3, #28
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d07f      	beq.n	800c86c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c76c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c770:	2b00      	cmp	r3, #0
 800c772:	d017      	beq.n	800c7a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d10e      	bne.n	800c79a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c77c:	f7fd fe50 	bl	800a420 <enq_lock>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d006      	beq.n	800c794 <f_open+0xc8>
 800c786:	f107 0318 	add.w	r3, r7, #24
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff f836 	bl	800b7fc <dir_register>
 800c790:	4603      	mov	r3, r0
 800c792:	e000      	b.n	800c796 <f_open+0xca>
 800c794:	2312      	movs	r3, #18
 800c796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	f043 0308 	orr.w	r3, r3, #8
 800c7a0:	71fb      	strb	r3, [r7, #7]
 800c7a2:	e010      	b.n	800c7c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c7a4:	7fbb      	ldrb	r3, [r7, #30]
 800c7a6:	f003 0311 	and.w	r3, r3, #17
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d003      	beq.n	800c7b6 <f_open+0xea>
					res = FR_DENIED;
 800c7ae:	2307      	movs	r3, #7
 800c7b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c7b4:	e007      	b.n	800c7c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <f_open+0xfa>
 800c7c0:	2308      	movs	r3, #8
 800c7c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c7c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d168      	bne.n	800c8a0 <f_open+0x1d4>
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d063      	beq.n	800c8a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c7d8:	f7fa fc2c 	bl	8007034 <get_fattime>
 800c7dc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	330e      	adds	r3, #14
 800c7e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fd fd15 	bl	800a214 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	3316      	adds	r3, #22
 800c7ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fd fd0f 	bl	800a214 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	330b      	adds	r3, #11
 800c7fa:	2220      	movs	r2, #32
 800c7fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe fc66 	bl	800b0d6 <ld_clust>
 800c80a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c810:	2200      	movs	r2, #0
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe fc7e 	bl	800b114 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	331c      	adds	r3, #28
 800c81c:	2100      	movs	r1, #0
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fd fcf8 	bl	800a214 <st_dword>
					fs->wflag = 1;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2201      	movs	r2, #1
 800c828:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d037      	beq.n	800c8a0 <f_open+0x1d4>
						dw = fs->winsect;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c834:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c836:	f107 0318 	add.w	r3, r7, #24
 800c83a:	2200      	movs	r2, #0
 800c83c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe f991 	bl	800ab66 <remove_chain>
 800c844:	4603      	mov	r3, r0
 800c846:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c84a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d126      	bne.n	800c8a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c856:	4618      	mov	r0, r3
 800c858:	f7fd ff36 	bl	800a6c8 <move_window>
 800c85c:	4603      	mov	r3, r0
 800c85e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c866:	3a01      	subs	r2, #1
 800c868:	611a      	str	r2, [r3, #16]
 800c86a:	e019      	b.n	800c8a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c86c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c870:	2b00      	cmp	r3, #0
 800c872:	d115      	bne.n	800c8a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c874:	7fbb      	ldrb	r3, [r7, #30]
 800c876:	f003 0310 	and.w	r3, r3, #16
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c87e:	2304      	movs	r3, #4
 800c880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c884:	e00c      	b.n	800c8a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	f003 0302 	and.w	r3, r3, #2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d007      	beq.n	800c8a0 <f_open+0x1d4>
 800c890:	7fbb      	ldrb	r3, [r7, #30]
 800c892:	f003 0301 	and.w	r3, r3, #1
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <f_open+0x1d4>
						res = FR_DENIED;
 800c89a:	2307      	movs	r3, #7
 800c89c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c8a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d128      	bne.n	800c8fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c8a8:	79fb      	ldrb	r3, [r7, #7]
 800c8aa:	f003 0308 	and.w	r3, r3, #8
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c8c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	f023 0301 	bic.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bf14      	ite	ne
 800c8d2:	2301      	movne	r3, #1
 800c8d4:	2300      	moveq	r3, #0
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f107 0318 	add.w	r3, r7, #24
 800c8de:	4611      	mov	r1, r2
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fd fdbf 	bl	800a464 <inc_lock>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <f_open+0x22e>
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c8fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f040 8095 	bne.w	800ca2e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c908:	4611      	mov	r1, r2
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe fbe3 	bl	800b0d6 <ld_clust>
 800c910:	4602      	mov	r2, r0
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	331c      	adds	r3, #28
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd fc3c 	bl	800a198 <ld_dword>
 800c920:	4602      	mov	r2, r0
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	88da      	ldrh	r2, [r3, #6]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	79fa      	ldrb	r2, [r7, #7]
 800c93e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3330      	adds	r3, #48	; 0x30
 800c956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c95a:	2100      	movs	r1, #0
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fd fca6 	bl	800a2ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c962:	79fb      	ldrb	r3, [r7, #7]
 800c964:	f003 0320 	and.w	r3, r3, #32
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d060      	beq.n	800ca2e <f_open+0x362>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d05c      	beq.n	800ca2e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68da      	ldr	r2, [r3, #12]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	895b      	ldrh	r3, [r3, #10]
 800c980:	025b      	lsls	r3, r3, #9
 800c982:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c990:	e016      	b.n	800c9c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c996:	4618      	mov	r0, r3
 800c998:	f7fd ff51 	bl	800a83e <get_fat>
 800c99c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c99e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d802      	bhi.n	800c9aa <f_open+0x2de>
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c9aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d102      	bne.n	800c9b8 <f_open+0x2ec>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <f_open+0x304>
 800c9c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d8e0      	bhi.n	800c992 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c9d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d127      	bne.n	800ca2e <f_open+0x362>
 800c9de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d022      	beq.n	800ca2e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fd ff07 	bl	800a800 <clust2sect>
 800c9f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <f_open+0x336>
						res = FR_INT_ERR;
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ca00:	e015      	b.n	800ca2e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ca02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca04:	0a5a      	lsrs	r2, r3, #9
 800ca06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca08:	441a      	add	r2, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	7858      	ldrb	r0, [r3, #1]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6a1a      	ldr	r2, [r3, #32]
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	f7fd fb45 	bl	800a0ac <disk_read>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <f_open+0x362>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ca2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <f_open+0x370>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3768      	adds	r7, #104	; 0x68
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08c      	sub	sp, #48	; 0x30
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f107 0210 	add.w	r2, r7, #16
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff fdb3 	bl	800c5d4 <validate>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d107      	bne.n	800ca8c <f_write+0x44>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	7d5b      	ldrb	r3, [r3, #21]
 800ca80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <f_write+0x4a>
 800ca8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca90:	e14b      	b.n	800cd2a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	7d1b      	ldrb	r3, [r3, #20]
 800ca96:	f003 0302 	and.w	r3, r3, #2
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <f_write+0x5a>
 800ca9e:	2307      	movs	r3, #7
 800caa0:	e143      	b.n	800cd2a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	699a      	ldr	r2, [r3, #24]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	441a      	add	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	429a      	cmp	r2, r3
 800cab0:	f080 812d 	bcs.w	800cd0e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	43db      	mvns	r3, r3
 800caba:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cabc:	e127      	b.n	800cd0e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f040 80e3 	bne.w	800cc92 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	0a5b      	lsrs	r3, r3, #9
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	8952      	ldrh	r2, [r2, #10]
 800cad6:	3a01      	subs	r2, #1
 800cad8:	4013      	ands	r3, r2
 800cada:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d143      	bne.n	800cb6a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10c      	bne.n	800cb04 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d11a      	bne.n	800cb2c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2100      	movs	r1, #0
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe f898 	bl	800ac30 <create_chain>
 800cb00:	62b8      	str	r0, [r7, #40]	; 0x28
 800cb02:	e013      	b.n	800cb2c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d007      	beq.n	800cb1c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	699b      	ldr	r3, [r3, #24]
 800cb10:	4619      	mov	r1, r3
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f7fe f924 	bl	800ad60 <clmt_clust>
 800cb18:	62b8      	str	r0, [r7, #40]	; 0x28
 800cb1a:	e007      	b.n	800cb2c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	4619      	mov	r1, r3
 800cb24:	4610      	mov	r0, r2
 800cb26:	f7fe f883 	bl	800ac30 <create_chain>
 800cb2a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 80f2 	beq.w	800cd18 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d104      	bne.n	800cb44 <f_write+0xfc>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	755a      	strb	r2, [r3, #21]
 800cb40:	2302      	movs	r3, #2
 800cb42:	e0f2      	b.n	800cd2a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4a:	d104      	bne.n	800cb56 <f_write+0x10e>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	755a      	strb	r2, [r3, #21]
 800cb52:	2301      	movs	r3, #1
 800cb54:	e0e9      	b.n	800cd2a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb5a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <f_write+0x122>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb68:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	7d1b      	ldrb	r3, [r3, #20]
 800cb6e:	b25b      	sxtb	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	da18      	bge.n	800cba6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	7858      	ldrb	r0, [r3, #1]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6a1a      	ldr	r2, [r3, #32]
 800cb82:	2301      	movs	r3, #1
 800cb84:	f7fd fab2 	bl	800a0ec <disk_write>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d004      	beq.n	800cb98 <f_write+0x150>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2201      	movs	r2, #1
 800cb92:	755a      	strb	r2, [r3, #21]
 800cb94:	2301      	movs	r3, #1
 800cb96:	e0c8      	b.n	800cd2a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
 800cb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cba6:	693a      	ldr	r2, [r7, #16]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	4619      	mov	r1, r3
 800cbae:	4610      	mov	r0, r2
 800cbb0:	f7fd fe26 	bl	800a800 <clust2sect>
 800cbb4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <f_write+0x17e>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	755a      	strb	r2, [r3, #21]
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	e0b1      	b.n	800cd2a <f_write+0x2e2>
			sect += csect;
 800cbc6:	697a      	ldr	r2, [r7, #20]
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	4413      	add	r3, r2
 800cbcc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	0a5b      	lsrs	r3, r3, #9
 800cbd2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cbd4:	6a3b      	ldr	r3, [r7, #32]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d03c      	beq.n	800cc54 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	6a3b      	ldr	r3, [r7, #32]
 800cbde:	4413      	add	r3, r2
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	8952      	ldrh	r2, [r2, #10]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d905      	bls.n	800cbf4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	895b      	ldrh	r3, [r3, #10]
 800cbec:	461a      	mov	r2, r3
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	7858      	ldrb	r0, [r3, #1]
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	69f9      	ldr	r1, [r7, #28]
 800cbfe:	f7fd fa75 	bl	800a0ec <disk_write>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <f_write+0x1ca>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	755a      	strb	r2, [r3, #21]
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e08b      	b.n	800cd2a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6a1a      	ldr	r2, [r3, #32]
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	6a3a      	ldr	r2, [r7, #32]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d915      	bls.n	800cc4c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1a      	ldr	r2, [r3, #32]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	025b      	lsls	r3, r3, #9
 800cc30:	69fa      	ldr	r2, [r7, #28]
 800cc32:	4413      	add	r3, r2
 800cc34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc38:	4619      	mov	r1, r3
 800cc3a:	f7fd fb17 	bl	800a26c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	7d1b      	ldrb	r3, [r3, #20]
 800cc42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
 800cc4e:	025b      	lsls	r3, r3, #9
 800cc50:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cc52:	e03f      	b.n	800ccd4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d016      	beq.n	800cc8c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	699a      	ldr	r2, [r3, #24]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d210      	bcs.n	800cc8c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	7858      	ldrb	r0, [r3, #1]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc74:	2301      	movs	r3, #1
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	f7fd fa18 	bl	800a0ac <disk_read>
 800cc7c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2201      	movs	r2, #1
 800cc86:	755a      	strb	r2, [r3, #21]
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e04e      	b.n	800cd2a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	697a      	ldr	r2, [r7, #20]
 800cc90:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc9a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cc9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d901      	bls.n	800ccac <f_write+0x264>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	4413      	add	r3, r2
 800ccbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccbe:	69f9      	ldr	r1, [r7, #28]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fd fad3 	bl	800a26c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	7d1b      	ldrb	r3, [r3, #20]
 800ccca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ccd4:	69fa      	ldr	r2, [r7, #28]
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	4413      	add	r3, r2
 800ccda:	61fb      	str	r3, [r7, #28]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	699a      	ldr	r2, [r3, #24]
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	441a      	add	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	619a      	str	r2, [r3, #24]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	68da      	ldr	r2, [r3, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	bf38      	it	cc
 800ccf4:	461a      	movcc	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	60da      	str	r2, [r3, #12]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	441a      	add	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f47f aed4 	bne.w	800cabe <f_write+0x76>
 800cd16:	e000      	b.n	800cd1a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cd18:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	7d1b      	ldrb	r3, [r3, #20]
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3730      	adds	r7, #48	; 0x30
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b086      	sub	sp, #24
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f107 0208 	add.w	r2, r7, #8
 800cd40:	4611      	mov	r1, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff fc46 	bl	800c5d4 <validate>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd4c:	7dfb      	ldrb	r3, [r7, #23]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d168      	bne.n	800ce24 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7d1b      	ldrb	r3, [r3, #20]
 800cd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d062      	beq.n	800ce24 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	7d1b      	ldrb	r3, [r3, #20]
 800cd62:	b25b      	sxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	da15      	bge.n	800cd94 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	7858      	ldrb	r0, [r3, #1]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1a      	ldr	r2, [r3, #32]
 800cd76:	2301      	movs	r3, #1
 800cd78:	f7fd f9b8 	bl	800a0ec <disk_write>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <f_sync+0x54>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e04f      	b.n	800ce26 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7d1b      	ldrb	r3, [r3, #20]
 800cd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cd94:	f7fa f94e 	bl	8007034 <get_fattime>
 800cd98:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	4619      	mov	r1, r3
 800cda2:	4610      	mov	r0, r2
 800cda4:	f7fd fc90 	bl	800a6c8 <move_window>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d138      	bne.n	800ce24 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	330b      	adds	r3, #11
 800cdbc:	781a      	ldrb	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	330b      	adds	r3, #11
 800cdc2:	f042 0220 	orr.w	r2, r2, #32
 800cdc6:	b2d2      	uxtb	r2, r2
 800cdc8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	68f9      	ldr	r1, [r7, #12]
 800cdd6:	f7fe f99d 	bl	800b114 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f103 021c 	add.w	r2, r3, #28
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	4619      	mov	r1, r3
 800cde6:	4610      	mov	r0, r2
 800cde8:	f7fd fa14 	bl	800a214 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3316      	adds	r3, #22
 800cdf0:	6939      	ldr	r1, [r7, #16]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fd fa0e 	bl	800a214 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	3312      	adds	r3, #18
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fd f9ed 	bl	800a1de <st_word>
					fs->wflag = 1;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2201      	movs	r2, #1
 800ce08:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fd fc89 	bl	800a724 <sync_fs>
 800ce12:	4603      	mov	r3, r0
 800ce14:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	7d1b      	ldrb	r3, [r3, #20]
 800ce1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7ff ff7b 	bl	800cd32 <f_sync>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d118      	bne.n	800ce78 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f107 0208 	add.w	r2, r7, #8
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff fbc0 	bl	800c5d4 <validate>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10c      	bne.n	800ce78 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fd fb8c 	bl	800a580 <dec_lock>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d102      	bne.n	800ce78 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b086      	sub	sp, #24
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <f_opendir+0x14>
 800ce92:	2309      	movs	r3, #9
 800ce94:	e064      	b.n	800cf60 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ce9a:	f107 010c 	add.w	r1, r7, #12
 800ce9e:	463b      	mov	r3, r7
 800cea0:	2200      	movs	r2, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff f944 	bl	800c130 <find_volume>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d14f      	bne.n	800cf52 <f_opendir+0xd0>
		obj->fs = fs;
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff f82b 	bl	800bf18 <follow_path>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d13d      	bne.n	800cf48 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ced2:	b25b      	sxtb	r3, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	db12      	blt.n	800cefe <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	799b      	ldrb	r3, [r3, #6]
 800cedc:	f003 0310 	and.w	r3, r3, #16
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00a      	beq.n	800cefa <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	4619      	mov	r1, r3
 800ceec:	4610      	mov	r0, r2
 800ceee:	f7fe f8f2 	bl	800b0d6 <ld_clust>
 800cef2:	4602      	mov	r2, r0
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	609a      	str	r2, [r3, #8]
 800cef8:	e001      	b.n	800cefe <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800cefa:	2305      	movs	r3, #5
 800cefc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d121      	bne.n	800cf48 <f_opendir+0xc6>
				obj->id = fs->id;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	88da      	ldrh	r2, [r3, #6]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7fd ff5a 	bl	800adc8 <dir_sdi>
 800cf14:	4603      	mov	r3, r0
 800cf16:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d114      	bne.n	800cf48 <f_opendir+0xc6>
					if (obj->sclust) {
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00d      	beq.n	800cf42 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cf26:	2100      	movs	r1, #0
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7fd fa9b 	bl	800a464 <inc_lock>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d105      	bne.n	800cf48 <f_opendir+0xc6>
 800cf3c:	2312      	movs	r3, #18
 800cf3e:	75fb      	strb	r3, [r7, #23]
 800cf40:	e002      	b.n	800cf48 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	2200      	movs	r2, #0
 800cf46:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cf48:	7dfb      	ldrb	r3, [r7, #23]
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	d101      	bne.n	800cf52 <f_opendir+0xd0>
 800cf4e:	2305      	movs	r3, #5
 800cf50:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <f_opendir+0xdc>
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f107 0208 	add.w	r2, r7, #8
 800cf76:	4611      	mov	r1, r2
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7ff fb2b 	bl	800c5d4 <validate>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d110      	bne.n	800cfaa <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d006      	beq.n	800cf9e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd faf3 	bl	800a580 <dec_lock>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f107 0208 	add.w	r2, r7, #8
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff fb04 	bl	800c5d4 <validate>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d126      	bne.n	800d024 <f_readdir+0x70>
		if (!fno) {
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d106      	bne.n	800cfea <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7fd fef2 	bl	800adc8 <dir_sdi>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
 800cfe8:	e01c      	b.n	800d024 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7fe fa9e 	bl	800b52e <dir_read>
 800cff2:	4603      	mov	r3, r0
 800cff4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800cff6:	7bfb      	ldrb	r3, [r7, #15]
 800cff8:	2b04      	cmp	r3, #4
 800cffa:	d101      	bne.n	800d000 <f_readdir+0x4c>
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10e      	bne.n	800d024 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7fe fcef 	bl	800b9ec <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d00e:	2100      	movs	r1, #0
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7fd ff54 	bl	800aebe <dir_next>
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d101      	bne.n	800d024 <f_readdir+0x70>
 800d020:	2300      	movs	r3, #0
 800d022:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d024:	7bfb      	ldrb	r3, [r7, #15]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b090      	sub	sp, #64	; 0x40
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d038:	f107 0108 	add.w	r1, r7, #8
 800d03c:	1d3b      	adds	r3, r7, #4
 800d03e:	2200      	movs	r2, #0
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff f875 	bl	800c130 <find_volume>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d04c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d050:	2b00      	cmp	r3, #0
 800d052:	d11f      	bne.n	800d094 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	f107 0308 	add.w	r3, r7, #8
 800d05a:	4611      	mov	r1, r2
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fe ff5b 	bl	800bf18 <follow_path>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d068:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d111      	bne.n	800d094 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d074:	b25b      	sxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	da03      	bge.n	800d082 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d07a:	2306      	movs	r3, #6
 800d07c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d080:	e008      	b.n	800d094 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <f_stat+0x66>
 800d088:	f107 0308 	add.w	r3, r7, #8
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe fcac 	bl	800b9ec <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3740      	adds	r7, #64	; 0x40
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b092      	sub	sp, #72	; 0x48
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d0ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d0b0:	f107 030c 	add.w	r3, r7, #12
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff f83a 	bl	800c130 <find_volume>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d0c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f040 8099 	bne.w	800d1fe <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	695a      	ldr	r2, [r3, #20]
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	3b02      	subs	r3, #2
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d804      	bhi.n	800d0ea <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	695a      	ldr	r2, [r3, #20]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	e089      	b.n	800d1fe <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d128      	bne.n	800d148 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d0fe:	f107 0314 	add.w	r3, r7, #20
 800d102:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d104:	4618      	mov	r0, r3
 800d106:	f7fd fb9a 	bl	800a83e <get_fat>
 800d10a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d112:	d103      	bne.n	800d11c <f_getfree+0x7c>
 800d114:	2301      	movs	r3, #1
 800d116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d11a:	e063      	b.n	800d1e4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d103      	bne.n	800d12a <f_getfree+0x8a>
 800d122:	2302      	movs	r3, #2
 800d124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d128:	e05c      	b.n	800d1e4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <f_getfree+0x96>
 800d130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d132:	3301      	adds	r3, #1
 800d134:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d138:	3301      	adds	r3, #1
 800d13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d142:	429a      	cmp	r2, r3
 800d144:	d3db      	bcc.n	800d0fe <f_getfree+0x5e>
 800d146:	e04d      	b.n	800d1e4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d152:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d154:	2300      	movs	r3, #0
 800d156:	637b      	str	r3, [r7, #52]	; 0x34
 800d158:	2300      	movs	r3, #0
 800d15a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d113      	bne.n	800d18a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	63ba      	str	r2, [r7, #56]	; 0x38
 800d16a:	4619      	mov	r1, r3
 800d16c:	f7fd faac 	bl	800a6c8 <move_window>
 800d170:	4603      	mov	r3, r0
 800d172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d176:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d131      	bne.n	800d1e2 <f_getfree+0x142>
							p = fs->win;
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	3334      	adds	r3, #52	; 0x34
 800d182:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d184:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d188:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d10f      	bne.n	800d1b2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d194:	f7fc ffe8 	bl	800a168 <ld_word>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d102      	bne.n	800d1a4 <f_getfree+0x104>
 800d19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a6:	3302      	adds	r3, #2
 800d1a8:	633b      	str	r3, [r7, #48]	; 0x30
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ac:	3b02      	subs	r3, #2
 800d1ae:	637b      	str	r3, [r7, #52]	; 0x34
 800d1b0:	e010      	b.n	800d1d4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d1b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1b4:	f7fc fff0 	bl	800a198 <ld_dword>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d102      	bne.n	800d1c8 <f_getfree+0x128>
 800d1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	633b      	str	r3, [r7, #48]	; 0x30
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d0:	3b04      	subs	r3, #4
 800d1d2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1bd      	bne.n	800d15c <f_getfree+0xbc>
 800d1e0:	e000      	b.n	800d1e4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d1e2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1e8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1ee:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	791a      	ldrb	r2, [r3, #4]
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	f042 0201 	orr.w	r2, r2, #1
 800d1fa:	b2d2      	uxtb	r2, r2
 800d1fc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d1fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d202:	4618      	mov	r0, r3
 800d204:	3748      	adds	r7, #72	; 0x48
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
	...

0800d20c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b087      	sub	sp, #28
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4613      	mov	r3, r2
 800d218:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d21a:	2301      	movs	r3, #1
 800d21c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d21e:	2300      	movs	r3, #0
 800d220:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d222:	4b1f      	ldr	r3, [pc, #124]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d224:	7a5b      	ldrb	r3, [r3, #9]
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d131      	bne.n	800d290 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d22c:	4b1c      	ldr	r3, [pc, #112]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d22e:	7a5b      	ldrb	r3, [r3, #9]
 800d230:	b2db      	uxtb	r3, r3
 800d232:	461a      	mov	r2, r3
 800d234:	4b1a      	ldr	r3, [pc, #104]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d236:	2100      	movs	r1, #0
 800d238:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d23a:	4b19      	ldr	r3, [pc, #100]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d23c:	7a5b      	ldrb	r3, [r3, #9]
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	4a17      	ldr	r2, [pc, #92]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d24a:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d24c:	7a5b      	ldrb	r3, [r3, #9]
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	461a      	mov	r2, r3
 800d252:	4b13      	ldr	r3, [pc, #76]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d254:	4413      	add	r3, r2
 800d256:	79fa      	ldrb	r2, [r7, #7]
 800d258:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d25a:	4b11      	ldr	r3, [pc, #68]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d25c:	7a5b      	ldrb	r3, [r3, #9]
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	b2d1      	uxtb	r1, r2
 800d264:	4a0e      	ldr	r2, [pc, #56]	; (800d2a0 <FATFS_LinkDriverEx+0x94>)
 800d266:	7251      	strb	r1, [r2, #9]
 800d268:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d26a:	7dbb      	ldrb	r3, [r7, #22]
 800d26c:	3330      	adds	r3, #48	; 0x30
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	3301      	adds	r3, #1
 800d278:	223a      	movs	r2, #58	; 0x3a
 800d27a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3302      	adds	r3, #2
 800d280:	222f      	movs	r2, #47	; 0x2f
 800d282:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	3303      	adds	r3, #3
 800d288:	2200      	movs	r2, #0
 800d28a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
}
 800d292:	4618      	mov	r0, r3
 800d294:	371c      	adds	r7, #28
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	200002e4 	.word	0x200002e4

0800d2a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff ffaa 	bl	800d20c <FATFS_LinkDriverEx>
 800d2b8:	4603      	mov	r3, r0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d2d0:	88fb      	ldrh	r3, [r7, #6]
 800d2d2:	2b7f      	cmp	r3, #127	; 0x7f
 800d2d4:	d802      	bhi.n	800d2dc <ff_convert+0x18>
		c = chr;
 800d2d6:	88fb      	ldrh	r3, [r7, #6]
 800d2d8:	81fb      	strh	r3, [r7, #14]
 800d2da:	e025      	b.n	800d328 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00b      	beq.n	800d2fa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d2e2:	88fb      	ldrh	r3, [r7, #6]
 800d2e4:	2bff      	cmp	r3, #255	; 0xff
 800d2e6:	d805      	bhi.n	800d2f4 <ff_convert+0x30>
 800d2e8:	88fb      	ldrh	r3, [r7, #6]
 800d2ea:	3b80      	subs	r3, #128	; 0x80
 800d2ec:	4a12      	ldr	r2, [pc, #72]	; (800d338 <ff_convert+0x74>)
 800d2ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2f2:	e000      	b.n	800d2f6 <ff_convert+0x32>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	81fb      	strh	r3, [r7, #14]
 800d2f8:	e016      	b.n	800d328 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	81fb      	strh	r3, [r7, #14]
 800d2fe:	e009      	b.n	800d314 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d300:	89fb      	ldrh	r3, [r7, #14]
 800d302:	4a0d      	ldr	r2, [pc, #52]	; (800d338 <ff_convert+0x74>)
 800d304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d308:	88fa      	ldrh	r2, [r7, #6]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d006      	beq.n	800d31c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d30e:	89fb      	ldrh	r3, [r7, #14]
 800d310:	3301      	adds	r3, #1
 800d312:	81fb      	strh	r3, [r7, #14]
 800d314:	89fb      	ldrh	r3, [r7, #14]
 800d316:	2b7f      	cmp	r3, #127	; 0x7f
 800d318:	d9f2      	bls.n	800d300 <ff_convert+0x3c>
 800d31a:	e000      	b.n	800d31e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d31c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d31e:	89fb      	ldrh	r3, [r7, #14]
 800d320:	3380      	adds	r3, #128	; 0x80
 800d322:	b29b      	uxth	r3, r3
 800d324:	b2db      	uxtb	r3, r3
 800d326:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d328:	89fb      	ldrh	r3, [r7, #14]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	0800ec14 	.word	0x0800ec14

0800d33c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d346:	88fb      	ldrh	r3, [r7, #6]
 800d348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d34c:	d201      	bcs.n	800d352 <ff_wtoupper+0x16>
 800d34e:	4b3e      	ldr	r3, [pc, #248]	; (800d448 <ff_wtoupper+0x10c>)
 800d350:	e000      	b.n	800d354 <ff_wtoupper+0x18>
 800d352:	4b3e      	ldr	r3, [pc, #248]	; (800d44c <ff_wtoupper+0x110>)
 800d354:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	1c9a      	adds	r2, r3, #2
 800d35a:	617a      	str	r2, [r7, #20]
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d360:	8a7b      	ldrh	r3, [r7, #18]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d068      	beq.n	800d438 <ff_wtoupper+0xfc>
 800d366:	88fa      	ldrh	r2, [r7, #6]
 800d368:	8a7b      	ldrh	r3, [r7, #18]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d364      	bcc.n	800d438 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	1c9a      	adds	r2, r3, #2
 800d372:	617a      	str	r2, [r7, #20]
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	823b      	strh	r3, [r7, #16]
 800d378:	8a3b      	ldrh	r3, [r7, #16]
 800d37a:	0a1b      	lsrs	r3, r3, #8
 800d37c:	81fb      	strh	r3, [r7, #14]
 800d37e:	8a3b      	ldrh	r3, [r7, #16]
 800d380:	b2db      	uxtb	r3, r3
 800d382:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d384:	88fa      	ldrh	r2, [r7, #6]
 800d386:	8a79      	ldrh	r1, [r7, #18]
 800d388:	8a3b      	ldrh	r3, [r7, #16]
 800d38a:	440b      	add	r3, r1
 800d38c:	429a      	cmp	r2, r3
 800d38e:	da49      	bge.n	800d424 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d390:	89fb      	ldrh	r3, [r7, #14]
 800d392:	2b08      	cmp	r3, #8
 800d394:	d84f      	bhi.n	800d436 <ff_wtoupper+0xfa>
 800d396:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <ff_wtoupper+0x60>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d3c1 	.word	0x0800d3c1
 800d3a0:	0800d3d3 	.word	0x0800d3d3
 800d3a4:	0800d3e9 	.word	0x0800d3e9
 800d3a8:	0800d3f1 	.word	0x0800d3f1
 800d3ac:	0800d3f9 	.word	0x0800d3f9
 800d3b0:	0800d401 	.word	0x0800d401
 800d3b4:	0800d409 	.word	0x0800d409
 800d3b8:	0800d411 	.word	0x0800d411
 800d3bc:	0800d419 	.word	0x0800d419
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d3c0:	88fa      	ldrh	r2, [r7, #6]
 800d3c2:	8a7b      	ldrh	r3, [r7, #18]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	697a      	ldr	r2, [r7, #20]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	881b      	ldrh	r3, [r3, #0]
 800d3ce:	80fb      	strh	r3, [r7, #6]
 800d3d0:	e027      	b.n	800d422 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d3d2:	88fa      	ldrh	r2, [r7, #6]
 800d3d4:	8a7b      	ldrh	r3, [r7, #18]
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	88fa      	ldrh	r2, [r7, #6]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	80fb      	strh	r3, [r7, #6]
 800d3e6:	e01c      	b.n	800d422 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d3e8:	88fb      	ldrh	r3, [r7, #6]
 800d3ea:	3b10      	subs	r3, #16
 800d3ec:	80fb      	strh	r3, [r7, #6]
 800d3ee:	e018      	b.n	800d422 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d3f0:	88fb      	ldrh	r3, [r7, #6]
 800d3f2:	3b20      	subs	r3, #32
 800d3f4:	80fb      	strh	r3, [r7, #6]
 800d3f6:	e014      	b.n	800d422 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	3b30      	subs	r3, #48	; 0x30
 800d3fc:	80fb      	strh	r3, [r7, #6]
 800d3fe:	e010      	b.n	800d422 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d400:	88fb      	ldrh	r3, [r7, #6]
 800d402:	3b1a      	subs	r3, #26
 800d404:	80fb      	strh	r3, [r7, #6]
 800d406:	e00c      	b.n	800d422 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d408:	88fb      	ldrh	r3, [r7, #6]
 800d40a:	3308      	adds	r3, #8
 800d40c:	80fb      	strh	r3, [r7, #6]
 800d40e:	e008      	b.n	800d422 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d410:	88fb      	ldrh	r3, [r7, #6]
 800d412:	3b50      	subs	r3, #80	; 0x50
 800d414:	80fb      	strh	r3, [r7, #6]
 800d416:	e004      	b.n	800d422 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d418:	88fb      	ldrh	r3, [r7, #6]
 800d41a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d41e:	80fb      	strh	r3, [r7, #6]
 800d420:	bf00      	nop
			}
			break;
 800d422:	e008      	b.n	800d436 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d424:	89fb      	ldrh	r3, [r7, #14]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d195      	bne.n	800d356 <ff_wtoupper+0x1a>
 800d42a:	8a3b      	ldrh	r3, [r7, #16]
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	4413      	add	r3, r2
 800d432:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d434:	e78f      	b.n	800d356 <ff_wtoupper+0x1a>
			break;
 800d436:	bf00      	nop
	}

	return chr;
 800d438:	88fb      	ldrh	r3, [r7, #6]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	371c      	adds	r7, #28
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	0800ed14 	.word	0x0800ed14
 800d44c:	0800ef08 	.word	0x0800ef08

0800d450 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d454:	2201      	movs	r2, #1
 800d456:	490e      	ldr	r1, [pc, #56]	; (800d490 <MX_USB_HOST_Init+0x40>)
 800d458:	480e      	ldr	r0, [pc, #56]	; (800d494 <MX_USB_HOST_Init+0x44>)
 800d45a:	f7fb fa8f 	bl	800897c <USBH_Init>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d464:	f7f4 f894 	bl	8001590 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d468:	490b      	ldr	r1, [pc, #44]	; (800d498 <MX_USB_HOST_Init+0x48>)
 800d46a:	480a      	ldr	r0, [pc, #40]	; (800d494 <MX_USB_HOST_Init+0x44>)
 800d46c:	f7fb fb14 	bl	8008a98 <USBH_RegisterClass>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d476:	f7f4 f88b 	bl	8001590 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d47a:	4806      	ldr	r0, [pc, #24]	; (800d494 <MX_USB_HOST_Init+0x44>)
 800d47c:	f7fb fb98 	bl	8008bb0 <USBH_Start>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d486:	f7f4 f883 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d48a:	bf00      	nop
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	0800d4b1 	.word	0x0800d4b1
 800d494:	20000978 	.word	0x20000978
 800d498:	2000000c 	.word	0x2000000c

0800d49c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d4a0:	4802      	ldr	r0, [pc, #8]	; (800d4ac <MX_USB_HOST_Process+0x10>)
 800d4a2:	f7fb fb95 	bl	8008bd0 <USBH_Process>
}
 800d4a6:	bf00      	nop
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20000978 	.word	0x20000978

0800d4b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af02      	add	r7, sp, #8
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	f200 80f0 	bhi.w	800d6a6 <USBH_UserProcess+0x1f6>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <USBH_UserProcess+0x1c>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d6a7 	.word	0x0800d6a7
 800d4d0:	0800d4e9 	.word	0x0800d4e9
 800d4d4:	0800d6a7 	.word	0x0800d6a7
 800d4d8:	0800d69f 	.word	0x0800d69f
 800d4dc:	0800d4e1 	.word	0x0800d4e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d4e0:	4b73      	ldr	r3, [pc, #460]	; (800d6b0 <USBH_UserProcess+0x200>)
 800d4e2:	2203      	movs	r2, #3
 800d4e4:	701a      	strb	r2, [r3, #0]
  break;
 800d4e6:	e0df      	b.n	800d6a8 <USBH_UserProcess+0x1f8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d4e8:	4b71      	ldr	r3, [pc, #452]	; (800d6b0 <USBH_UserProcess+0x200>)
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	701a      	strb	r2, [r3, #0]


  Mount_USB();
 800d4ee:	f7f3 fb6f 	bl	8000bd0 <Mount_USB>
  Check_USB_Details();
 800d4f2:	f7f3 fe8d 	bl	8001210 <Check_USB_Details>
  Scan_USB("/");
 800d4f6:	486f      	ldr	r0, [pc, #444]	; (800d6b4 <USBH_UserProcess+0x204>)
 800d4f8:	f7f3 fbac 	bl	8000c54 <Scan_USB>
  Create_File("/TempertureToday.txt");
 800d4fc:	486e      	ldr	r0, [pc, #440]	; (800d6b8 <USBH_UserProcess+0x208>)
 800d4fe:	f7f3 fd13 	bl	8000f28 <Create_File>
  Write_File("/TempertureToday.txt", "It was warm today! YAY!");
 800d502:	496e      	ldr	r1, [pc, #440]	; (800d6bc <USBH_UserProcess+0x20c>)
 800d504:	486c      	ldr	r0, [pc, #432]	; (800d6b8 <USBH_UserProcess+0x208>)
 800d506:	f7f3 fc4b 	bl	8000da0 <Write_File>

  for (int i = 0; i < 6; i++)
 800d50a:	2300      	movs	r3, #0
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e0bf      	b.n	800d690 <USBH_UserProcess+0x1e0>
  {

  HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &sensor_on, 2, 1000);
 800d510:	4b6b      	ldr	r3, [pc, #428]	; (800d6c0 <USBH_UserProcess+0x210>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	b299      	uxth	r1, r3
 800d516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	2302      	movs	r3, #2
 800d51e:	4a69      	ldr	r2, [pc, #420]	; (800d6c4 <USBH_UserProcess+0x214>)
 800d520:	4869      	ldr	r0, [pc, #420]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d522:	f7f6 f93f 	bl	80037a4 <HAL_I2C_Master_Transmit>
 	  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &data, 1, 1000);
 800d526:	4b69      	ldr	r3, [pc, #420]	; (800d6cc <USBH_UserProcess+0x21c>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	b299      	uxth	r1, r3
 800d52c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	2301      	movs	r3, #1
 800d534:	4a66      	ldr	r2, [pc, #408]	; (800d6d0 <USBH_UserProcess+0x220>)
 800d536:	4864      	ldr	r0, [pc, #400]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d538:	f7f6 fa28 	bl	800398c <HAL_I2C_Master_Receive>
 	  HAL_Delay(1000);
 800d53c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d540:	f7f4 fa2c 	bl	800199c <HAL_Delay>
 	  //sprintf(msg, "%d", data);
 	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 800d544:	4863      	ldr	r0, [pc, #396]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d546:	f7f2 fe4d 	bl	80001e4 <strlen>
 800d54a:	4603      	mov	r3, r0
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d552:	4960      	ldr	r1, [pc, #384]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d554:	4860      	ldr	r0, [pc, #384]	; (800d6d8 <USBH_UserProcess+0x228>)
 800d556:	f7f8 f9bb 	bl	80058d0 <HAL_UART_Transmit>

 	 HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &sensor_on, 2, 1000);
 800d55a:	4b59      	ldr	r3, [pc, #356]	; (800d6c0 <USBH_UserProcess+0x210>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	b299      	uxth	r1, r3
 800d560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	2302      	movs	r3, #2
 800d568:	4a56      	ldr	r2, [pc, #344]	; (800d6c4 <USBH_UserProcess+0x214>)
 800d56a:	4857      	ldr	r0, [pc, #348]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d56c:	f7f6 f91a 	bl	80037a4 <HAL_I2C_Master_Transmit>
 		  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &data, 1, 1000);
 800d570:	4b56      	ldr	r3, [pc, #344]	; (800d6cc <USBH_UserProcess+0x21c>)
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	b299      	uxth	r1, r3
 800d576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2301      	movs	r3, #1
 800d57e:	4a54      	ldr	r2, [pc, #336]	; (800d6d0 <USBH_UserProcess+0x220>)
 800d580:	4851      	ldr	r0, [pc, #324]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d582:	f7f6 fa03 	bl	800398c <HAL_I2C_Master_Receive>
 		  HAL_Delay(1000);
 800d586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d58a:	f7f4 fa07 	bl	800199c <HAL_Delay>
 		  //sprintf(msg, "%d", data);
 		  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 800d58e:	4851      	ldr	r0, [pc, #324]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d590:	f7f2 fe28 	bl	80001e4 <strlen>
 800d594:	4603      	mov	r3, r0
 800d596:	b29a      	uxth	r2, r3
 800d598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d59c:	494d      	ldr	r1, [pc, #308]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d59e:	484e      	ldr	r0, [pc, #312]	; (800d6d8 <USBH_UserProcess+0x228>)
 800d5a0:	f7f8 f996 	bl	80058d0 <HAL_UART_Transmit>



 		 HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &tempout_lo, 1, 1000);
 800d5a4:	4b46      	ldr	r3, [pc, #280]	; (800d6c0 <USBH_UserProcess+0x210>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	b299      	uxth	r1, r3
 800d5aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	4a4a      	ldr	r2, [pc, #296]	; (800d6dc <USBH_UserProcess+0x22c>)
 800d5b4:	4844      	ldr	r0, [pc, #272]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d5b6:	f7f6 f8f5 	bl	80037a4 <HAL_I2C_Master_Transmit>
 		 	  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &temp_lo, 1, 1000);
 800d5ba:	4b44      	ldr	r3, [pc, #272]	; (800d6cc <USBH_UserProcess+0x21c>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	b299      	uxth	r1, r3
 800d5c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	4a45      	ldr	r2, [pc, #276]	; (800d6e0 <USBH_UserProcess+0x230>)
 800d5ca:	483f      	ldr	r0, [pc, #252]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d5cc:	f7f6 f9de 	bl	800398c <HAL_I2C_Master_Receive>

 		 	  HAL_I2C_Master_Transmit(&hi2c1, HT221_write, &tempout_hi, 1, 1000);
 800d5d0:	4b3b      	ldr	r3, [pc, #236]	; (800d6c0 <USBH_UserProcess+0x210>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	b299      	uxth	r1, r3
 800d5d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	2301      	movs	r3, #1
 800d5de:	4a41      	ldr	r2, [pc, #260]	; (800d6e4 <USBH_UserProcess+0x234>)
 800d5e0:	4839      	ldr	r0, [pc, #228]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d5e2:	f7f6 f8df 	bl	80037a4 <HAL_I2C_Master_Transmit>
 		 	  HAL_I2C_Master_Receive(&hi2c1, HT221_read, &temp_hi, 1, 1000);
 800d5e6:	4b39      	ldr	r3, [pc, #228]	; (800d6cc <USBH_UserProcess+0x21c>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	b299      	uxth	r1, r3
 800d5ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	4a3c      	ldr	r2, [pc, #240]	; (800d6e8 <USBH_UserProcess+0x238>)
 800d5f6:	4834      	ldr	r0, [pc, #208]	; (800d6c8 <USBH_UserProcess+0x218>)
 800d5f8:	f7f6 f9c8 	bl	800398c <HAL_I2C_Master_Receive>

 		 	  HAL_Delay(1000);
 800d5fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d600:	f7f4 f9cc 	bl	800199c <HAL_Delay>
 		 	  //sprintf(msg, "%d \n\r", temp_hi);
 		 	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 800d604:	4833      	ldr	r0, [pc, #204]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d606:	f7f2 fded 	bl	80001e4 <strlen>
 800d60a:	4603      	mov	r3, r0
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d612:	4930      	ldr	r1, [pc, #192]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d614:	4830      	ldr	r0, [pc, #192]	; (800d6d8 <USBH_UserProcess+0x228>)
 800d616:	f7f8 f95b 	bl	80058d0 <HAL_UART_Transmit>
 		 	  //sprintf(msg, "%d \n\r", temp_lo);
 		 	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 800d61a:	482e      	ldr	r0, [pc, #184]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d61c:	f7f2 fde2 	bl	80001e4 <strlen>
 800d620:	4603      	mov	r3, r0
 800d622:	b29a      	uxth	r2, r3
 800d624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d628:	492a      	ldr	r1, [pc, #168]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d62a:	482b      	ldr	r0, [pc, #172]	; (800d6d8 <USBH_UserProcess+0x228>)
 800d62c:	f7f8 f950 	bl	80058d0 <HAL_UART_Transmit>

 		 	  temp = (temp_hi*256+temp_lo);
 800d630:	4b2d      	ldr	r3, [pc, #180]	; (800d6e8 <USBH_UserProcess+0x238>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	b29b      	uxth	r3, r3
 800d636:	021b      	lsls	r3, r3, #8
 800d638:	b29a      	uxth	r2, r3
 800d63a:	4b29      	ldr	r3, [pc, #164]	; (800d6e0 <USBH_UserProcess+0x230>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	b29b      	uxth	r3, r3
 800d640:	4413      	add	r3, r2
 800d642:	b29a      	uxth	r2, r3
 800d644:	4b29      	ldr	r3, [pc, #164]	; (800d6ec <USBH_UserProcess+0x23c>)
 800d646:	801a      	strh	r2, [r3, #0]
 		 	  temp = (20+temp/100);
 800d648:	4b28      	ldr	r3, [pc, #160]	; (800d6ec <USBH_UserProcess+0x23c>)
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	4a28      	ldr	r2, [pc, #160]	; (800d6f0 <USBH_UserProcess+0x240>)
 800d64e:	fba2 2303 	umull	r2, r3, r2, r3
 800d652:	095b      	lsrs	r3, r3, #5
 800d654:	b29b      	uxth	r3, r3
 800d656:	3314      	adds	r3, #20
 800d658:	b29a      	uxth	r2, r3
 800d65a:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <USBH_UserProcess+0x23c>)
 800d65c:	801a      	strh	r2, [r3, #0]
 		 	  sprintf(msg, "The temperture is %d \n\r", temp);
 800d65e:	4b23      	ldr	r3, [pc, #140]	; (800d6ec <USBH_UserProcess+0x23c>)
 800d660:	881b      	ldrh	r3, [r3, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	4923      	ldr	r1, [pc, #140]	; (800d6f4 <USBH_UserProcess+0x244>)
 800d666:	481b      	ldr	r0, [pc, #108]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d668:	f000 fc34 	bl	800ded4 <siprintf>
 		 	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), 1000);
 800d66c:	4819      	ldr	r0, [pc, #100]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d66e:	f7f2 fdb9 	bl	80001e4 <strlen>
 800d672:	4603      	mov	r3, r0
 800d674:	b29a      	uxth	r2, r3
 800d676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d67a:	4916      	ldr	r1, [pc, #88]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d67c:	4816      	ldr	r0, [pc, #88]	; (800d6d8 <USBH_UserProcess+0x228>)
 800d67e:	f7f8 f927 	bl	80058d0 <HAL_UART_Transmit>
 		 	 Update_File("/TempertureToday.txt", msg);
 800d682:	4914      	ldr	r1, [pc, #80]	; (800d6d4 <USBH_UserProcess+0x224>)
 800d684:	480c      	ldr	r0, [pc, #48]	; (800d6b8 <USBH_UserProcess+0x208>)
 800d686:	f7f3 fceb 	bl	8001060 <Update_File>
  for (int i = 0; i < 6; i++)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3301      	adds	r3, #1
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2b05      	cmp	r3, #5
 800d694:	f77f af3c 	ble.w	800d510 <USBH_UserProcess+0x60>

  }

  Unmount_USB();
 800d698:	f7f3 fabc 	bl	8000c14 <Unmount_USB>

  break;
 800d69c:	e004      	b.n	800d6a8 <USBH_UserProcess+0x1f8>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d69e:	4b04      	ldr	r3, [pc, #16]	; (800d6b0 <USBH_UserProcess+0x200>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	701a      	strb	r2, [r3, #0]
  break;
 800d6a4:	e000      	b.n	800d6a8 <USBH_UserProcess+0x1f8>

  default:
  break;
 800d6a6:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d6a8:	bf00      	nop
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	200002f0 	.word	0x200002f0
 800d6b4:	0800eadc 	.word	0x0800eadc
 800d6b8:	0800eae0 	.word	0x0800eae0
 800d6bc:	0800eaf8 	.word	0x0800eaf8
 800d6c0:	2000002d 	.word	0x2000002d
 800d6c4:	20000034 	.word	0x20000034
 800d6c8:	20000430 	.word	0x20000430
 800d6cc:	2000002c 	.word	0x2000002c
 800d6d0:	20000030 	.word	0x20000030
 800d6d4:	20000d50 	.word	0x20000d50
 800d6d8:	20000484 	.word	0x20000484
 800d6dc:	2000002e 	.word	0x2000002e
 800d6e0:	20000db7 	.word	0x20000db7
 800d6e4:	2000002f 	.word	0x2000002f
 800d6e8:	20000db6 	.word	0x20000db6
 800d6ec:	20000db4 	.word	0x20000db4
 800d6f0:	51eb851f 	.word	0x51eb851f
 800d6f4:	0800eb10 	.word	0x0800eb10

0800d6f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b0ac      	sub	sp, #176	; 0xb0
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d700:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d704:	2200      	movs	r2, #0
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	605a      	str	r2, [r3, #4]
 800d70a:	609a      	str	r2, [r3, #8]
 800d70c:	60da      	str	r2, [r3, #12]
 800d70e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d710:	f107 0314 	add.w	r3, r7, #20
 800d714:	2288      	movs	r2, #136	; 0x88
 800d716:	2100      	movs	r1, #0
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 fb19 	bl	800dd50 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d726:	d173      	bne.n	800d810 <HAL_HCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d72c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800d72e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800d736:	2301      	movs	r3, #1
 800d738:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800d73a:	2301      	movs	r3, #1
 800d73c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800d73e:	2318      	movs	r3, #24
 800d740:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800d742:	2307      	movs	r3, #7
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800d746:	2302      	movs	r3, #2
 800d748:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800d74a:	2302      	movs	r3, #2
 800d74c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800d74e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d752:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d754:	f107 0314 	add.w	r3, r7, #20
 800d758:	4618      	mov	r0, r3
 800d75a:	f7f7 fb9f 	bl	8004e9c <HAL_RCCEx_PeriphCLKConfig>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 800d764:	f7f3 ff14 	bl	8001590 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d768:	4b2b      	ldr	r3, [pc, #172]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d76a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d76c:	4a2a      	ldr	r2, [pc, #168]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d76e:	f043 0301 	orr.w	r3, r3, #1
 800d772:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d774:	4b28      	ldr	r3, [pc, #160]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	613b      	str	r3, [r7, #16]
 800d77e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d788:	2302      	movs	r3, #2
 800d78a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d78e:	2300      	movs	r3, #0
 800d790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d794:	2303      	movs	r3, #3
 800d796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d79a:	230a      	movs	r3, #10
 800d79c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d7aa:	f7f4 fa2d 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7ae:	4b1a      	ldr	r3, [pc, #104]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b2:	4a19      	ldr	r2, [pc, #100]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7ba:	4b17      	ldr	r3, [pc, #92]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d7c6:	4b14      	ldr	r3, [pc, #80]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d114      	bne.n	800d7fc <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d7d2:	4b11      	ldr	r3, [pc, #68]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7d6:	4a10      	ldr	r2, [pc, #64]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7dc:	6593      	str	r3, [r2, #88]	; 0x58
 800d7de:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7e6:	60bb      	str	r3, [r7, #8]
 800d7e8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d7ea:	f7f6 fd49 	bl	8004280 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d7ee:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7f2:	4a09      	ldr	r2, [pc, #36]	; (800d818 <HAL_HCD_MspInit+0x120>)
 800d7f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7f8:	6593      	str	r3, [r2, #88]	; 0x58
 800d7fa:	e001      	b.n	800d800 <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d7fc:	f7f6 fd40 	bl	8004280 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d800:	2200      	movs	r2, #0
 800d802:	2100      	movs	r1, #0
 800d804:	2043      	movs	r0, #67	; 0x43
 800d806:	f7f4 f9c8 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d80a:	2043      	movs	r0, #67	; 0x43
 800d80c:	f7f4 f9e1 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d810:	bf00      	nop
 800d812:	37b0      	adds	r7, #176	; 0xb0
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	40021000 	.word	0x40021000

0800d81c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fb fda3 	bl	8009376 <USBH_LL_IncTimer>
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d846:	4618      	mov	r0, r3
 800d848:	f7fb fddb 	bl	8009402 <USBH_LL_Connect>
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d862:	4618      	mov	r0, r3
 800d864:	f7fb fde4 	bl	8009430 <USBH_LL_Disconnect>
}
 800d868:	bf00      	nop
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	70fb      	strb	r3, [r7, #3]
 800d87c:	4613      	mov	r3, r2
 800d87e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fb fd95 	bl	80093ca <USBH_LL_PortEnabled>
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fb fd95 	bl	80093e6 <USBH_LL_PortDisabled>
}
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d12a      	bne.n	800d92c <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d8d6:	4a18      	ldr	r2, [pc, #96]	; (800d938 <USBH_LL_Init+0x74>)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4a15      	ldr	r2, [pc, #84]	; (800d938 <USBH_LL_Init+0x74>)
 800d8e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d8e6:	4b14      	ldr	r3, [pc, #80]	; (800d938 <USBH_LL_Init+0x74>)
 800d8e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d8ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d8ee:	4b12      	ldr	r3, [pc, #72]	; (800d938 <USBH_LL_Init+0x74>)
 800d8f0:	2208      	movs	r2, #8
 800d8f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d8f4:	4b10      	ldr	r3, [pc, #64]	; (800d938 <USBH_LL_Init+0x74>)
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d8fa:	4b0f      	ldr	r3, [pc, #60]	; (800d938 <USBH_LL_Init+0x74>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d900:	4b0d      	ldr	r3, [pc, #52]	; (800d938 <USBH_LL_Init+0x74>)
 800d902:	2202      	movs	r2, #2
 800d904:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d906:	4b0c      	ldr	r3, [pc, #48]	; (800d938 <USBH_LL_Init+0x74>)
 800d908:	2200      	movs	r2, #0
 800d90a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d90c:	480a      	ldr	r0, [pc, #40]	; (800d938 <USBH_LL_Init+0x74>)
 800d90e:	f7f4 fb3d 	bl	8001f8c <HAL_HCD_Init>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d918:	f7f3 fe3a 	bl	8001590 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d91c:	4806      	ldr	r0, [pc, #24]	; (800d938 <USBH_LL_Init+0x74>)
 800d91e:	f7f4 ff1c 	bl	800275a <HAL_HCD_GetCurrentFrame>
 800d922:	4603      	mov	r3, r0
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7fb fd16 	bl	8009358 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20000db8 	.word	0x20000db8

0800d93c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d952:	4618      	mov	r0, r3
 800d954:	f7f4 fe8b 	bl	800266e <HAL_HCD_Start>
 800d958:	4603      	mov	r3, r0
 800d95a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 f982 	bl	800dc68 <USBH_Get_USB_Status>
 800d964:	4603      	mov	r3, r0
 800d966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d968:	7bbb      	ldrb	r3, [r7, #14]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d97a:	2300      	movs	r3, #0
 800d97c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f4 fe93 	bl	80026b4 <HAL_HCD_Stop>
 800d98e:	4603      	mov	r3, r0
 800d990:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d992:	7bfb      	ldrb	r3, [r7, #15]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f967 	bl	800dc68 <USBH_Get_USB_Status>
 800d99a:	4603      	mov	r3, r0
 800d99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f4 fedb 	bl	8002776 <HAL_HCD_GetCurrentSpeed>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d00c      	beq.n	800d9e0 <USBH_LL_GetSpeed+0x38>
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d80d      	bhi.n	800d9e6 <USBH_LL_GetSpeed+0x3e>
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <USBH_LL_GetSpeed+0x2c>
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d003      	beq.n	800d9da <USBH_LL_GetSpeed+0x32>
 800d9d2:	e008      	b.n	800d9e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d8:	e008      	b.n	800d9ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d9de:	e005      	b.n	800d9ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d9e0:	2302      	movs	r3, #2
 800d9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9e4:	e002      	b.n	800d9ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ea:	bf00      	nop
  }
  return  speed;
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7f4 fe6e 	bl	80026ee <HAL_HCD_ResetPort>
 800da12:	4603      	mov	r3, r0
 800da14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da16:	7bfb      	ldrb	r3, [r7, #15]
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 f925 	bl	800dc68 <USBH_Get_USB_Status>
 800da1e:	4603      	mov	r3, r0
 800da20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da22:	7bbb      	ldrb	r3, [r7, #14]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da3e:	78fa      	ldrb	r2, [r7, #3]
 800da40:	4611      	mov	r1, r2
 800da42:	4618      	mov	r0, r3
 800da44:	f7f4 fe75 	bl	8002732 <HAL_HCD_HC_GetXferCount>
 800da48:	4603      	mov	r3, r0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800da52:	b590      	push	{r4, r7, lr}
 800da54:	b089      	sub	sp, #36	; 0x24
 800da56:	af04      	add	r7, sp, #16
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	4608      	mov	r0, r1
 800da5c:	4611      	mov	r1, r2
 800da5e:	461a      	mov	r2, r3
 800da60:	4603      	mov	r3, r0
 800da62:	70fb      	strb	r3, [r7, #3]
 800da64:	460b      	mov	r3, r1
 800da66:	70bb      	strb	r3, [r7, #2]
 800da68:	4613      	mov	r3, r2
 800da6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800da7a:	787c      	ldrb	r4, [r7, #1]
 800da7c:	78ba      	ldrb	r2, [r7, #2]
 800da7e:	78f9      	ldrb	r1, [r7, #3]
 800da80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da82:	9302      	str	r3, [sp, #8]
 800da84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	4623      	mov	r3, r4
 800da92:	f7f4 fadd 	bl	8002050 <HAL_HCD_HC_Init>
 800da96:	4603      	mov	r3, r0
 800da98:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 f8e3 	bl	800dc68 <USBH_Get_USB_Status>
 800daa2:	4603      	mov	r3, r0
 800daa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3714      	adds	r7, #20
 800daac:	46bd      	mov	sp, r7
 800daae:	bd90      	pop	{r4, r7, pc}

0800dab0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800daca:	78fa      	ldrb	r2, [r7, #3]
 800dacc:	4611      	mov	r1, r2
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f4 fb4d 	bl	800216e <HAL_HCD_HC_Halt>
 800dad4:	4603      	mov	r3, r0
 800dad6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 f8c4 	bl	800dc68 <USBH_Get_USB_Status>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800daee:	b590      	push	{r4, r7, lr}
 800daf0:	b089      	sub	sp, #36	; 0x24
 800daf2:	af04      	add	r7, sp, #16
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	4608      	mov	r0, r1
 800daf8:	4611      	mov	r1, r2
 800dafa:	461a      	mov	r2, r3
 800dafc:	4603      	mov	r3, r0
 800dafe:	70fb      	strb	r3, [r7, #3]
 800db00:	460b      	mov	r3, r1
 800db02:	70bb      	strb	r3, [r7, #2]
 800db04:	4613      	mov	r3, r2
 800db06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db08:	2300      	movs	r3, #0
 800db0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db16:	787c      	ldrb	r4, [r7, #1]
 800db18:	78ba      	ldrb	r2, [r7, #2]
 800db1a:	78f9      	ldrb	r1, [r7, #3]
 800db1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db20:	9303      	str	r3, [sp, #12]
 800db22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db24:	9302      	str	r3, [sp, #8]
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	9301      	str	r3, [sp, #4]
 800db2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	4623      	mov	r3, r4
 800db32:	f7f4 fb3f 	bl	80021b4 <HAL_HCD_HC_SubmitRequest>
 800db36:	4603      	mov	r3, r0
 800db38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 f893 	bl	800dc68 <USBH_Get_USB_Status>
 800db42:	4603      	mov	r3, r0
 800db44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db46:	7bbb      	ldrb	r3, [r7, #14]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd90      	pop	{r4, r7, pc}

0800db50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db62:	78fa      	ldrb	r2, [r7, #3]
 800db64:	4611      	mov	r1, r2
 800db66:	4618      	mov	r0, r3
 800db68:	f7f4 fdcf 	bl	800270a <HAL_HCD_HC_GetURBState>
 800db6c:	4603      	mov	r3, r0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b082      	sub	sp, #8
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800db82:	20c8      	movs	r0, #200	; 0xc8
 800db84:	f7f3 ff0a 	bl	800199c <HAL_Delay>
  return USBH_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800db92:	b480      	push	{r7}
 800db94:	b085      	sub	sp, #20
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
 800db9e:	4613      	mov	r3, r2
 800dba0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dba8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dbaa:	78fb      	ldrb	r3, [r7, #3]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	212c      	movs	r1, #44	; 0x2c
 800dbb0:	fb01 f303 	mul.w	r3, r1, r3
 800dbb4:	4413      	add	r3, r2
 800dbb6:	333b      	adds	r3, #59	; 0x3b
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d009      	beq.n	800dbd2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dbbe:	78fb      	ldrb	r3, [r7, #3]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	212c      	movs	r1, #44	; 0x2c
 800dbc4:	fb01 f303 	mul.w	r3, r1, r3
 800dbc8:	4413      	add	r3, r2
 800dbca:	3354      	adds	r3, #84	; 0x54
 800dbcc:	78ba      	ldrb	r2, [r7, #2]
 800dbce:	701a      	strb	r2, [r3, #0]
 800dbd0:	e008      	b.n	800dbe4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dbd2:	78fb      	ldrb	r3, [r7, #3]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	212c      	movs	r1, #44	; 0x2c
 800dbd8:	fb01 f303 	mul.w	r3, r1, r3
 800dbdc:	4413      	add	r3, r2
 800dbde:	3355      	adds	r3, #85	; 0x55
 800dbe0:	78ba      	ldrb	r2, [r7, #2]
 800dbe2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dbf2:	b480      	push	{r7}
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc08:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800dc0a:	78fb      	ldrb	r3, [r7, #3]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	212c      	movs	r1, #44	; 0x2c
 800dc10:	fb01 f303 	mul.w	r3, r1, r3
 800dc14:	4413      	add	r3, r2
 800dc16:	333b      	adds	r3, #59	; 0x3b
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d009      	beq.n	800dc32 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800dc1e:	78fb      	ldrb	r3, [r7, #3]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	212c      	movs	r1, #44	; 0x2c
 800dc24:	fb01 f303 	mul.w	r3, r1, r3
 800dc28:	4413      	add	r3, r2
 800dc2a:	3354      	adds	r3, #84	; 0x54
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	73fb      	strb	r3, [r7, #15]
 800dc30:	e008      	b.n	800dc44 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800dc32:	78fb      	ldrb	r3, [r7, #3]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	212c      	movs	r1, #44	; 0x2c
 800dc38:	fb01 f303 	mul.w	r3, r1, r3
 800dc3c:	4413      	add	r3, r2
 800dc3e:	3355      	adds	r3, #85	; 0x55
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7f3 fe9e 	bl	800199c <HAL_Delay>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc72:	2300      	movs	r3, #0
 800dc74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d817      	bhi.n	800dcac <USBH_Get_USB_Status+0x44>
 800dc7c:	a201      	add	r2, pc, #4	; (adr r2, 800dc84 <USBH_Get_USB_Status+0x1c>)
 800dc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc82:	bf00      	nop
 800dc84:	0800dc95 	.word	0x0800dc95
 800dc88:	0800dc9b 	.word	0x0800dc9b
 800dc8c:	0800dca1 	.word	0x0800dca1
 800dc90:	0800dca7 	.word	0x0800dca7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dc94:	2300      	movs	r3, #0
 800dc96:	73fb      	strb	r3, [r7, #15]
    break;
 800dc98:	e00b      	b.n	800dcb2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dc9a:	2302      	movs	r3, #2
 800dc9c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc9e:	e008      	b.n	800dcb2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dca0:	2301      	movs	r3, #1
 800dca2:	73fb      	strb	r3, [r7, #15]
    break;
 800dca4:	e005      	b.n	800dcb2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dca6:	2302      	movs	r3, #2
 800dca8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcaa:	e002      	b.n	800dcb2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dcac:	2302      	movs	r3, #2
 800dcae:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb0:	bf00      	nop
  }
  return usb_status;
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <__errno>:
 800dcc0:	4b01      	ldr	r3, [pc, #4]	; (800dcc8 <__errno+0x8>)
 800dcc2:	6818      	ldr	r0, [r3, #0]
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	20000038 	.word	0x20000038

0800dccc <__libc_init_array>:
 800dccc:	b570      	push	{r4, r5, r6, lr}
 800dcce:	4d0d      	ldr	r5, [pc, #52]	; (800dd04 <__libc_init_array+0x38>)
 800dcd0:	4c0d      	ldr	r4, [pc, #52]	; (800dd08 <__libc_init_array+0x3c>)
 800dcd2:	1b64      	subs	r4, r4, r5
 800dcd4:	10a4      	asrs	r4, r4, #2
 800dcd6:	2600      	movs	r6, #0
 800dcd8:	42a6      	cmp	r6, r4
 800dcda:	d109      	bne.n	800dcf0 <__libc_init_array+0x24>
 800dcdc:	4d0b      	ldr	r5, [pc, #44]	; (800dd0c <__libc_init_array+0x40>)
 800dcde:	4c0c      	ldr	r4, [pc, #48]	; (800dd10 <__libc_init_array+0x44>)
 800dce0:	f000 fc5e 	bl	800e5a0 <_init>
 800dce4:	1b64      	subs	r4, r4, r5
 800dce6:	10a4      	asrs	r4, r4, #2
 800dce8:	2600      	movs	r6, #0
 800dcea:	42a6      	cmp	r6, r4
 800dcec:	d105      	bne.n	800dcfa <__libc_init_array+0x2e>
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
 800dcf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf4:	4798      	blx	r3
 800dcf6:	3601      	adds	r6, #1
 800dcf8:	e7ee      	b.n	800dcd8 <__libc_init_array+0xc>
 800dcfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcfe:	4798      	blx	r3
 800dd00:	3601      	adds	r6, #1
 800dd02:	e7f2      	b.n	800dcea <__libc_init_array+0x1e>
 800dd04:	0800f000 	.word	0x0800f000
 800dd08:	0800f000 	.word	0x0800f000
 800dd0c:	0800f000 	.word	0x0800f000
 800dd10:	0800f004 	.word	0x0800f004

0800dd14 <malloc>:
 800dd14:	4b02      	ldr	r3, [pc, #8]	; (800dd20 <malloc+0xc>)
 800dd16:	4601      	mov	r1, r0
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	f000 b871 	b.w	800de00 <_malloc_r>
 800dd1e:	bf00      	nop
 800dd20:	20000038 	.word	0x20000038

0800dd24 <free>:
 800dd24:	4b02      	ldr	r3, [pc, #8]	; (800dd30 <free+0xc>)
 800dd26:	4601      	mov	r1, r0
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	f000 b819 	b.w	800dd60 <_free_r>
 800dd2e:	bf00      	nop
 800dd30:	20000038 	.word	0x20000038

0800dd34 <memcpy>:
 800dd34:	440a      	add	r2, r1
 800dd36:	4291      	cmp	r1, r2
 800dd38:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd3c:	d100      	bne.n	800dd40 <memcpy+0xc>
 800dd3e:	4770      	bx	lr
 800dd40:	b510      	push	{r4, lr}
 800dd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd4a:	4291      	cmp	r1, r2
 800dd4c:	d1f9      	bne.n	800dd42 <memcpy+0xe>
 800dd4e:	bd10      	pop	{r4, pc}

0800dd50 <memset>:
 800dd50:	4402      	add	r2, r0
 800dd52:	4603      	mov	r3, r0
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d100      	bne.n	800dd5a <memset+0xa>
 800dd58:	4770      	bx	lr
 800dd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5e:	e7f9      	b.n	800dd54 <memset+0x4>

0800dd60 <_free_r>:
 800dd60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd62:	2900      	cmp	r1, #0
 800dd64:	d048      	beq.n	800ddf8 <_free_r+0x98>
 800dd66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd6a:	9001      	str	r0, [sp, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f1a1 0404 	sub.w	r4, r1, #4
 800dd72:	bfb8      	it	lt
 800dd74:	18e4      	addlt	r4, r4, r3
 800dd76:	f000 f8cd 	bl	800df14 <__malloc_lock>
 800dd7a:	4a20      	ldr	r2, [pc, #128]	; (800ddfc <_free_r+0x9c>)
 800dd7c:	9801      	ldr	r0, [sp, #4]
 800dd7e:	6813      	ldr	r3, [r2, #0]
 800dd80:	4615      	mov	r5, r2
 800dd82:	b933      	cbnz	r3, 800dd92 <_free_r+0x32>
 800dd84:	6063      	str	r3, [r4, #4]
 800dd86:	6014      	str	r4, [r2, #0]
 800dd88:	b003      	add	sp, #12
 800dd8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd8e:	f000 b8c7 	b.w	800df20 <__malloc_unlock>
 800dd92:	42a3      	cmp	r3, r4
 800dd94:	d90b      	bls.n	800ddae <_free_r+0x4e>
 800dd96:	6821      	ldr	r1, [r4, #0]
 800dd98:	1862      	adds	r2, r4, r1
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	bf04      	itt	eq
 800dd9e:	681a      	ldreq	r2, [r3, #0]
 800dda0:	685b      	ldreq	r3, [r3, #4]
 800dda2:	6063      	str	r3, [r4, #4]
 800dda4:	bf04      	itt	eq
 800dda6:	1852      	addeq	r2, r2, r1
 800dda8:	6022      	streq	r2, [r4, #0]
 800ddaa:	602c      	str	r4, [r5, #0]
 800ddac:	e7ec      	b.n	800dd88 <_free_r+0x28>
 800ddae:	461a      	mov	r2, r3
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	b10b      	cbz	r3, 800ddb8 <_free_r+0x58>
 800ddb4:	42a3      	cmp	r3, r4
 800ddb6:	d9fa      	bls.n	800ddae <_free_r+0x4e>
 800ddb8:	6811      	ldr	r1, [r2, #0]
 800ddba:	1855      	adds	r5, r2, r1
 800ddbc:	42a5      	cmp	r5, r4
 800ddbe:	d10b      	bne.n	800ddd8 <_free_r+0x78>
 800ddc0:	6824      	ldr	r4, [r4, #0]
 800ddc2:	4421      	add	r1, r4
 800ddc4:	1854      	adds	r4, r2, r1
 800ddc6:	42a3      	cmp	r3, r4
 800ddc8:	6011      	str	r1, [r2, #0]
 800ddca:	d1dd      	bne.n	800dd88 <_free_r+0x28>
 800ddcc:	681c      	ldr	r4, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	6053      	str	r3, [r2, #4]
 800ddd2:	4421      	add	r1, r4
 800ddd4:	6011      	str	r1, [r2, #0]
 800ddd6:	e7d7      	b.n	800dd88 <_free_r+0x28>
 800ddd8:	d902      	bls.n	800dde0 <_free_r+0x80>
 800ddda:	230c      	movs	r3, #12
 800dddc:	6003      	str	r3, [r0, #0]
 800ddde:	e7d3      	b.n	800dd88 <_free_r+0x28>
 800dde0:	6825      	ldr	r5, [r4, #0]
 800dde2:	1961      	adds	r1, r4, r5
 800dde4:	428b      	cmp	r3, r1
 800dde6:	bf04      	itt	eq
 800dde8:	6819      	ldreq	r1, [r3, #0]
 800ddea:	685b      	ldreq	r3, [r3, #4]
 800ddec:	6063      	str	r3, [r4, #4]
 800ddee:	bf04      	itt	eq
 800ddf0:	1949      	addeq	r1, r1, r5
 800ddf2:	6021      	streq	r1, [r4, #0]
 800ddf4:	6054      	str	r4, [r2, #4]
 800ddf6:	e7c7      	b.n	800dd88 <_free_r+0x28>
 800ddf8:	b003      	add	sp, #12
 800ddfa:	bd30      	pop	{r4, r5, pc}
 800ddfc:	200002f4 	.word	0x200002f4

0800de00 <_malloc_r>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	1ccd      	adds	r5, r1, #3
 800de04:	f025 0503 	bic.w	r5, r5, #3
 800de08:	3508      	adds	r5, #8
 800de0a:	2d0c      	cmp	r5, #12
 800de0c:	bf38      	it	cc
 800de0e:	250c      	movcc	r5, #12
 800de10:	2d00      	cmp	r5, #0
 800de12:	4606      	mov	r6, r0
 800de14:	db01      	blt.n	800de1a <_malloc_r+0x1a>
 800de16:	42a9      	cmp	r1, r5
 800de18:	d903      	bls.n	800de22 <_malloc_r+0x22>
 800de1a:	230c      	movs	r3, #12
 800de1c:	6033      	str	r3, [r6, #0]
 800de1e:	2000      	movs	r0, #0
 800de20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de22:	f000 f877 	bl	800df14 <__malloc_lock>
 800de26:	4921      	ldr	r1, [pc, #132]	; (800deac <_malloc_r+0xac>)
 800de28:	680a      	ldr	r2, [r1, #0]
 800de2a:	4614      	mov	r4, r2
 800de2c:	b99c      	cbnz	r4, 800de56 <_malloc_r+0x56>
 800de2e:	4f20      	ldr	r7, [pc, #128]	; (800deb0 <_malloc_r+0xb0>)
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	b923      	cbnz	r3, 800de3e <_malloc_r+0x3e>
 800de34:	4621      	mov	r1, r4
 800de36:	4630      	mov	r0, r6
 800de38:	f000 f83c 	bl	800deb4 <_sbrk_r>
 800de3c:	6038      	str	r0, [r7, #0]
 800de3e:	4629      	mov	r1, r5
 800de40:	4630      	mov	r0, r6
 800de42:	f000 f837 	bl	800deb4 <_sbrk_r>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	d123      	bne.n	800de92 <_malloc_r+0x92>
 800de4a:	230c      	movs	r3, #12
 800de4c:	6033      	str	r3, [r6, #0]
 800de4e:	4630      	mov	r0, r6
 800de50:	f000 f866 	bl	800df20 <__malloc_unlock>
 800de54:	e7e3      	b.n	800de1e <_malloc_r+0x1e>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	1b5b      	subs	r3, r3, r5
 800de5a:	d417      	bmi.n	800de8c <_malloc_r+0x8c>
 800de5c:	2b0b      	cmp	r3, #11
 800de5e:	d903      	bls.n	800de68 <_malloc_r+0x68>
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	441c      	add	r4, r3
 800de64:	6025      	str	r5, [r4, #0]
 800de66:	e004      	b.n	800de72 <_malloc_r+0x72>
 800de68:	6863      	ldr	r3, [r4, #4]
 800de6a:	42a2      	cmp	r2, r4
 800de6c:	bf0c      	ite	eq
 800de6e:	600b      	streq	r3, [r1, #0]
 800de70:	6053      	strne	r3, [r2, #4]
 800de72:	4630      	mov	r0, r6
 800de74:	f000 f854 	bl	800df20 <__malloc_unlock>
 800de78:	f104 000b 	add.w	r0, r4, #11
 800de7c:	1d23      	adds	r3, r4, #4
 800de7e:	f020 0007 	bic.w	r0, r0, #7
 800de82:	1ac2      	subs	r2, r0, r3
 800de84:	d0cc      	beq.n	800de20 <_malloc_r+0x20>
 800de86:	1a1b      	subs	r3, r3, r0
 800de88:	50a3      	str	r3, [r4, r2]
 800de8a:	e7c9      	b.n	800de20 <_malloc_r+0x20>
 800de8c:	4622      	mov	r2, r4
 800de8e:	6864      	ldr	r4, [r4, #4]
 800de90:	e7cc      	b.n	800de2c <_malloc_r+0x2c>
 800de92:	1cc4      	adds	r4, r0, #3
 800de94:	f024 0403 	bic.w	r4, r4, #3
 800de98:	42a0      	cmp	r0, r4
 800de9a:	d0e3      	beq.n	800de64 <_malloc_r+0x64>
 800de9c:	1a21      	subs	r1, r4, r0
 800de9e:	4630      	mov	r0, r6
 800dea0:	f000 f808 	bl	800deb4 <_sbrk_r>
 800dea4:	3001      	adds	r0, #1
 800dea6:	d1dd      	bne.n	800de64 <_malloc_r+0x64>
 800dea8:	e7cf      	b.n	800de4a <_malloc_r+0x4a>
 800deaa:	bf00      	nop
 800deac:	200002f4 	.word	0x200002f4
 800deb0:	200002f8 	.word	0x200002f8

0800deb4 <_sbrk_r>:
 800deb4:	b538      	push	{r3, r4, r5, lr}
 800deb6:	4d06      	ldr	r5, [pc, #24]	; (800ded0 <_sbrk_r+0x1c>)
 800deb8:	2300      	movs	r3, #0
 800deba:	4604      	mov	r4, r0
 800debc:	4608      	mov	r0, r1
 800debe:	602b      	str	r3, [r5, #0]
 800dec0:	f7f3 fc7e 	bl	80017c0 <_sbrk>
 800dec4:	1c43      	adds	r3, r0, #1
 800dec6:	d102      	bne.n	800dece <_sbrk_r+0x1a>
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	b103      	cbz	r3, 800dece <_sbrk_r+0x1a>
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	bd38      	pop	{r3, r4, r5, pc}
 800ded0:	200010bc 	.word	0x200010bc

0800ded4 <siprintf>:
 800ded4:	b40e      	push	{r1, r2, r3}
 800ded6:	b500      	push	{lr}
 800ded8:	b09c      	sub	sp, #112	; 0x70
 800deda:	ab1d      	add	r3, sp, #116	; 0x74
 800dedc:	9002      	str	r0, [sp, #8]
 800dede:	9006      	str	r0, [sp, #24]
 800dee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dee4:	4809      	ldr	r0, [pc, #36]	; (800df0c <siprintf+0x38>)
 800dee6:	9107      	str	r1, [sp, #28]
 800dee8:	9104      	str	r1, [sp, #16]
 800deea:	4909      	ldr	r1, [pc, #36]	; (800df10 <siprintf+0x3c>)
 800deec:	f853 2b04 	ldr.w	r2, [r3], #4
 800def0:	9105      	str	r1, [sp, #20]
 800def2:	6800      	ldr	r0, [r0, #0]
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	a902      	add	r1, sp, #8
 800def8:	f000 f874 	bl	800dfe4 <_svfiprintf_r>
 800defc:	9b02      	ldr	r3, [sp, #8]
 800defe:	2200      	movs	r2, #0
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	b01c      	add	sp, #112	; 0x70
 800df04:	f85d eb04 	ldr.w	lr, [sp], #4
 800df08:	b003      	add	sp, #12
 800df0a:	4770      	bx	lr
 800df0c:	20000038 	.word	0x20000038
 800df10:	ffff0208 	.word	0xffff0208

0800df14 <__malloc_lock>:
 800df14:	4801      	ldr	r0, [pc, #4]	; (800df1c <__malloc_lock+0x8>)
 800df16:	f000 baf9 	b.w	800e50c <__retarget_lock_acquire_recursive>
 800df1a:	bf00      	nop
 800df1c:	200010c4 	.word	0x200010c4

0800df20 <__malloc_unlock>:
 800df20:	4801      	ldr	r0, [pc, #4]	; (800df28 <__malloc_unlock+0x8>)
 800df22:	f000 baf4 	b.w	800e50e <__retarget_lock_release_recursive>
 800df26:	bf00      	nop
 800df28:	200010c4 	.word	0x200010c4

0800df2c <__ssputs_r>:
 800df2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	688e      	ldr	r6, [r1, #8]
 800df32:	429e      	cmp	r6, r3
 800df34:	4682      	mov	sl, r0
 800df36:	460c      	mov	r4, r1
 800df38:	4690      	mov	r8, r2
 800df3a:	461f      	mov	r7, r3
 800df3c:	d838      	bhi.n	800dfb0 <__ssputs_r+0x84>
 800df3e:	898a      	ldrh	r2, [r1, #12]
 800df40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df44:	d032      	beq.n	800dfac <__ssputs_r+0x80>
 800df46:	6825      	ldr	r5, [r4, #0]
 800df48:	6909      	ldr	r1, [r1, #16]
 800df4a:	eba5 0901 	sub.w	r9, r5, r1
 800df4e:	6965      	ldr	r5, [r4, #20]
 800df50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df58:	3301      	adds	r3, #1
 800df5a:	444b      	add	r3, r9
 800df5c:	106d      	asrs	r5, r5, #1
 800df5e:	429d      	cmp	r5, r3
 800df60:	bf38      	it	cc
 800df62:	461d      	movcc	r5, r3
 800df64:	0553      	lsls	r3, r2, #21
 800df66:	d531      	bpl.n	800dfcc <__ssputs_r+0xa0>
 800df68:	4629      	mov	r1, r5
 800df6a:	f7ff ff49 	bl	800de00 <_malloc_r>
 800df6e:	4606      	mov	r6, r0
 800df70:	b950      	cbnz	r0, 800df88 <__ssputs_r+0x5c>
 800df72:	230c      	movs	r3, #12
 800df74:	f8ca 3000 	str.w	r3, [sl]
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df7e:	81a3      	strh	r3, [r4, #12]
 800df80:	f04f 30ff 	mov.w	r0, #4294967295
 800df84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df88:	6921      	ldr	r1, [r4, #16]
 800df8a:	464a      	mov	r2, r9
 800df8c:	f7ff fed2 	bl	800dd34 <memcpy>
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	6126      	str	r6, [r4, #16]
 800df9e:	6165      	str	r5, [r4, #20]
 800dfa0:	444e      	add	r6, r9
 800dfa2:	eba5 0509 	sub.w	r5, r5, r9
 800dfa6:	6026      	str	r6, [r4, #0]
 800dfa8:	60a5      	str	r5, [r4, #8]
 800dfaa:	463e      	mov	r6, r7
 800dfac:	42be      	cmp	r6, r7
 800dfae:	d900      	bls.n	800dfb2 <__ssputs_r+0x86>
 800dfb0:	463e      	mov	r6, r7
 800dfb2:	4632      	mov	r2, r6
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	f000 faaa 	bl	800e510 <memmove>
 800dfbc:	68a3      	ldr	r3, [r4, #8]
 800dfbe:	6822      	ldr	r2, [r4, #0]
 800dfc0:	1b9b      	subs	r3, r3, r6
 800dfc2:	4432      	add	r2, r6
 800dfc4:	60a3      	str	r3, [r4, #8]
 800dfc6:	6022      	str	r2, [r4, #0]
 800dfc8:	2000      	movs	r0, #0
 800dfca:	e7db      	b.n	800df84 <__ssputs_r+0x58>
 800dfcc:	462a      	mov	r2, r5
 800dfce:	f000 fab9 	bl	800e544 <_realloc_r>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d1e1      	bne.n	800df9c <__ssputs_r+0x70>
 800dfd8:	6921      	ldr	r1, [r4, #16]
 800dfda:	4650      	mov	r0, sl
 800dfdc:	f7ff fec0 	bl	800dd60 <_free_r>
 800dfe0:	e7c7      	b.n	800df72 <__ssputs_r+0x46>
	...

0800dfe4 <_svfiprintf_r>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	4698      	mov	r8, r3
 800dfea:	898b      	ldrh	r3, [r1, #12]
 800dfec:	061b      	lsls	r3, r3, #24
 800dfee:	b09d      	sub	sp, #116	; 0x74
 800dff0:	4607      	mov	r7, r0
 800dff2:	460d      	mov	r5, r1
 800dff4:	4614      	mov	r4, r2
 800dff6:	d50e      	bpl.n	800e016 <_svfiprintf_r+0x32>
 800dff8:	690b      	ldr	r3, [r1, #16]
 800dffa:	b963      	cbnz	r3, 800e016 <_svfiprintf_r+0x32>
 800dffc:	2140      	movs	r1, #64	; 0x40
 800dffe:	f7ff feff 	bl	800de00 <_malloc_r>
 800e002:	6028      	str	r0, [r5, #0]
 800e004:	6128      	str	r0, [r5, #16]
 800e006:	b920      	cbnz	r0, 800e012 <_svfiprintf_r+0x2e>
 800e008:	230c      	movs	r3, #12
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	e0d1      	b.n	800e1b6 <_svfiprintf_r+0x1d2>
 800e012:	2340      	movs	r3, #64	; 0x40
 800e014:	616b      	str	r3, [r5, #20]
 800e016:	2300      	movs	r3, #0
 800e018:	9309      	str	r3, [sp, #36]	; 0x24
 800e01a:	2320      	movs	r3, #32
 800e01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e020:	f8cd 800c 	str.w	r8, [sp, #12]
 800e024:	2330      	movs	r3, #48	; 0x30
 800e026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1d0 <_svfiprintf_r+0x1ec>
 800e02a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e02e:	f04f 0901 	mov.w	r9, #1
 800e032:	4623      	mov	r3, r4
 800e034:	469a      	mov	sl, r3
 800e036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e03a:	b10a      	cbz	r2, 800e040 <_svfiprintf_r+0x5c>
 800e03c:	2a25      	cmp	r2, #37	; 0x25
 800e03e:	d1f9      	bne.n	800e034 <_svfiprintf_r+0x50>
 800e040:	ebba 0b04 	subs.w	fp, sl, r4
 800e044:	d00b      	beq.n	800e05e <_svfiprintf_r+0x7a>
 800e046:	465b      	mov	r3, fp
 800e048:	4622      	mov	r2, r4
 800e04a:	4629      	mov	r1, r5
 800e04c:	4638      	mov	r0, r7
 800e04e:	f7ff ff6d 	bl	800df2c <__ssputs_r>
 800e052:	3001      	adds	r0, #1
 800e054:	f000 80aa 	beq.w	800e1ac <_svfiprintf_r+0x1c8>
 800e058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e05a:	445a      	add	r2, fp
 800e05c:	9209      	str	r2, [sp, #36]	; 0x24
 800e05e:	f89a 3000 	ldrb.w	r3, [sl]
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 80a2 	beq.w	800e1ac <_svfiprintf_r+0x1c8>
 800e068:	2300      	movs	r3, #0
 800e06a:	f04f 32ff 	mov.w	r2, #4294967295
 800e06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e072:	f10a 0a01 	add.w	sl, sl, #1
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	9307      	str	r3, [sp, #28]
 800e07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e07e:	931a      	str	r3, [sp, #104]	; 0x68
 800e080:	4654      	mov	r4, sl
 800e082:	2205      	movs	r2, #5
 800e084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e088:	4851      	ldr	r0, [pc, #324]	; (800e1d0 <_svfiprintf_r+0x1ec>)
 800e08a:	f7f2 f8b9 	bl	8000200 <memchr>
 800e08e:	9a04      	ldr	r2, [sp, #16]
 800e090:	b9d8      	cbnz	r0, 800e0ca <_svfiprintf_r+0xe6>
 800e092:	06d0      	lsls	r0, r2, #27
 800e094:	bf44      	itt	mi
 800e096:	2320      	movmi	r3, #32
 800e098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e09c:	0711      	lsls	r1, r2, #28
 800e09e:	bf44      	itt	mi
 800e0a0:	232b      	movmi	r3, #43	; 0x2b
 800e0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ac:	d015      	beq.n	800e0da <_svfiprintf_r+0xf6>
 800e0ae:	9a07      	ldr	r2, [sp, #28]
 800e0b0:	4654      	mov	r4, sl
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	f04f 0c0a 	mov.w	ip, #10
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0be:	3b30      	subs	r3, #48	; 0x30
 800e0c0:	2b09      	cmp	r3, #9
 800e0c2:	d94e      	bls.n	800e162 <_svfiprintf_r+0x17e>
 800e0c4:	b1b0      	cbz	r0, 800e0f4 <_svfiprintf_r+0x110>
 800e0c6:	9207      	str	r2, [sp, #28]
 800e0c8:	e014      	b.n	800e0f4 <_svfiprintf_r+0x110>
 800e0ca:	eba0 0308 	sub.w	r3, r0, r8
 800e0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	9304      	str	r3, [sp, #16]
 800e0d6:	46a2      	mov	sl, r4
 800e0d8:	e7d2      	b.n	800e080 <_svfiprintf_r+0x9c>
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	1d19      	adds	r1, r3, #4
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	9103      	str	r1, [sp, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bfbb      	ittet	lt
 800e0e6:	425b      	neglt	r3, r3
 800e0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ec:	9307      	strge	r3, [sp, #28]
 800e0ee:	9307      	strlt	r3, [sp, #28]
 800e0f0:	bfb8      	it	lt
 800e0f2:	9204      	strlt	r2, [sp, #16]
 800e0f4:	7823      	ldrb	r3, [r4, #0]
 800e0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0f8:	d10c      	bne.n	800e114 <_svfiprintf_r+0x130>
 800e0fa:	7863      	ldrb	r3, [r4, #1]
 800e0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0fe:	d135      	bne.n	800e16c <_svfiprintf_r+0x188>
 800e100:	9b03      	ldr	r3, [sp, #12]
 800e102:	1d1a      	adds	r2, r3, #4
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	9203      	str	r2, [sp, #12]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfb8      	it	lt
 800e10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e110:	3402      	adds	r4, #2
 800e112:	9305      	str	r3, [sp, #20]
 800e114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1e0 <_svfiprintf_r+0x1fc>
 800e118:	7821      	ldrb	r1, [r4, #0]
 800e11a:	2203      	movs	r2, #3
 800e11c:	4650      	mov	r0, sl
 800e11e:	f7f2 f86f 	bl	8000200 <memchr>
 800e122:	b140      	cbz	r0, 800e136 <_svfiprintf_r+0x152>
 800e124:	2340      	movs	r3, #64	; 0x40
 800e126:	eba0 000a 	sub.w	r0, r0, sl
 800e12a:	fa03 f000 	lsl.w	r0, r3, r0
 800e12e:	9b04      	ldr	r3, [sp, #16]
 800e130:	4303      	orrs	r3, r0
 800e132:	3401      	adds	r4, #1
 800e134:	9304      	str	r3, [sp, #16]
 800e136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e13a:	4826      	ldr	r0, [pc, #152]	; (800e1d4 <_svfiprintf_r+0x1f0>)
 800e13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e140:	2206      	movs	r2, #6
 800e142:	f7f2 f85d 	bl	8000200 <memchr>
 800e146:	2800      	cmp	r0, #0
 800e148:	d038      	beq.n	800e1bc <_svfiprintf_r+0x1d8>
 800e14a:	4b23      	ldr	r3, [pc, #140]	; (800e1d8 <_svfiprintf_r+0x1f4>)
 800e14c:	bb1b      	cbnz	r3, 800e196 <_svfiprintf_r+0x1b2>
 800e14e:	9b03      	ldr	r3, [sp, #12]
 800e150:	3307      	adds	r3, #7
 800e152:	f023 0307 	bic.w	r3, r3, #7
 800e156:	3308      	adds	r3, #8
 800e158:	9303      	str	r3, [sp, #12]
 800e15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e15c:	4433      	add	r3, r6
 800e15e:	9309      	str	r3, [sp, #36]	; 0x24
 800e160:	e767      	b.n	800e032 <_svfiprintf_r+0x4e>
 800e162:	fb0c 3202 	mla	r2, ip, r2, r3
 800e166:	460c      	mov	r4, r1
 800e168:	2001      	movs	r0, #1
 800e16a:	e7a5      	b.n	800e0b8 <_svfiprintf_r+0xd4>
 800e16c:	2300      	movs	r3, #0
 800e16e:	3401      	adds	r4, #1
 800e170:	9305      	str	r3, [sp, #20]
 800e172:	4619      	mov	r1, r3
 800e174:	f04f 0c0a 	mov.w	ip, #10
 800e178:	4620      	mov	r0, r4
 800e17a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e17e:	3a30      	subs	r2, #48	; 0x30
 800e180:	2a09      	cmp	r2, #9
 800e182:	d903      	bls.n	800e18c <_svfiprintf_r+0x1a8>
 800e184:	2b00      	cmp	r3, #0
 800e186:	d0c5      	beq.n	800e114 <_svfiprintf_r+0x130>
 800e188:	9105      	str	r1, [sp, #20]
 800e18a:	e7c3      	b.n	800e114 <_svfiprintf_r+0x130>
 800e18c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e190:	4604      	mov	r4, r0
 800e192:	2301      	movs	r3, #1
 800e194:	e7f0      	b.n	800e178 <_svfiprintf_r+0x194>
 800e196:	ab03      	add	r3, sp, #12
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	462a      	mov	r2, r5
 800e19c:	4b0f      	ldr	r3, [pc, #60]	; (800e1dc <_svfiprintf_r+0x1f8>)
 800e19e:	a904      	add	r1, sp, #16
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	f3af 8000 	nop.w
 800e1a6:	1c42      	adds	r2, r0, #1
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	d1d6      	bne.n	800e15a <_svfiprintf_r+0x176>
 800e1ac:	89ab      	ldrh	r3, [r5, #12]
 800e1ae:	065b      	lsls	r3, r3, #25
 800e1b0:	f53f af2c 	bmi.w	800e00c <_svfiprintf_r+0x28>
 800e1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1b6:	b01d      	add	sp, #116	; 0x74
 800e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	ab03      	add	r3, sp, #12
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	462a      	mov	r2, r5
 800e1c2:	4b06      	ldr	r3, [pc, #24]	; (800e1dc <_svfiprintf_r+0x1f8>)
 800e1c4:	a904      	add	r1, sp, #16
 800e1c6:	4638      	mov	r0, r7
 800e1c8:	f000 f87a 	bl	800e2c0 <_printf_i>
 800e1cc:	e7eb      	b.n	800e1a6 <_svfiprintf_r+0x1c2>
 800e1ce:	bf00      	nop
 800e1d0:	0800efc4 	.word	0x0800efc4
 800e1d4:	0800efce 	.word	0x0800efce
 800e1d8:	00000000 	.word	0x00000000
 800e1dc:	0800df2d 	.word	0x0800df2d
 800e1e0:	0800efca 	.word	0x0800efca

0800e1e4 <_printf_common>:
 800e1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e8:	4616      	mov	r6, r2
 800e1ea:	4699      	mov	r9, r3
 800e1ec:	688a      	ldr	r2, [r1, #8]
 800e1ee:	690b      	ldr	r3, [r1, #16]
 800e1f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	bfb8      	it	lt
 800e1f8:	4613      	movlt	r3, r2
 800e1fa:	6033      	str	r3, [r6, #0]
 800e1fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e200:	4607      	mov	r7, r0
 800e202:	460c      	mov	r4, r1
 800e204:	b10a      	cbz	r2, 800e20a <_printf_common+0x26>
 800e206:	3301      	adds	r3, #1
 800e208:	6033      	str	r3, [r6, #0]
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	0699      	lsls	r1, r3, #26
 800e20e:	bf42      	ittt	mi
 800e210:	6833      	ldrmi	r3, [r6, #0]
 800e212:	3302      	addmi	r3, #2
 800e214:	6033      	strmi	r3, [r6, #0]
 800e216:	6825      	ldr	r5, [r4, #0]
 800e218:	f015 0506 	ands.w	r5, r5, #6
 800e21c:	d106      	bne.n	800e22c <_printf_common+0x48>
 800e21e:	f104 0a19 	add.w	sl, r4, #25
 800e222:	68e3      	ldr	r3, [r4, #12]
 800e224:	6832      	ldr	r2, [r6, #0]
 800e226:	1a9b      	subs	r3, r3, r2
 800e228:	42ab      	cmp	r3, r5
 800e22a:	dc26      	bgt.n	800e27a <_printf_common+0x96>
 800e22c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e230:	1e13      	subs	r3, r2, #0
 800e232:	6822      	ldr	r2, [r4, #0]
 800e234:	bf18      	it	ne
 800e236:	2301      	movne	r3, #1
 800e238:	0692      	lsls	r2, r2, #26
 800e23a:	d42b      	bmi.n	800e294 <_printf_common+0xb0>
 800e23c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e240:	4649      	mov	r1, r9
 800e242:	4638      	mov	r0, r7
 800e244:	47c0      	blx	r8
 800e246:	3001      	adds	r0, #1
 800e248:	d01e      	beq.n	800e288 <_printf_common+0xa4>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	68e5      	ldr	r5, [r4, #12]
 800e24e:	6832      	ldr	r2, [r6, #0]
 800e250:	f003 0306 	and.w	r3, r3, #6
 800e254:	2b04      	cmp	r3, #4
 800e256:	bf08      	it	eq
 800e258:	1aad      	subeq	r5, r5, r2
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	6922      	ldr	r2, [r4, #16]
 800e25e:	bf0c      	ite	eq
 800e260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e264:	2500      	movne	r5, #0
 800e266:	4293      	cmp	r3, r2
 800e268:	bfc4      	itt	gt
 800e26a:	1a9b      	subgt	r3, r3, r2
 800e26c:	18ed      	addgt	r5, r5, r3
 800e26e:	2600      	movs	r6, #0
 800e270:	341a      	adds	r4, #26
 800e272:	42b5      	cmp	r5, r6
 800e274:	d11a      	bne.n	800e2ac <_printf_common+0xc8>
 800e276:	2000      	movs	r0, #0
 800e278:	e008      	b.n	800e28c <_printf_common+0xa8>
 800e27a:	2301      	movs	r3, #1
 800e27c:	4652      	mov	r2, sl
 800e27e:	4649      	mov	r1, r9
 800e280:	4638      	mov	r0, r7
 800e282:	47c0      	blx	r8
 800e284:	3001      	adds	r0, #1
 800e286:	d103      	bne.n	800e290 <_printf_common+0xac>
 800e288:	f04f 30ff 	mov.w	r0, #4294967295
 800e28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e290:	3501      	adds	r5, #1
 800e292:	e7c6      	b.n	800e222 <_printf_common+0x3e>
 800e294:	18e1      	adds	r1, r4, r3
 800e296:	1c5a      	adds	r2, r3, #1
 800e298:	2030      	movs	r0, #48	; 0x30
 800e29a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e29e:	4422      	add	r2, r4
 800e2a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2a8:	3302      	adds	r3, #2
 800e2aa:	e7c7      	b.n	800e23c <_printf_common+0x58>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	4622      	mov	r2, r4
 800e2b0:	4649      	mov	r1, r9
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	47c0      	blx	r8
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d0e6      	beq.n	800e288 <_printf_common+0xa4>
 800e2ba:	3601      	adds	r6, #1
 800e2bc:	e7d9      	b.n	800e272 <_printf_common+0x8e>
	...

0800e2c0 <_printf_i>:
 800e2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	4691      	mov	r9, r2
 800e2c8:	7e27      	ldrb	r7, [r4, #24]
 800e2ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2cc:	2f78      	cmp	r7, #120	; 0x78
 800e2ce:	4680      	mov	r8, r0
 800e2d0:	469a      	mov	sl, r3
 800e2d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2d6:	d807      	bhi.n	800e2e8 <_printf_i+0x28>
 800e2d8:	2f62      	cmp	r7, #98	; 0x62
 800e2da:	d80a      	bhi.n	800e2f2 <_printf_i+0x32>
 800e2dc:	2f00      	cmp	r7, #0
 800e2de:	f000 80d8 	beq.w	800e492 <_printf_i+0x1d2>
 800e2e2:	2f58      	cmp	r7, #88	; 0x58
 800e2e4:	f000 80a3 	beq.w	800e42e <_printf_i+0x16e>
 800e2e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2f0:	e03a      	b.n	800e368 <_printf_i+0xa8>
 800e2f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2f6:	2b15      	cmp	r3, #21
 800e2f8:	d8f6      	bhi.n	800e2e8 <_printf_i+0x28>
 800e2fa:	a001      	add	r0, pc, #4	; (adr r0, 800e300 <_printf_i+0x40>)
 800e2fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e300:	0800e359 	.word	0x0800e359
 800e304:	0800e36d 	.word	0x0800e36d
 800e308:	0800e2e9 	.word	0x0800e2e9
 800e30c:	0800e2e9 	.word	0x0800e2e9
 800e310:	0800e2e9 	.word	0x0800e2e9
 800e314:	0800e2e9 	.word	0x0800e2e9
 800e318:	0800e36d 	.word	0x0800e36d
 800e31c:	0800e2e9 	.word	0x0800e2e9
 800e320:	0800e2e9 	.word	0x0800e2e9
 800e324:	0800e2e9 	.word	0x0800e2e9
 800e328:	0800e2e9 	.word	0x0800e2e9
 800e32c:	0800e479 	.word	0x0800e479
 800e330:	0800e39d 	.word	0x0800e39d
 800e334:	0800e45b 	.word	0x0800e45b
 800e338:	0800e2e9 	.word	0x0800e2e9
 800e33c:	0800e2e9 	.word	0x0800e2e9
 800e340:	0800e49b 	.word	0x0800e49b
 800e344:	0800e2e9 	.word	0x0800e2e9
 800e348:	0800e39d 	.word	0x0800e39d
 800e34c:	0800e2e9 	.word	0x0800e2e9
 800e350:	0800e2e9 	.word	0x0800e2e9
 800e354:	0800e463 	.word	0x0800e463
 800e358:	680b      	ldr	r3, [r1, #0]
 800e35a:	1d1a      	adds	r2, r3, #4
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	600a      	str	r2, [r1, #0]
 800e360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e368:	2301      	movs	r3, #1
 800e36a:	e0a3      	b.n	800e4b4 <_printf_i+0x1f4>
 800e36c:	6825      	ldr	r5, [r4, #0]
 800e36e:	6808      	ldr	r0, [r1, #0]
 800e370:	062e      	lsls	r6, r5, #24
 800e372:	f100 0304 	add.w	r3, r0, #4
 800e376:	d50a      	bpl.n	800e38e <_printf_i+0xce>
 800e378:	6805      	ldr	r5, [r0, #0]
 800e37a:	600b      	str	r3, [r1, #0]
 800e37c:	2d00      	cmp	r5, #0
 800e37e:	da03      	bge.n	800e388 <_printf_i+0xc8>
 800e380:	232d      	movs	r3, #45	; 0x2d
 800e382:	426d      	negs	r5, r5
 800e384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e388:	485e      	ldr	r0, [pc, #376]	; (800e504 <_printf_i+0x244>)
 800e38a:	230a      	movs	r3, #10
 800e38c:	e019      	b.n	800e3c2 <_printf_i+0x102>
 800e38e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e392:	6805      	ldr	r5, [r0, #0]
 800e394:	600b      	str	r3, [r1, #0]
 800e396:	bf18      	it	ne
 800e398:	b22d      	sxthne	r5, r5
 800e39a:	e7ef      	b.n	800e37c <_printf_i+0xbc>
 800e39c:	680b      	ldr	r3, [r1, #0]
 800e39e:	6825      	ldr	r5, [r4, #0]
 800e3a0:	1d18      	adds	r0, r3, #4
 800e3a2:	6008      	str	r0, [r1, #0]
 800e3a4:	0628      	lsls	r0, r5, #24
 800e3a6:	d501      	bpl.n	800e3ac <_printf_i+0xec>
 800e3a8:	681d      	ldr	r5, [r3, #0]
 800e3aa:	e002      	b.n	800e3b2 <_printf_i+0xf2>
 800e3ac:	0669      	lsls	r1, r5, #25
 800e3ae:	d5fb      	bpl.n	800e3a8 <_printf_i+0xe8>
 800e3b0:	881d      	ldrh	r5, [r3, #0]
 800e3b2:	4854      	ldr	r0, [pc, #336]	; (800e504 <_printf_i+0x244>)
 800e3b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e3b6:	bf0c      	ite	eq
 800e3b8:	2308      	moveq	r3, #8
 800e3ba:	230a      	movne	r3, #10
 800e3bc:	2100      	movs	r1, #0
 800e3be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3c2:	6866      	ldr	r6, [r4, #4]
 800e3c4:	60a6      	str	r6, [r4, #8]
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	bfa2      	ittt	ge
 800e3ca:	6821      	ldrge	r1, [r4, #0]
 800e3cc:	f021 0104 	bicge.w	r1, r1, #4
 800e3d0:	6021      	strge	r1, [r4, #0]
 800e3d2:	b90d      	cbnz	r5, 800e3d8 <_printf_i+0x118>
 800e3d4:	2e00      	cmp	r6, #0
 800e3d6:	d04d      	beq.n	800e474 <_printf_i+0x1b4>
 800e3d8:	4616      	mov	r6, r2
 800e3da:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3de:	fb03 5711 	mls	r7, r3, r1, r5
 800e3e2:	5dc7      	ldrb	r7, [r0, r7]
 800e3e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3e8:	462f      	mov	r7, r5
 800e3ea:	42bb      	cmp	r3, r7
 800e3ec:	460d      	mov	r5, r1
 800e3ee:	d9f4      	bls.n	800e3da <_printf_i+0x11a>
 800e3f0:	2b08      	cmp	r3, #8
 800e3f2:	d10b      	bne.n	800e40c <_printf_i+0x14c>
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	07df      	lsls	r7, r3, #31
 800e3f8:	d508      	bpl.n	800e40c <_printf_i+0x14c>
 800e3fa:	6923      	ldr	r3, [r4, #16]
 800e3fc:	6861      	ldr	r1, [r4, #4]
 800e3fe:	4299      	cmp	r1, r3
 800e400:	bfde      	ittt	le
 800e402:	2330      	movle	r3, #48	; 0x30
 800e404:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e408:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e40c:	1b92      	subs	r2, r2, r6
 800e40e:	6122      	str	r2, [r4, #16]
 800e410:	f8cd a000 	str.w	sl, [sp]
 800e414:	464b      	mov	r3, r9
 800e416:	aa03      	add	r2, sp, #12
 800e418:	4621      	mov	r1, r4
 800e41a:	4640      	mov	r0, r8
 800e41c:	f7ff fee2 	bl	800e1e4 <_printf_common>
 800e420:	3001      	adds	r0, #1
 800e422:	d14c      	bne.n	800e4be <_printf_i+0x1fe>
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	b004      	add	sp, #16
 800e42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42e:	4835      	ldr	r0, [pc, #212]	; (800e504 <_printf_i+0x244>)
 800e430:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e434:	6823      	ldr	r3, [r4, #0]
 800e436:	680e      	ldr	r6, [r1, #0]
 800e438:	061f      	lsls	r7, r3, #24
 800e43a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e43e:	600e      	str	r6, [r1, #0]
 800e440:	d514      	bpl.n	800e46c <_printf_i+0x1ac>
 800e442:	07d9      	lsls	r1, r3, #31
 800e444:	bf44      	itt	mi
 800e446:	f043 0320 	orrmi.w	r3, r3, #32
 800e44a:	6023      	strmi	r3, [r4, #0]
 800e44c:	b91d      	cbnz	r5, 800e456 <_printf_i+0x196>
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	f023 0320 	bic.w	r3, r3, #32
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	2310      	movs	r3, #16
 800e458:	e7b0      	b.n	800e3bc <_printf_i+0xfc>
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	f043 0320 	orr.w	r3, r3, #32
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	2378      	movs	r3, #120	; 0x78
 800e464:	4828      	ldr	r0, [pc, #160]	; (800e508 <_printf_i+0x248>)
 800e466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e46a:	e7e3      	b.n	800e434 <_printf_i+0x174>
 800e46c:	065e      	lsls	r6, r3, #25
 800e46e:	bf48      	it	mi
 800e470:	b2ad      	uxthmi	r5, r5
 800e472:	e7e6      	b.n	800e442 <_printf_i+0x182>
 800e474:	4616      	mov	r6, r2
 800e476:	e7bb      	b.n	800e3f0 <_printf_i+0x130>
 800e478:	680b      	ldr	r3, [r1, #0]
 800e47a:	6826      	ldr	r6, [r4, #0]
 800e47c:	6960      	ldr	r0, [r4, #20]
 800e47e:	1d1d      	adds	r5, r3, #4
 800e480:	600d      	str	r5, [r1, #0]
 800e482:	0635      	lsls	r5, r6, #24
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	d501      	bpl.n	800e48c <_printf_i+0x1cc>
 800e488:	6018      	str	r0, [r3, #0]
 800e48a:	e002      	b.n	800e492 <_printf_i+0x1d2>
 800e48c:	0671      	lsls	r1, r6, #25
 800e48e:	d5fb      	bpl.n	800e488 <_printf_i+0x1c8>
 800e490:	8018      	strh	r0, [r3, #0]
 800e492:	2300      	movs	r3, #0
 800e494:	6123      	str	r3, [r4, #16]
 800e496:	4616      	mov	r6, r2
 800e498:	e7ba      	b.n	800e410 <_printf_i+0x150>
 800e49a:	680b      	ldr	r3, [r1, #0]
 800e49c:	1d1a      	adds	r2, r3, #4
 800e49e:	600a      	str	r2, [r1, #0]
 800e4a0:	681e      	ldr	r6, [r3, #0]
 800e4a2:	6862      	ldr	r2, [r4, #4]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f7f1 feaa 	bl	8000200 <memchr>
 800e4ac:	b108      	cbz	r0, 800e4b2 <_printf_i+0x1f2>
 800e4ae:	1b80      	subs	r0, r0, r6
 800e4b0:	6060      	str	r0, [r4, #4]
 800e4b2:	6863      	ldr	r3, [r4, #4]
 800e4b4:	6123      	str	r3, [r4, #16]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4bc:	e7a8      	b.n	800e410 <_printf_i+0x150>
 800e4be:	6923      	ldr	r3, [r4, #16]
 800e4c0:	4632      	mov	r2, r6
 800e4c2:	4649      	mov	r1, r9
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	47d0      	blx	sl
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	d0ab      	beq.n	800e424 <_printf_i+0x164>
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	079b      	lsls	r3, r3, #30
 800e4d0:	d413      	bmi.n	800e4fa <_printf_i+0x23a>
 800e4d2:	68e0      	ldr	r0, [r4, #12]
 800e4d4:	9b03      	ldr	r3, [sp, #12]
 800e4d6:	4298      	cmp	r0, r3
 800e4d8:	bfb8      	it	lt
 800e4da:	4618      	movlt	r0, r3
 800e4dc:	e7a4      	b.n	800e428 <_printf_i+0x168>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	4632      	mov	r2, r6
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	4640      	mov	r0, r8
 800e4e6:	47d0      	blx	sl
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d09b      	beq.n	800e424 <_printf_i+0x164>
 800e4ec:	3501      	adds	r5, #1
 800e4ee:	68e3      	ldr	r3, [r4, #12]
 800e4f0:	9903      	ldr	r1, [sp, #12]
 800e4f2:	1a5b      	subs	r3, r3, r1
 800e4f4:	42ab      	cmp	r3, r5
 800e4f6:	dcf2      	bgt.n	800e4de <_printf_i+0x21e>
 800e4f8:	e7eb      	b.n	800e4d2 <_printf_i+0x212>
 800e4fa:	2500      	movs	r5, #0
 800e4fc:	f104 0619 	add.w	r6, r4, #25
 800e500:	e7f5      	b.n	800e4ee <_printf_i+0x22e>
 800e502:	bf00      	nop
 800e504:	0800efd5 	.word	0x0800efd5
 800e508:	0800efe6 	.word	0x0800efe6

0800e50c <__retarget_lock_acquire_recursive>:
 800e50c:	4770      	bx	lr

0800e50e <__retarget_lock_release_recursive>:
 800e50e:	4770      	bx	lr

0800e510 <memmove>:
 800e510:	4288      	cmp	r0, r1
 800e512:	b510      	push	{r4, lr}
 800e514:	eb01 0402 	add.w	r4, r1, r2
 800e518:	d902      	bls.n	800e520 <memmove+0x10>
 800e51a:	4284      	cmp	r4, r0
 800e51c:	4623      	mov	r3, r4
 800e51e:	d807      	bhi.n	800e530 <memmove+0x20>
 800e520:	1e43      	subs	r3, r0, #1
 800e522:	42a1      	cmp	r1, r4
 800e524:	d008      	beq.n	800e538 <memmove+0x28>
 800e526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e52a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e52e:	e7f8      	b.n	800e522 <memmove+0x12>
 800e530:	4402      	add	r2, r0
 800e532:	4601      	mov	r1, r0
 800e534:	428a      	cmp	r2, r1
 800e536:	d100      	bne.n	800e53a <memmove+0x2a>
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e53e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e542:	e7f7      	b.n	800e534 <memmove+0x24>

0800e544 <_realloc_r>:
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	4607      	mov	r7, r0
 800e548:	4614      	mov	r4, r2
 800e54a:	460e      	mov	r6, r1
 800e54c:	b921      	cbnz	r1, 800e558 <_realloc_r+0x14>
 800e54e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e552:	4611      	mov	r1, r2
 800e554:	f7ff bc54 	b.w	800de00 <_malloc_r>
 800e558:	b922      	cbnz	r2, 800e564 <_realloc_r+0x20>
 800e55a:	f7ff fc01 	bl	800dd60 <_free_r>
 800e55e:	4625      	mov	r5, r4
 800e560:	4628      	mov	r0, r5
 800e562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e564:	f000 f814 	bl	800e590 <_malloc_usable_size_r>
 800e568:	42a0      	cmp	r0, r4
 800e56a:	d20f      	bcs.n	800e58c <_realloc_r+0x48>
 800e56c:	4621      	mov	r1, r4
 800e56e:	4638      	mov	r0, r7
 800e570:	f7ff fc46 	bl	800de00 <_malloc_r>
 800e574:	4605      	mov	r5, r0
 800e576:	2800      	cmp	r0, #0
 800e578:	d0f2      	beq.n	800e560 <_realloc_r+0x1c>
 800e57a:	4631      	mov	r1, r6
 800e57c:	4622      	mov	r2, r4
 800e57e:	f7ff fbd9 	bl	800dd34 <memcpy>
 800e582:	4631      	mov	r1, r6
 800e584:	4638      	mov	r0, r7
 800e586:	f7ff fbeb 	bl	800dd60 <_free_r>
 800e58a:	e7e9      	b.n	800e560 <_realloc_r+0x1c>
 800e58c:	4635      	mov	r5, r6
 800e58e:	e7e7      	b.n	800e560 <_realloc_r+0x1c>

0800e590 <_malloc_usable_size_r>:
 800e590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e594:	1f18      	subs	r0, r3, #4
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfbc      	itt	lt
 800e59a:	580b      	ldrlt	r3, [r1, r0]
 800e59c:	18c0      	addlt	r0, r0, r3
 800e59e:	4770      	bx	lr

0800e5a0 <_init>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	bf00      	nop
 800e5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5a6:	bc08      	pop	{r3}
 800e5a8:	469e      	mov	lr, r3
 800e5aa:	4770      	bx	lr

0800e5ac <_fini>:
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ae:	bf00      	nop
 800e5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5b2:	bc08      	pop	{r3}
 800e5b4:	469e      	mov	lr, r3
 800e5b6:	4770      	bx	lr
